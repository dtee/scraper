''' <summary>
''' This class uses LCS Delta Algorithm to find the Longest-Common-Subsequence
''' </summary>
''' <remarks></remarks>
Public Class LCSDelta
   Public Shared MaxChar As Integer = Short.MaxValue

   ' Constants used on the LCS Algorithm
   Private Const cUPLEFT As Byte = 1
   Private Const cUP As Byte = 2
   Private Const cLEFT As Byte = 3
   Private Const cUPLEFTTAIL As Byte = 4

   ''' <summary>
   ''' Stores Matched List for the first string
   ''' </summary>
   ''' <remarks></remarks>
   Private xMatchList As LinkedList(Of LCSMatchInfo)

   ''' <summary>
   ''' Contains Matched List for the second string
   ''' </summary>
   ''' <remarks></remarks>
   Private yMatchList As LinkedList(Of LCSMatchInfo)

   ''' <summary>
   ''' First string information
   ''' </summary>
   ''' <remarks></remarks>
   Public xLCSString As New LCSString

   ''' <summary>
   ''' Second string information
   ''' </summary>
   Public yLCSString As New LCSString

   ''' <summary>
   '''  LCS found in both string.
   ''' </summary>
   ''' <remarks></remarks>
   Public MatchedString As String = ""

   Private Shared _Singleton As New LCSDelta
   Public Shared ReadOnly Property Singleton() As LCSDelta
      Get
         Return _Singleton
      End Get
   End Property

   ''' <summary>
   ''' Find the match between two strings.
   ''' </summary>
   ''' <param name="txt1">String with length less than MaxValue</param>
   ''' <param name="txt2">String with length less than MaxValue</param>
   ''' <remarks>
   ''' </remarks>
   Public Sub FindMatch(ByVal txt1 As String, ByVal txt2 As String)
      clearData()

      If txt1 Is Nothing Or txt2 Is Nothing Then
         Return
      End If

      If (txt1.Length > MaxChar Or txt2.Length > MaxChar) Then
         Return
      End If

      xLCSString = New LCSString()
      xLCSString.Text = txt1
      xLCSString.LCSMatchList = New LinkedList(Of LCSMatchInfo)
      xLCSString.LCSNotMatchList = New LinkedList(Of LCSMatchInfo)
      Me.xMatchList = xLCSString.LCSMatchList

      yLCSString = New LCSString()
      yLCSString.Text = txt2
      yLCSString.LCSMatchList = New LinkedList(Of LCSMatchInfo)
      yLCSString.LCSNotMatchList = New LinkedList(Of LCSMatchInfo)
      Me.yMatchList = yLCSString.LCSMatchList

      Dim lcsArray(,) As Byte = Me.ComputeLCSDelta(" " & txt1, " " & txt2)
      backtrackLCS(lcsArray)
   End Sub

   ''' <summary>
   '''  Clear the match collection each time data is set.
   ''' </summary>
   ''' <remarks></remarks>
   Private Sub clearData()
      Me.xMatchList = Nothing
      Me.yMatchList = Nothing
      MatchedString = ""
   End Sub

   ''' <summary>
   ''' Init Match list and array list
   ''' </summary>
   ''' <remarks></remarks>
   Public Sub New()
      Me.xLCSString.LCSMatchList = Me.xMatchList
      Me.yLCSString.LCSMatchList = Me.yMatchList
   End Sub

   ''' <summary>
   ''' Generate the matrix using the lcs delta algorithm
   ''' </summary>
   ''' <returns>Return 2D array containing the LCS Array</returns>
   ''' <remarks>
   ''' Algorithm site: http://en.wikipedia.org/wiki/Longest-common_subsequence_problem
   ''' </remarks>
   Private Function ComputeLCSDelta(ByVal str1 As String, ByVal str2 As String) As Byte(,)
      Dim c As Integer(,)        ' May need to be bigger
      Dim b As Byte(,)

      Dim xSize As Integer = str1.Length - 1
      Dim ySize As Integer = str2.Length - 1

      ReDim c(xSize, ysize)
      ReDim b(xSize, ySize)

      Dim i As Integer, j As Integer
      For i = 1 To xSize
         For j = 1 To ySize
            If (str1(i) = str2(j)) Then
               c(i, j) = c(i - 1, j - 1) + 1
               b(i, j) = cUPLEFT

               If (b(i - 1, j - 1) = cUPLEFT Or b(i - 1, j - 1) = cUPLEFTTAIL) Then
                  b(i, j) = cUPLEFTTAIL
               End If
            ElseIf (c(i - 1, j) >= c(i, j - 1)) Then
               c(i, j) = c(i - 1, j)
               b(i, j) = cUP
            Else
               c(i, j) = c(i, j - 1)
               b(i, j) = cLEFT
            End If
         Next
      Next

      Return b
   End Function

   ''' <summary>
   ''' Back track the matrix generated by lcs delta algorithm
   ''' </summary>
   ''' <param name="lcsArray"></param>
   ''' <remarks></remarks>
   Private Sub backtrackLCS(ByVal lcsArray As Byte(,))
      Dim i As Short, j As Short
      Dim moveIndex As Short = lcsArray.GetUpperBound(1)

      Dim xMatchInfo As LCSMatchInfo = Nothing
      Dim yMatchInfo As LCSMatchInfo = Nothing

      Me.xMatchList.Clear()
      Me.yMatchList.Clear()

      Me.printArray(lcsArray)
      ' Build the tree
      i = lcsArray.GetUpperBound(0)
      While (i > 0)

         j = moveIndex
         While (j > 0)
            ' Move up
            If (lcsArray(i, j) = cUP) Then
               Exit While
            ElseIf (lcsArray(i, j) = cUPLEFTTAIL) Then
               If (xMatchInfo Is Nothing) Then
                  xMatchInfo = New LCSMatchInfo
                  yMatchInfo = New LCSMatchInfo

                  xMatchInfo.iStop = i - 1
                  yMatchInfo.iStop = j - 1
               End If

               ' Move left
               moveIndex = moveIndex - 1
               Exit While
            ElseIf (lcsArray(i, j) = cUPLEFT) Then
               ' Add 
               If (xMatchInfo Is Nothing) Then     ' Special case: one letter group!
                  xMatchInfo = New LCSMatchInfo
                  yMatchInfo = New LCSMatchInfo

                  xMatchInfo.iStop = i - 1
                  yMatchInfo.iStop = j - 1
               End If

               xMatchInfo.iStart = i - 1
               yMatchInfo.iStart = j - 1

               ' +1 to make up for Last Comparision
               xMatchInfo.text = Me.xLCSString.Text.Substring(i - 1, xMatchInfo.iStop - i + 2)
               yMatchInfo.text = xMatchInfo.text

               MatchedString = xMatchInfo.text & MatchedString

               xMatchList.AddFirst(xMatchInfo)
               yMatchList.AddFirst(yMatchInfo)

               ' This diagonal ended - add and clear match info
               xMatchInfo = Nothing
               yMatchInfo = Nothing

               ' Move left
               moveIndex = moveIndex - 1
               Exit While
            ElseIf (lcsArray(i, j) = cLEFT) Then
               moveIndex = moveIndex - 1
            End If

            j -= 1
         End While

         i -= 1
      End While

      Me.printArray(lcsArray)

      Me.xLCSString.MatchedText = MatchedString
      Me.yLCSString.MatchedText = MatchedString
   End Sub

   ''' <summary>
   ''' Print the lcs array alogn with index and the string (Used for debugging purposes
   ''' </summary>
   ''' <param name="b"></param>
   ''' <remarks></remarks>
   Private Sub printArray(ByVal b(,) As Byte)
      Dim i As Short, j As Short
      Dim ySize As Integer = b.GetUpperBound(1)
      Dim xSize As Integer = b.GetUpperBound(0)
      Dim y As String = Me.yLCSString.Text
      Dim x As String = Me.xLCSString.Text

      Console.Write("  ")
      For i = 0 To ySize
         Console.Write(y(i) & " ")
      Next

      Console.WriteLine()
      For i = 0 To xSize
         Console.Write(x(i) & " ")
         For j = 0 To ySize
            Console.Write(b(i, j) & " ")
         Next
         Console.Write(i & " ")
         Console.WriteLine()
      Next
      Console.Write("  ")
      For i = 0 To ySize
         Console.Write(i & " ")
      Next
      Console.WriteLine()
   End Sub
End Class