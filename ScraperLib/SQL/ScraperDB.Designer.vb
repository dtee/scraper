'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.1378
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("ScraperDB"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class ScraperDB
    Inherits Global.System.Data.DataSet
    
    Private tableTagLibrary As TagLibraryDataTable
    
    Private tableUrl As UrlDataTable
    
    Private tableCrawlProject As CrawlProjectDataTable
    
    Private tableUrlStatus As UrlStatusDataTable
    
    Private tableLinkMapping As LinkMappingDataTable
    
    Private tableProject As ProjectDataTable
    
    Private tableProject_Url As Project_UrlDataTable
    
    Private tableProxy As ProxyDataTable
    
    Private tableProxyStatus As ProxyStatusDataTable
    
    Private tableProject_Sample As Project_SampleDataTable
    
    Private tableUrlReferences As UrlReferencesDataTable
    
    Private tableDataType As DataTypeDataTable
    
    Private tableCrawlClient As CrawlClientDataTable
    
    Private tableCron As CronDataTable
    
    Private relationFK_TAGLIBRA_PARENTTAG_TAGLIBRA As Global.System.Data.DataRelation
    
    Private relationFK_DataType_TagLibrary As Global.System.Data.DataRelation
    
    Private relationFK_TAGLIBRA_PROJECT_T_PROJECT As Global.System.Data.DataRelation
    
    Private relationFK_URL_PROXY_URL_PROXY As Global.System.Data.DataRelation
    
    Private relationFK_URL_URL_URLST_URLSTATU As Global.System.Data.DataRelation
    
    Private relationFK_CrawlProject_Url As Global.System.Data.DataRelation
    
    Private relationFK_CrawlClient_Url As Global.System.Data.DataRelation
    
    Private relationFK_LINKMAPP_LINKMAPPI_PROJECT As Global.System.Data.DataRelation
    
    Private relationFK_LINKMAPP_TAGLIBRAR_TAGLIBRA As Global.System.Data.DataRelation
    
    Private relationFK_PROJECT_PROJECT_C_CRAWLPRO As Global.System.Data.DataRelation
    
    Private relationFK_PROJECT__URL_PROJE_URL As Global.System.Data.DataRelation
    
    Private relationFK_Project_Project_Url As Global.System.Data.DataRelation
    
    Private relationFK_LinkMapping_Project_Url As Global.System.Data.DataRelation
    
    Private relationFK_PROXY_PROXYSTAT_PROXYSTA As Global.System.Data.DataRelation
    
    Private relationFK_Project_Project_Sample As Global.System.Data.DataRelation
    
    Private relationUrl_Main As Global.System.Data.DataRelation
    
    Private relationUrl_Referer As Global.System.Data.DataRelation
    
    Private relationFK_CrawlProject_Cron As Global.System.Data.DataRelation
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("TagLibrary")) Is Nothing) Then
                MyBase.Tables.Add(New TagLibraryDataTable(ds.Tables("TagLibrary")))
            End If
            If (Not (ds.Tables("Url")) Is Nothing) Then
                MyBase.Tables.Add(New UrlDataTable(ds.Tables("Url")))
            End If
            If (Not (ds.Tables("CrawlProject")) Is Nothing) Then
                MyBase.Tables.Add(New CrawlProjectDataTable(ds.Tables("CrawlProject")))
            End If
            If (Not (ds.Tables("UrlStatus")) Is Nothing) Then
                MyBase.Tables.Add(New UrlStatusDataTable(ds.Tables("UrlStatus")))
            End If
            If (Not (ds.Tables("LinkMapping")) Is Nothing) Then
                MyBase.Tables.Add(New LinkMappingDataTable(ds.Tables("LinkMapping")))
            End If
            If (Not (ds.Tables("Project")) Is Nothing) Then
                MyBase.Tables.Add(New ProjectDataTable(ds.Tables("Project")))
            End If
            If (Not (ds.Tables("Project_Url")) Is Nothing) Then
                MyBase.Tables.Add(New Project_UrlDataTable(ds.Tables("Project_Url")))
            End If
            If (Not (ds.Tables("Proxy")) Is Nothing) Then
                MyBase.Tables.Add(New ProxyDataTable(ds.Tables("Proxy")))
            End If
            If (Not (ds.Tables("ProxyStatus")) Is Nothing) Then
                MyBase.Tables.Add(New ProxyStatusDataTable(ds.Tables("ProxyStatus")))
            End If
            If (Not (ds.Tables("Project_Sample")) Is Nothing) Then
                MyBase.Tables.Add(New Project_SampleDataTable(ds.Tables("Project_Sample")))
            End If
            If (Not (ds.Tables("UrlReferences")) Is Nothing) Then
                MyBase.Tables.Add(New UrlReferencesDataTable(ds.Tables("UrlReferences")))
            End If
            If (Not (ds.Tables("DataType")) Is Nothing) Then
                MyBase.Tables.Add(New DataTypeDataTable(ds.Tables("DataType")))
            End If
            If (Not (ds.Tables("CrawlClient")) Is Nothing) Then
                MyBase.Tables.Add(New CrawlClientDataTable(ds.Tables("CrawlClient")))
            End If
            If (Not (ds.Tables("Cron")) Is Nothing) Then
                MyBase.Tables.Add(New CronDataTable(ds.Tables("Cron")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property TagLibrary() As TagLibraryDataTable
        Get
            Return Me.tableTagLibrary
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Url() As UrlDataTable
        Get
            Return Me.tableUrl
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CrawlProject() As CrawlProjectDataTable
        Get
            Return Me.tableCrawlProject
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property UrlStatus() As UrlStatusDataTable
        Get
            Return Me.tableUrlStatus
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property LinkMapping() As LinkMappingDataTable
        Get
            Return Me.tableLinkMapping
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Project() As ProjectDataTable
        Get
            Return Me.tableProject
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Project_Url() As Project_UrlDataTable
        Get
            Return Me.tableProject_Url
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Proxy() As ProxyDataTable
        Get
            Return Me.tableProxy
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ProxyStatus() As ProxyStatusDataTable
        Get
            Return Me.tableProxyStatus
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Project_Sample() As Project_SampleDataTable
        Get
            Return Me.tableProject_Sample
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property UrlReferences() As UrlReferencesDataTable
        Get
            Return Me.tableUrlReferences
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property DataType() As DataTypeDataTable
        Get
            Return Me.tableDataType
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CrawlClient() As CrawlClientDataTable
        Get
            Return Me.tableCrawlClient
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Cron() As CronDataTable
        Get
            Return Me.tableCron
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As ScraperDB = CType(MyBase.Clone,ScraperDB)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("TagLibrary")) Is Nothing) Then
                MyBase.Tables.Add(New TagLibraryDataTable(ds.Tables("TagLibrary")))
            End If
            If (Not (ds.Tables("Url")) Is Nothing) Then
                MyBase.Tables.Add(New UrlDataTable(ds.Tables("Url")))
            End If
            If (Not (ds.Tables("CrawlProject")) Is Nothing) Then
                MyBase.Tables.Add(New CrawlProjectDataTable(ds.Tables("CrawlProject")))
            End If
            If (Not (ds.Tables("UrlStatus")) Is Nothing) Then
                MyBase.Tables.Add(New UrlStatusDataTable(ds.Tables("UrlStatus")))
            End If
            If (Not (ds.Tables("LinkMapping")) Is Nothing) Then
                MyBase.Tables.Add(New LinkMappingDataTable(ds.Tables("LinkMapping")))
            End If
            If (Not (ds.Tables("Project")) Is Nothing) Then
                MyBase.Tables.Add(New ProjectDataTable(ds.Tables("Project")))
            End If
            If (Not (ds.Tables("Project_Url")) Is Nothing) Then
                MyBase.Tables.Add(New Project_UrlDataTable(ds.Tables("Project_Url")))
            End If
            If (Not (ds.Tables("Proxy")) Is Nothing) Then
                MyBase.Tables.Add(New ProxyDataTable(ds.Tables("Proxy")))
            End If
            If (Not (ds.Tables("ProxyStatus")) Is Nothing) Then
                MyBase.Tables.Add(New ProxyStatusDataTable(ds.Tables("ProxyStatus")))
            End If
            If (Not (ds.Tables("Project_Sample")) Is Nothing) Then
                MyBase.Tables.Add(New Project_SampleDataTable(ds.Tables("Project_Sample")))
            End If
            If (Not (ds.Tables("UrlReferences")) Is Nothing) Then
                MyBase.Tables.Add(New UrlReferencesDataTable(ds.Tables("UrlReferences")))
            End If
            If (Not (ds.Tables("DataType")) Is Nothing) Then
                MyBase.Tables.Add(New DataTypeDataTable(ds.Tables("DataType")))
            End If
            If (Not (ds.Tables("CrawlClient")) Is Nothing) Then
                MyBase.Tables.Add(New CrawlClientDataTable(ds.Tables("CrawlClient")))
            End If
            If (Not (ds.Tables("Cron")) Is Nothing) Then
                MyBase.Tables.Add(New CronDataTable(ds.Tables("Cron")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableTagLibrary = CType(MyBase.Tables("TagLibrary"),TagLibraryDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTagLibrary) Is Nothing) Then
                Me.tableTagLibrary.InitVars
            End If
        End If
        Me.tableUrl = CType(MyBase.Tables("Url"),UrlDataTable)
        If (initTable = true) Then
            If (Not (Me.tableUrl) Is Nothing) Then
                Me.tableUrl.InitVars
            End If
        End If
        Me.tableCrawlProject = CType(MyBase.Tables("CrawlProject"),CrawlProjectDataTable)
        If (initTable = true) Then
            If (Not (Me.tableCrawlProject) Is Nothing) Then
                Me.tableCrawlProject.InitVars
            End If
        End If
        Me.tableUrlStatus = CType(MyBase.Tables("UrlStatus"),UrlStatusDataTable)
        If (initTable = true) Then
            If (Not (Me.tableUrlStatus) Is Nothing) Then
                Me.tableUrlStatus.InitVars
            End If
        End If
        Me.tableLinkMapping = CType(MyBase.Tables("LinkMapping"),LinkMappingDataTable)
        If (initTable = true) Then
            If (Not (Me.tableLinkMapping) Is Nothing) Then
                Me.tableLinkMapping.InitVars
            End If
        End If
        Me.tableProject = CType(MyBase.Tables("Project"),ProjectDataTable)
        If (initTable = true) Then
            If (Not (Me.tableProject) Is Nothing) Then
                Me.tableProject.InitVars
            End If
        End If
        Me.tableProject_Url = CType(MyBase.Tables("Project_Url"),Project_UrlDataTable)
        If (initTable = true) Then
            If (Not (Me.tableProject_Url) Is Nothing) Then
                Me.tableProject_Url.InitVars
            End If
        End If
        Me.tableProxy = CType(MyBase.Tables("Proxy"),ProxyDataTable)
        If (initTable = true) Then
            If (Not (Me.tableProxy) Is Nothing) Then
                Me.tableProxy.InitVars
            End If
        End If
        Me.tableProxyStatus = CType(MyBase.Tables("ProxyStatus"),ProxyStatusDataTable)
        If (initTable = true) Then
            If (Not (Me.tableProxyStatus) Is Nothing) Then
                Me.tableProxyStatus.InitVars
            End If
        End If
        Me.tableProject_Sample = CType(MyBase.Tables("Project_Sample"),Project_SampleDataTable)
        If (initTable = true) Then
            If (Not (Me.tableProject_Sample) Is Nothing) Then
                Me.tableProject_Sample.InitVars
            End If
        End If
        Me.tableUrlReferences = CType(MyBase.Tables("UrlReferences"),UrlReferencesDataTable)
        If (initTable = true) Then
            If (Not (Me.tableUrlReferences) Is Nothing) Then
                Me.tableUrlReferences.InitVars
            End If
        End If
        Me.tableDataType = CType(MyBase.Tables("DataType"),DataTypeDataTable)
        If (initTable = true) Then
            If (Not (Me.tableDataType) Is Nothing) Then
                Me.tableDataType.InitVars
            End If
        End If
        Me.tableCrawlClient = CType(MyBase.Tables("CrawlClient"),CrawlClientDataTable)
        If (initTable = true) Then
            If (Not (Me.tableCrawlClient) Is Nothing) Then
                Me.tableCrawlClient.InitVars
            End If
        End If
        Me.tableCron = CType(MyBase.Tables("Cron"),CronDataTable)
        If (initTable = true) Then
            If (Not (Me.tableCron) Is Nothing) Then
                Me.tableCron.InitVars
            End If
        End If
        Me.relationFK_TAGLIBRA_PARENTTAG_TAGLIBRA = Me.Relations("FK_TAGLIBRA_PARENTTAG_TAGLIBRA")
        Me.relationFK_DataType_TagLibrary = Me.Relations("FK_DataType_TagLibrary")
        Me.relationFK_TAGLIBRA_PROJECT_T_PROJECT = Me.Relations("FK_TAGLIBRA_PROJECT_T_PROJECT")
        Me.relationFK_URL_PROXY_URL_PROXY = Me.Relations("FK_URL_PROXY_URL_PROXY")
        Me.relationFK_URL_URL_URLST_URLSTATU = Me.Relations("FK_URL_URL_URLST_URLSTATU")
        Me.relationFK_CrawlProject_Url = Me.Relations("FK_CrawlProject_Url")
        Me.relationFK_CrawlClient_Url = Me.Relations("FK_CrawlClient_Url")
        Me.relationFK_LINKMAPP_LINKMAPPI_PROJECT = Me.Relations("FK_LINKMAPP_LINKMAPPI_PROJECT")
        Me.relationFK_LINKMAPP_TAGLIBRAR_TAGLIBRA = Me.Relations("FK_LINKMAPP_TAGLIBRAR_TAGLIBRA")
        Me.relationFK_PROJECT_PROJECT_C_CRAWLPRO = Me.Relations("FK_PROJECT_PROJECT_C_CRAWLPRO")
        Me.relationFK_PROJECT__URL_PROJE_URL = Me.Relations("FK_PROJECT__URL_PROJE_URL")
        Me.relationFK_Project_Project_Url = Me.Relations("FK_Project_Project_Url")
        Me.relationFK_LinkMapping_Project_Url = Me.Relations("FK_LinkMapping_Project_Url")
        Me.relationFK_PROXY_PROXYSTAT_PROXYSTA = Me.Relations("FK_PROXY_PROXYSTAT_PROXYSTA")
        Me.relationFK_Project_Project_Sample = Me.Relations("FK_Project_Project_Sample")
        Me.relationUrl_Main = Me.Relations("Url_Main")
        Me.relationUrl_Referer = Me.Relations("Url_Referer")
        Me.relationFK_CrawlProject_Cron = Me.Relations("FK_CrawlProject_Cron")
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "ScraperDB"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/ScraperDB.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableTagLibrary = New TagLibraryDataTable
        MyBase.Tables.Add(Me.tableTagLibrary)
        Me.tableUrl = New UrlDataTable
        MyBase.Tables.Add(Me.tableUrl)
        Me.tableCrawlProject = New CrawlProjectDataTable
        MyBase.Tables.Add(Me.tableCrawlProject)
        Me.tableUrlStatus = New UrlStatusDataTable
        MyBase.Tables.Add(Me.tableUrlStatus)
        Me.tableLinkMapping = New LinkMappingDataTable
        MyBase.Tables.Add(Me.tableLinkMapping)
        Me.tableProject = New ProjectDataTable
        MyBase.Tables.Add(Me.tableProject)
        Me.tableProject_Url = New Project_UrlDataTable
        MyBase.Tables.Add(Me.tableProject_Url)
        Me.tableProxy = New ProxyDataTable
        MyBase.Tables.Add(Me.tableProxy)
        Me.tableProxyStatus = New ProxyStatusDataTable
        MyBase.Tables.Add(Me.tableProxyStatus)
        Me.tableProject_Sample = New Project_SampleDataTable
        MyBase.Tables.Add(Me.tableProject_Sample)
        Me.tableUrlReferences = New UrlReferencesDataTable
        MyBase.Tables.Add(Me.tableUrlReferences)
        Me.tableDataType = New DataTypeDataTable
        MyBase.Tables.Add(Me.tableDataType)
        Me.tableCrawlClient = New CrawlClientDataTable
        MyBase.Tables.Add(Me.tableCrawlClient)
        Me.tableCron = New CronDataTable
        MyBase.Tables.Add(Me.tableCron)
        Dim fkc As Global.System.Data.ForeignKeyConstraint
        fkc = New Global.System.Data.ForeignKeyConstraint("FK_TAGLIBRA_PARENTTAG_TAGLIBRA", New Global.System.Data.DataColumn() {Me.tableTagLibrary.TagIDColumn}, New Global.System.Data.DataColumn() {Me.tableTagLibrary.Parent_TagIDColumn})
        Me.tableTagLibrary.Constraints.Add(fkc)
        fkc.AcceptRejectRule = Global.System.Data.AcceptRejectRule.None
        fkc.DeleteRule = Global.System.Data.Rule.Cascade
        fkc.UpdateRule = Global.System.Data.Rule.Cascade
        fkc = New Global.System.Data.ForeignKeyConstraint("FK_DataType_TagLibrary", New Global.System.Data.DataColumn() {Me.tableDataType.DataTypeIDColumn}, New Global.System.Data.DataColumn() {Me.tableTagLibrary.DataTypeID_FKColumn})
        Me.tableTagLibrary.Constraints.Add(fkc)
        fkc.AcceptRejectRule = Global.System.Data.AcceptRejectRule.None
        fkc.DeleteRule = Global.System.Data.Rule.Cascade
        fkc.UpdateRule = Global.System.Data.Rule.Cascade
        fkc = New Global.System.Data.ForeignKeyConstraint("FK_TAGLIBRA_PROJECT_T_PROJECT", New Global.System.Data.DataColumn() {Me.tableProject.ProjectIDColumn}, New Global.System.Data.DataColumn() {Me.tableTagLibrary.ProjectIDColumn})
        Me.tableTagLibrary.Constraints.Add(fkc)
        fkc.AcceptRejectRule = Global.System.Data.AcceptRejectRule.None
        fkc.DeleteRule = Global.System.Data.Rule.Cascade
        fkc.UpdateRule = Global.System.Data.Rule.Cascade
        fkc = New Global.System.Data.ForeignKeyConstraint("FK_URL_PROXY_URL_PROXY", New Global.System.Data.DataColumn() {Me.tableProxy.ProxyIDColumn}, New Global.System.Data.DataColumn() {Me.tableUrl.ProxyIDColumn})
        Me.tableUrl.Constraints.Add(fkc)
        fkc.AcceptRejectRule = Global.System.Data.AcceptRejectRule.None
        fkc.DeleteRule = Global.System.Data.Rule.Cascade
        fkc.UpdateRule = Global.System.Data.Rule.Cascade
        fkc = New Global.System.Data.ForeignKeyConstraint("FK_URL_URL_URLST_URLSTATU", New Global.System.Data.DataColumn() {Me.tableUrlStatus.UrlStatusIDColumn}, New Global.System.Data.DataColumn() {Me.tableUrl.UrlStatusIDColumn})
        Me.tableUrl.Constraints.Add(fkc)
        fkc.AcceptRejectRule = Global.System.Data.AcceptRejectRule.None
        fkc.DeleteRule = Global.System.Data.Rule.Cascade
        fkc.UpdateRule = Global.System.Data.Rule.Cascade
        fkc = New Global.System.Data.ForeignKeyConstraint("FK_CrawlProject_Url", New Global.System.Data.DataColumn() {Me.tableCrawlProject.CrawlProjectIDColumn}, New Global.System.Data.DataColumn() {Me.tableUrl.CrawlProjectID_FKColumn})
        Me.tableUrl.Constraints.Add(fkc)
        fkc.AcceptRejectRule = Global.System.Data.AcceptRejectRule.None
        fkc.DeleteRule = Global.System.Data.Rule.Cascade
        fkc.UpdateRule = Global.System.Data.Rule.Cascade
        fkc = New Global.System.Data.ForeignKeyConstraint("FK_CrawlClient_Url", New Global.System.Data.DataColumn() {Me.tableCrawlClient.ClientIDColumn}, New Global.System.Data.DataColumn() {Me.tableUrl.ClientID_FKColumn})
        Me.tableUrl.Constraints.Add(fkc)
        fkc.AcceptRejectRule = Global.System.Data.AcceptRejectRule.None
        fkc.DeleteRule = Global.System.Data.Rule.Cascade
        fkc.UpdateRule = Global.System.Data.Rule.Cascade
        fkc = New Global.System.Data.ForeignKeyConstraint("FK_LINKMAPP_LINKMAPPI_PROJECT", New Global.System.Data.DataColumn() {Me.tableProject.ProjectIDColumn}, New Global.System.Data.DataColumn() {Me.tableLinkMapping.ProjectIDColumn})
        Me.tableLinkMapping.Constraints.Add(fkc)
        fkc.AcceptRejectRule = Global.System.Data.AcceptRejectRule.None
        fkc.DeleteRule = Global.System.Data.Rule.Cascade
        fkc.UpdateRule = Global.System.Data.Rule.Cascade
        fkc = New Global.System.Data.ForeignKeyConstraint("FK_LINKMAPP_TAGLIBRAR_TAGLIBRA", New Global.System.Data.DataColumn() {Me.tableTagLibrary.TagIDColumn}, New Global.System.Data.DataColumn() {Me.tableLinkMapping.TagIDColumn})
        Me.tableLinkMapping.Constraints.Add(fkc)
        fkc.AcceptRejectRule = Global.System.Data.AcceptRejectRule.None
        fkc.DeleteRule = Global.System.Data.Rule.Cascade
        fkc.UpdateRule = Global.System.Data.Rule.Cascade
        fkc = New Global.System.Data.ForeignKeyConstraint("FK_PROJECT_PROJECT_C_CRAWLPRO", New Global.System.Data.DataColumn() {Me.tableCrawlProject.CrawlProjectIDColumn}, New Global.System.Data.DataColumn() {Me.tableProject.CrawlProjectIDColumn})
        Me.tableProject.Constraints.Add(fkc)
        fkc.AcceptRejectRule = Global.System.Data.AcceptRejectRule.None
        fkc.DeleteRule = Global.System.Data.Rule.Cascade
        fkc.UpdateRule = Global.System.Data.Rule.Cascade
        fkc = New Global.System.Data.ForeignKeyConstraint("FK_PROJECT__URL_PROJE_URL", New Global.System.Data.DataColumn() {Me.tableUrl.UrlIDColumn}, New Global.System.Data.DataColumn() {Me.tableProject_Url.UrlIDColumn})
        Me.tableProject_Url.Constraints.Add(fkc)
        fkc.AcceptRejectRule = Global.System.Data.AcceptRejectRule.None
        fkc.DeleteRule = Global.System.Data.Rule.Cascade
        fkc.UpdateRule = Global.System.Data.Rule.Cascade
        fkc = New Global.System.Data.ForeignKeyConstraint("FK_Project_Project_Url", New Global.System.Data.DataColumn() {Me.tableProject.ProjectIDColumn}, New Global.System.Data.DataColumn() {Me.tableProject_Url.ProjectIDColumn})
        Me.tableProject_Url.Constraints.Add(fkc)
        fkc.AcceptRejectRule = Global.System.Data.AcceptRejectRule.None
        fkc.DeleteRule = Global.System.Data.Rule.Cascade
        fkc.UpdateRule = Global.System.Data.Rule.Cascade
        fkc = New Global.System.Data.ForeignKeyConstraint("FK_LinkMapping_Project_Url", New Global.System.Data.DataColumn() {Me.tableLinkMapping.LinkMappingIDColumn}, New Global.System.Data.DataColumn() {Me.tableProject_Url.LinkMappingID_FKColumn})
        Me.tableProject_Url.Constraints.Add(fkc)
        fkc.AcceptRejectRule = Global.System.Data.AcceptRejectRule.None
        fkc.DeleteRule = Global.System.Data.Rule.Cascade
        fkc.UpdateRule = Global.System.Data.Rule.Cascade
        fkc = New Global.System.Data.ForeignKeyConstraint("FK_PROXY_PROXYSTAT_PROXYSTA", New Global.System.Data.DataColumn() {Me.tableProxyStatus.ProxyStatusIDColumn}, New Global.System.Data.DataColumn() {Me.tableProxy.ProxyStatusIDColumn})
        Me.tableProxy.Constraints.Add(fkc)
        fkc.AcceptRejectRule = Global.System.Data.AcceptRejectRule.None
        fkc.DeleteRule = Global.System.Data.Rule.Cascade
        fkc.UpdateRule = Global.System.Data.Rule.Cascade
        fkc = New Global.System.Data.ForeignKeyConstraint("FK_Project_Project_Sample", New Global.System.Data.DataColumn() {Me.tableProject.ProjectIDColumn}, New Global.System.Data.DataColumn() {Me.tableProject_Sample.ProjectID_FKColumn})
        Me.tableProject_Sample.Constraints.Add(fkc)
        fkc.AcceptRejectRule = Global.System.Data.AcceptRejectRule.None
        fkc.DeleteRule = Global.System.Data.Rule.Cascade
        fkc.UpdateRule = Global.System.Data.Rule.Cascade
        fkc = New Global.System.Data.ForeignKeyConstraint("Url_Main", New Global.System.Data.DataColumn() {Me.tableUrl.UrlIDColumn}, New Global.System.Data.DataColumn() {Me.tableUrlReferences.UrlID_FKColumn})
        Me.tableUrlReferences.Constraints.Add(fkc)
        fkc.AcceptRejectRule = Global.System.Data.AcceptRejectRule.None
        fkc.DeleteRule = Global.System.Data.Rule.Cascade
        fkc.UpdateRule = Global.System.Data.Rule.Cascade
        fkc = New Global.System.Data.ForeignKeyConstraint("Url_Referer", New Global.System.Data.DataColumn() {Me.tableUrl.UrlIDColumn}, New Global.System.Data.DataColumn() {Me.tableUrlReferences.ReferingUrlID_FKColumn})
        Me.tableUrlReferences.Constraints.Add(fkc)
        fkc.AcceptRejectRule = Global.System.Data.AcceptRejectRule.None
        fkc.DeleteRule = Global.System.Data.Rule.Cascade
        fkc.UpdateRule = Global.System.Data.Rule.Cascade
        fkc = New Global.System.Data.ForeignKeyConstraint("FK_CrawlProject_Cron", New Global.System.Data.DataColumn() {Me.tableCrawlProject.CrawlProjectIDColumn}, New Global.System.Data.DataColumn() {Me.tableCron.CrawlProjectID_FKColumn})
        Me.tableCron.Constraints.Add(fkc)
        fkc.AcceptRejectRule = Global.System.Data.AcceptRejectRule.None
        fkc.DeleteRule = Global.System.Data.Rule.Cascade
        fkc.UpdateRule = Global.System.Data.Rule.Cascade
        Me.relationFK_TAGLIBRA_PARENTTAG_TAGLIBRA = New Global.System.Data.DataRelation("FK_TAGLIBRA_PARENTTAG_TAGLIBRA", New Global.System.Data.DataColumn() {Me.tableTagLibrary.TagIDColumn}, New Global.System.Data.DataColumn() {Me.tableTagLibrary.Parent_TagIDColumn}, false)
        Me.relationFK_TAGLIBRA_PARENTTAG_TAGLIBRA.Nested = true
        Me.Relations.Add(Me.relationFK_TAGLIBRA_PARENTTAG_TAGLIBRA)
        Me.relationFK_DataType_TagLibrary = New Global.System.Data.DataRelation("FK_DataType_TagLibrary", New Global.System.Data.DataColumn() {Me.tableDataType.DataTypeIDColumn}, New Global.System.Data.DataColumn() {Me.tableTagLibrary.DataTypeID_FKColumn}, false)
        Me.Relations.Add(Me.relationFK_DataType_TagLibrary)
        Me.relationFK_TAGLIBRA_PROJECT_T_PROJECT = New Global.System.Data.DataRelation("FK_TAGLIBRA_PROJECT_T_PROJECT", New Global.System.Data.DataColumn() {Me.tableProject.ProjectIDColumn}, New Global.System.Data.DataColumn() {Me.tableTagLibrary.ProjectIDColumn}, false)
        Me.Relations.Add(Me.relationFK_TAGLIBRA_PROJECT_T_PROJECT)
        Me.relationFK_URL_PROXY_URL_PROXY = New Global.System.Data.DataRelation("FK_URL_PROXY_URL_PROXY", New Global.System.Data.DataColumn() {Me.tableProxy.ProxyIDColumn}, New Global.System.Data.DataColumn() {Me.tableUrl.ProxyIDColumn}, false)
        Me.Relations.Add(Me.relationFK_URL_PROXY_URL_PROXY)
        Me.relationFK_URL_URL_URLST_URLSTATU = New Global.System.Data.DataRelation("FK_URL_URL_URLST_URLSTATU", New Global.System.Data.DataColumn() {Me.tableUrlStatus.UrlStatusIDColumn}, New Global.System.Data.DataColumn() {Me.tableUrl.UrlStatusIDColumn}, false)
        Me.Relations.Add(Me.relationFK_URL_URL_URLST_URLSTATU)
        Me.relationFK_CrawlProject_Url = New Global.System.Data.DataRelation("FK_CrawlProject_Url", New Global.System.Data.DataColumn() {Me.tableCrawlProject.CrawlProjectIDColumn}, New Global.System.Data.DataColumn() {Me.tableUrl.CrawlProjectID_FKColumn}, false)
        Me.Relations.Add(Me.relationFK_CrawlProject_Url)
        Me.relationFK_CrawlClient_Url = New Global.System.Data.DataRelation("FK_CrawlClient_Url", New Global.System.Data.DataColumn() {Me.tableCrawlClient.ClientIDColumn}, New Global.System.Data.DataColumn() {Me.tableUrl.ClientID_FKColumn}, false)
        Me.Relations.Add(Me.relationFK_CrawlClient_Url)
        Me.relationFK_LINKMAPP_LINKMAPPI_PROJECT = New Global.System.Data.DataRelation("FK_LINKMAPP_LINKMAPPI_PROJECT", New Global.System.Data.DataColumn() {Me.tableProject.ProjectIDColumn}, New Global.System.Data.DataColumn() {Me.tableLinkMapping.ProjectIDColumn}, false)
        Me.Relations.Add(Me.relationFK_LINKMAPP_LINKMAPPI_PROJECT)
        Me.relationFK_LINKMAPP_TAGLIBRAR_TAGLIBRA = New Global.System.Data.DataRelation("FK_LINKMAPP_TAGLIBRAR_TAGLIBRA", New Global.System.Data.DataColumn() {Me.tableTagLibrary.TagIDColumn}, New Global.System.Data.DataColumn() {Me.tableLinkMapping.TagIDColumn}, false)
        Me.Relations.Add(Me.relationFK_LINKMAPP_TAGLIBRAR_TAGLIBRA)
        Me.relationFK_PROJECT_PROJECT_C_CRAWLPRO = New Global.System.Data.DataRelation("FK_PROJECT_PROJECT_C_CRAWLPRO", New Global.System.Data.DataColumn() {Me.tableCrawlProject.CrawlProjectIDColumn}, New Global.System.Data.DataColumn() {Me.tableProject.CrawlProjectIDColumn}, false)
        Me.Relations.Add(Me.relationFK_PROJECT_PROJECT_C_CRAWLPRO)
        Me.relationFK_PROJECT__URL_PROJE_URL = New Global.System.Data.DataRelation("FK_PROJECT__URL_PROJE_URL", New Global.System.Data.DataColumn() {Me.tableUrl.UrlIDColumn}, New Global.System.Data.DataColumn() {Me.tableProject_Url.UrlIDColumn}, false)
        Me.Relations.Add(Me.relationFK_PROJECT__URL_PROJE_URL)
        Me.relationFK_Project_Project_Url = New Global.System.Data.DataRelation("FK_Project_Project_Url", New Global.System.Data.DataColumn() {Me.tableProject.ProjectIDColumn}, New Global.System.Data.DataColumn() {Me.tableProject_Url.ProjectIDColumn}, false)
        Me.Relations.Add(Me.relationFK_Project_Project_Url)
        Me.relationFK_LinkMapping_Project_Url = New Global.System.Data.DataRelation("FK_LinkMapping_Project_Url", New Global.System.Data.DataColumn() {Me.tableLinkMapping.LinkMappingIDColumn}, New Global.System.Data.DataColumn() {Me.tableProject_Url.LinkMappingID_FKColumn}, false)
        Me.Relations.Add(Me.relationFK_LinkMapping_Project_Url)
        Me.relationFK_PROXY_PROXYSTAT_PROXYSTA = New Global.System.Data.DataRelation("FK_PROXY_PROXYSTAT_PROXYSTA", New Global.System.Data.DataColumn() {Me.tableProxyStatus.ProxyStatusIDColumn}, New Global.System.Data.DataColumn() {Me.tableProxy.ProxyStatusIDColumn}, false)
        Me.Relations.Add(Me.relationFK_PROXY_PROXYSTAT_PROXYSTA)
        Me.relationFK_Project_Project_Sample = New Global.System.Data.DataRelation("FK_Project_Project_Sample", New Global.System.Data.DataColumn() {Me.tableProject.ProjectIDColumn}, New Global.System.Data.DataColumn() {Me.tableProject_Sample.ProjectID_FKColumn}, false)
        Me.Relations.Add(Me.relationFK_Project_Project_Sample)
        Me.relationUrl_Main = New Global.System.Data.DataRelation("Url_Main", New Global.System.Data.DataColumn() {Me.tableUrl.UrlIDColumn}, New Global.System.Data.DataColumn() {Me.tableUrlReferences.UrlID_FKColumn}, false)
        Me.Relations.Add(Me.relationUrl_Main)
        Me.relationUrl_Referer = New Global.System.Data.DataRelation("Url_Referer", New Global.System.Data.DataColumn() {Me.tableUrl.UrlIDColumn}, New Global.System.Data.DataColumn() {Me.tableUrlReferences.ReferingUrlID_FKColumn}, false)
        Me.Relations.Add(Me.relationUrl_Referer)
        Me.relationFK_CrawlProject_Cron = New Global.System.Data.DataRelation("FK_CrawlProject_Cron", New Global.System.Data.DataColumn() {Me.tableCrawlProject.CrawlProjectIDColumn}, New Global.System.Data.DataColumn() {Me.tableCron.CrawlProjectID_FKColumn}, false)
        Me.Relations.Add(Me.relationFK_CrawlProject_Cron)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeTagLibrary() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeUrl() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeCrawlProject() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeUrlStatus() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeLinkMapping() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeProject() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeProject_Url() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeProxy() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeProxyStatus() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeProject_Sample() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeUrlReferences() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeDataType() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeCrawlClient() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeCron() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As ScraperDB = New ScraperDB
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        xs.Add(ds.GetSchemaSerializable)
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Return type
    End Function
    
    Public Delegate Sub TagLibraryRowChangeEventHandler(ByVal sender As Object, ByVal e As TagLibraryRowChangeEvent)
    
    Public Delegate Sub UrlRowChangeEventHandler(ByVal sender As Object, ByVal e As UrlRowChangeEvent)
    
    Public Delegate Sub CrawlProjectRowChangeEventHandler(ByVal sender As Object, ByVal e As CrawlProjectRowChangeEvent)
    
    Public Delegate Sub UrlStatusRowChangeEventHandler(ByVal sender As Object, ByVal e As UrlStatusRowChangeEvent)
    
    Public Delegate Sub LinkMappingRowChangeEventHandler(ByVal sender As Object, ByVal e As LinkMappingRowChangeEvent)
    
    Public Delegate Sub ProjectRowChangeEventHandler(ByVal sender As Object, ByVal e As ProjectRowChangeEvent)
    
    Public Delegate Sub Project_UrlRowChangeEventHandler(ByVal sender As Object, ByVal e As Project_UrlRowChangeEvent)
    
    Public Delegate Sub ProxyRowChangeEventHandler(ByVal sender As Object, ByVal e As ProxyRowChangeEvent)
    
    Public Delegate Sub ProxyStatusRowChangeEventHandler(ByVal sender As Object, ByVal e As ProxyStatusRowChangeEvent)
    
    Public Delegate Sub Project_SampleRowChangeEventHandler(ByVal sender As Object, ByVal e As Project_SampleRowChangeEvent)
    
    Public Delegate Sub UrlReferencesRowChangeEventHandler(ByVal sender As Object, ByVal e As UrlReferencesRowChangeEvent)
    
    Public Delegate Sub DataTypeRowChangeEventHandler(ByVal sender As Object, ByVal e As DataTypeRowChangeEvent)
    
    Public Delegate Sub CrawlClientRowChangeEventHandler(ByVal sender As Object, ByVal e As CrawlClientRowChangeEvent)
    
    Public Delegate Sub CronRowChangeEventHandler(ByVal sender As Object, ByVal e As CronRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class TagLibraryDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnTagID As Global.System.Data.DataColumn
        
        Private columnParent_TagID As Global.System.Data.DataColumn
        
        Private columnProjectID As Global.System.Data.DataColumn
        
        Private columnTagName As Global.System.Data.DataColumn
        
        Private columnStartTag As Global.System.Data.DataColumn
        
        Private columnEndTag As Global.System.Data.DataColumn
        
        Private columnOrderNumber As Global.System.Data.DataColumn
        
        Private columnMaxChars As Global.System.Data.DataColumn
        
        Private columnIsAppendStartTag As Global.System.Data.DataColumn
        
        Private columnIsAppendEndTag As Global.System.Data.DataColumn
        
        Private columnIsStartTagRegex As Global.System.Data.DataColumn
        
        Private columnIsEndTagRegex As Global.System.Data.DataColumn
        
        Private columnIsOptional As Global.System.Data.DataColumn
        
        Private columnIsSingleRegex As Global.System.Data.DataColumn
        
        Private columnisReverseSearch As Global.System.Data.DataColumn
        
        Private columnIsURL As Global.System.Data.DataColumn
        
        Private columnIsDisabled As Global.System.Data.DataColumn
        
        Private columnisSaveData As Global.System.Data.DataColumn
        
        Private columnIsDataTable As Global.System.Data.DataColumn
        
        Private columnIsIdentfier As Global.System.Data.DataColumn
        
        Private columnTableName As Global.System.Data.DataColumn
        
        Private columnFieldName As Global.System.Data.DataColumn
        
        Private columnDataTypeID_FK As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "TagLibrary"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TagIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTagID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Parent_TagIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnParent_TagID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ProjectIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProjectID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TagNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTagName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StartTagColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStartTag
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EndTagColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEndTag
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OrderNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOrderNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MaxCharsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMaxChars
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IsAppendStartTagColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIsAppendStartTag
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IsAppendEndTagColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIsAppendEndTag
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IsStartTagRegexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIsStartTagRegex
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IsEndTagRegexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIsEndTagRegex
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IsOptionalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIsOptional
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IsSingleRegexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIsSingleRegex
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property isReverseSearchColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnisReverseSearch
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IsURLColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIsURL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IsDisabledColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIsDisabled
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property isSaveDataColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnisSaveData
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IsDataTableColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIsDataTable
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IsIdentfierColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIsIdentfier
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TableNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTableName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FieldNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFieldName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DataTypeID_FKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDataTypeID_FK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As TagLibraryRow
            Get
                Return CType(Me.Rows(index),TagLibraryRow)
            End Get
        End Property
        
        Public Event TagLibraryRowChanging As TagLibraryRowChangeEventHandler
        
        Public Event TagLibraryRowChanged As TagLibraryRowChangeEventHandler
        
        Public Event TagLibraryRowDeleting As TagLibraryRowChangeEventHandler
        
        Public Event TagLibraryRowDeleted As TagLibraryRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddTagLibraryRow(ByVal row As TagLibraryRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddTagLibraryRow( _
                    ByVal parentTagLibraryRowByFK_TAGLIBRA_PARENTTAG_TAGLIBRA As TagLibraryRow,  _
                    ByVal parentProjectRowByFK_TAGLIBRA_PROJECT_T_PROJECT As ProjectRow,  _
                    ByVal TagName As String,  _
                    ByVal StartTag As String,  _
                    ByVal EndTag As String,  _
                    ByVal OrderNumber As Integer,  _
                    ByVal MaxChars As Integer,  _
                    ByVal IsAppendStartTag As Boolean,  _
                    ByVal IsAppendEndTag As Boolean,  _
                    ByVal IsStartTagRegex As Boolean,  _
                    ByVal IsEndTagRegex As Boolean,  _
                    ByVal IsOptional As Boolean,  _
                    ByVal IsSingleRegex As Boolean,  _
                    ByVal isReverseSearch As Boolean,  _
                    ByVal IsURL As Boolean,  _
                    ByVal IsDisabled As Boolean,  _
                    ByVal isSaveData As Boolean,  _
                    ByVal IsDataTable As Boolean,  _
                    ByVal IsIdentfier As String,  _
                    ByVal TableName As String,  _
                    ByVal FieldName As String,  _
                    ByVal parentDataTypeRowByFK_DataType_TagLibrary As DataTypeRow) As TagLibraryRow
            Dim rowTagLibraryRow As TagLibraryRow = CType(Me.NewRow,TagLibraryRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Nothing, Nothing, TagName, StartTag, EndTag, OrderNumber, MaxChars, IsAppendStartTag, IsAppendEndTag, IsStartTagRegex, IsEndTagRegex, IsOptional, IsSingleRegex, isReverseSearch, IsURL, IsDisabled, isSaveData, IsDataTable, IsIdentfier, TableName, FieldName, Nothing}
            If (Not (parentTagLibraryRowByFK_TAGLIBRA_PARENTTAG_TAGLIBRA) Is Nothing) Then
                columnValuesArray(1) = parentTagLibraryRowByFK_TAGLIBRA_PARENTTAG_TAGLIBRA(0)
            End If
            If (Not (parentProjectRowByFK_TAGLIBRA_PROJECT_T_PROJECT) Is Nothing) Then
                columnValuesArray(2) = parentProjectRowByFK_TAGLIBRA_PROJECT_T_PROJECT(0)
            End If
            If (Not (parentDataTypeRowByFK_DataType_TagLibrary) Is Nothing) Then
                columnValuesArray(22) = parentDataTypeRowByFK_DataType_TagLibrary(0)
            End If
            rowTagLibraryRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTagLibraryRow)
            Return rowTagLibraryRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByTagID(ByVal TagID As Integer) As TagLibraryRow
            Return CType(Me.Rows.Find(New Object() {TagID}),TagLibraryRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As TagLibraryDataTable = CType(MyBase.Clone,TagLibraryDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New TagLibraryDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnTagID = MyBase.Columns("TagID")
            Me.columnParent_TagID = MyBase.Columns("Parent_TagID")
            Me.columnProjectID = MyBase.Columns("ProjectID")
            Me.columnTagName = MyBase.Columns("TagName")
            Me.columnStartTag = MyBase.Columns("StartTag")
            Me.columnEndTag = MyBase.Columns("EndTag")
            Me.columnOrderNumber = MyBase.Columns("OrderNumber")
            Me.columnMaxChars = MyBase.Columns("MaxChars")
            Me.columnIsAppendStartTag = MyBase.Columns("IsAppendStartTag")
            Me.columnIsAppendEndTag = MyBase.Columns("IsAppendEndTag")
            Me.columnIsStartTagRegex = MyBase.Columns("IsStartTagRegex")
            Me.columnIsEndTagRegex = MyBase.Columns("IsEndTagRegex")
            Me.columnIsOptional = MyBase.Columns("IsOptional")
            Me.columnIsSingleRegex = MyBase.Columns("IsSingleRegex")
            Me.columnisReverseSearch = MyBase.Columns("isReverseSearch")
            Me.columnIsURL = MyBase.Columns("IsURL")
            Me.columnIsDisabled = MyBase.Columns("IsDisabled")
            Me.columnisSaveData = MyBase.Columns("isSaveData")
            Me.columnIsDataTable = MyBase.Columns("IsDataTable")
            Me.columnIsIdentfier = MyBase.Columns("IsIdentfier")
            Me.columnTableName = MyBase.Columns("TableName")
            Me.columnFieldName = MyBase.Columns("FieldName")
            Me.columnDataTypeID_FK = MyBase.Columns("DataTypeID_FK")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnTagID = New Global.System.Data.DataColumn("TagID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTagID)
            Me.columnParent_TagID = New Global.System.Data.DataColumn("Parent_TagID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnParent_TagID)
            Me.columnProjectID = New Global.System.Data.DataColumn("ProjectID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProjectID)
            Me.columnTagName = New Global.System.Data.DataColumn("TagName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTagName)
            Me.columnStartTag = New Global.System.Data.DataColumn("StartTag", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStartTag)
            Me.columnEndTag = New Global.System.Data.DataColumn("EndTag", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEndTag)
            Me.columnOrderNumber = New Global.System.Data.DataColumn("OrderNumber", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOrderNumber)
            Me.columnMaxChars = New Global.System.Data.DataColumn("MaxChars", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMaxChars)
            Me.columnIsAppendStartTag = New Global.System.Data.DataColumn("IsAppendStartTag", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIsAppendStartTag)
            Me.columnIsAppendEndTag = New Global.System.Data.DataColumn("IsAppendEndTag", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIsAppendEndTag)
            Me.columnIsStartTagRegex = New Global.System.Data.DataColumn("IsStartTagRegex", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIsStartTagRegex)
            Me.columnIsEndTagRegex = New Global.System.Data.DataColumn("IsEndTagRegex", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIsEndTagRegex)
            Me.columnIsOptional = New Global.System.Data.DataColumn("IsOptional", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIsOptional)
            Me.columnIsSingleRegex = New Global.System.Data.DataColumn("IsSingleRegex", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIsSingleRegex)
            Me.columnisReverseSearch = New Global.System.Data.DataColumn("isReverseSearch", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnisReverseSearch)
            Me.columnIsURL = New Global.System.Data.DataColumn("IsURL", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIsURL)
            Me.columnIsDisabled = New Global.System.Data.DataColumn("IsDisabled", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIsDisabled)
            Me.columnisSaveData = New Global.System.Data.DataColumn("isSaveData", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnisSaveData)
            Me.columnIsDataTable = New Global.System.Data.DataColumn("IsDataTable", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIsDataTable)
            Me.columnIsIdentfier = New Global.System.Data.DataColumn("IsIdentfier", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIsIdentfier)
            Me.columnTableName = New Global.System.Data.DataColumn("TableName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTableName)
            Me.columnFieldName = New Global.System.Data.DataColumn("FieldName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFieldName)
            Me.columnDataTypeID_FK = New Global.System.Data.DataColumn("DataTypeID_FK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDataTypeID_FK)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnTagID}, true))
            Me.columnTagID.AutoIncrement = true
            Me.columnTagID.AutoIncrementSeed = -1
            Me.columnTagID.AutoIncrementStep = -1
            Me.columnTagID.AllowDBNull = false
            Me.columnTagID.Unique = true
            Me.columnProjectID.AllowDBNull = false
            Me.columnTagName.AllowDBNull = false
            Me.columnTagName.DefaultValue = CType("",String)
            Me.columnTagName.MaxLength = 50
            Me.columnStartTag.AllowDBNull = false
            Me.columnStartTag.DefaultValue = CType("",String)
            Me.columnStartTag.MaxLength = 255
            Me.columnEndTag.AllowDBNull = false
            Me.columnEndTag.DefaultValue = CType("",String)
            Me.columnEndTag.MaxLength = 255
            Me.columnOrderNumber.AllowDBNull = false
            Me.columnOrderNumber.DefaultValue = CType(0,Integer)
            Me.columnMaxChars.AllowDBNull = false
            Me.columnMaxChars.DefaultValue = CType(0,Integer)
            Me.columnIsAppendStartTag.AllowDBNull = false
            Me.columnIsAppendStartTag.DefaultValue = CType(false,Boolean)
            Me.columnIsAppendEndTag.AllowDBNull = false
            Me.columnIsAppendEndTag.DefaultValue = CType(false,Boolean)
            Me.columnIsStartTagRegex.AllowDBNull = false
            Me.columnIsStartTagRegex.DefaultValue = CType(false,Boolean)
            Me.columnIsEndTagRegex.AllowDBNull = false
            Me.columnIsEndTagRegex.DefaultValue = CType(false,Boolean)
            Me.columnIsOptional.AllowDBNull = false
            Me.columnIsOptional.DefaultValue = CType(false,Boolean)
            Me.columnIsSingleRegex.AllowDBNull = false
            Me.columnIsSingleRegex.DefaultValue = CType(false,Boolean)
            Me.columnisReverseSearch.AllowDBNull = false
            Me.columnisReverseSearch.DefaultValue = CType(false,Boolean)
            Me.columnIsURL.AllowDBNull = false
            Me.columnIsURL.DefaultValue = CType(false,Boolean)
            Me.columnIsDisabled.AllowDBNull = false
            Me.columnIsDisabled.DefaultValue = CType(false,Boolean)
            Me.columnisSaveData.AllowDBNull = false
            Me.columnisSaveData.DefaultValue = CType(false,Boolean)
            Me.columnIsDataTable.AllowDBNull = false
            Me.columnIsDataTable.DefaultValue = CType(false,Boolean)
            Me.columnIsIdentfier.AllowDBNull = false
            Me.columnIsIdentfier.DefaultValue = CType("False",String)
            Me.Namespace = "http://tempuri.org/ScraperDB.xsd"
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewTagLibraryRow() As TagLibraryRow
            Return CType(Me.NewRow,TagLibraryRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New TagLibraryRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(TagLibraryRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TagLibraryRowChangedEvent) Is Nothing) Then
                RaiseEvent TagLibraryRowChanged(Me, New TagLibraryRowChangeEvent(CType(e.Row,TagLibraryRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TagLibraryRowChangingEvent) Is Nothing) Then
                RaiseEvent TagLibraryRowChanging(Me, New TagLibraryRowChangeEvent(CType(e.Row,TagLibraryRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TagLibraryRowDeletedEvent) Is Nothing) Then
                RaiseEvent TagLibraryRowDeleted(Me, New TagLibraryRowChangeEvent(CType(e.Row,TagLibraryRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TagLibraryRowDeletingEvent) Is Nothing) Then
                RaiseEvent TagLibraryRowDeleting(Me, New TagLibraryRowChangeEvent(CType(e.Row,TagLibraryRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveTagLibraryRow(ByVal row As TagLibraryRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ScraperDB = New ScraperDB
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "TagLibraryDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class UrlDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnUrlID As Global.System.Data.DataColumn
        
        Private columnUrlStatusID As Global.System.Data.DataColumn
        
        Private columnProxyID As Global.System.Data.DataColumn
        
        Private columnUrlLink As Global.System.Data.DataColumn
        
        Private columnUrlReferer As Global.System.Data.DataColumn
        
        Private columnPostData As Global.System.Data.DataColumn
        
        Private columnContent As Global.System.Data.DataColumn
        
        Private columnLastScraped As Global.System.Data.DataColumn
        
        Private columnLastModified As Global.System.Data.DataColumn
        
        Private columnLastAssigned As Global.System.Data.DataColumn
        
        Private columnDateAdded As Global.System.Data.DataColumn
        
        Private columnErrorMessage As Global.System.Data.DataColumn
        
        Private columnCrawlProjectID_FK As Global.System.Data.DataColumn
        
        Private columnClientID_FK As Global.System.Data.DataColumn
        
        Private columnIsPartialData As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Url"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UrlIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUrlID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UrlStatusIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUrlStatusID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ProxyIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProxyID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UrlLinkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUrlLink
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UrlRefererColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUrlReferer
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PostDataColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPostData
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ContentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnContent
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LastScrapedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLastScraped
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LastModifiedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLastModified
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LastAssignedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLastAssigned
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateAddedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateAdded
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ErrorMessageColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnErrorMessage
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CrawlProjectID_FKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCrawlProjectID_FK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ClientID_FKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnClientID_FK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IsPartialDataColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIsPartialData
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As UrlRow
            Get
                Return CType(Me.Rows(index),UrlRow)
            End Get
        End Property
        
        Public Event UrlRowChanging As UrlRowChangeEventHandler
        
        Public Event UrlRowChanged As UrlRowChangeEventHandler
        
        Public Event UrlRowDeleting As UrlRowChangeEventHandler
        
        Public Event UrlRowDeleted As UrlRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddUrlRow(ByVal row As UrlRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddUrlRow(ByVal parentUrlStatusRowByFK_URL_URL_URLST_URLSTATU As UrlStatusRow, ByVal parentProxyRowByFK_URL_PROXY_URL_PROXY As ProxyRow, ByVal UrlLink As String, ByVal UrlReferer As String, ByVal PostData As String, ByVal Content As String, ByVal LastScraped As Date, ByVal LastModified As Date, ByVal LastAssigned As Date, ByVal DateAdded As Date, ByVal ErrorMessage As String, ByVal parentCrawlProjectRowByFK_CrawlProject_Url As CrawlProjectRow, ByVal parentCrawlClientRowByFK_CrawlClient_Url As CrawlClientRow, ByVal IsPartialData As Boolean) As UrlRow
            Dim rowUrlRow As UrlRow = CType(Me.NewRow,UrlRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Nothing, Nothing, UrlLink, UrlReferer, PostData, Content, LastScraped, LastModified, LastAssigned, DateAdded, ErrorMessage, Nothing, Nothing, IsPartialData}
            If (Not (parentUrlStatusRowByFK_URL_URL_URLST_URLSTATU) Is Nothing) Then
                columnValuesArray(1) = parentUrlStatusRowByFK_URL_URL_URLST_URLSTATU(0)
            End If
            If (Not (parentProxyRowByFK_URL_PROXY_URL_PROXY) Is Nothing) Then
                columnValuesArray(2) = parentProxyRowByFK_URL_PROXY_URL_PROXY(0)
            End If
            If (Not (parentCrawlProjectRowByFK_CrawlProject_Url) Is Nothing) Then
                columnValuesArray(12) = parentCrawlProjectRowByFK_CrawlProject_Url(0)
            End If
            If (Not (parentCrawlClientRowByFK_CrawlClient_Url) Is Nothing) Then
                columnValuesArray(13) = parentCrawlClientRowByFK_CrawlClient_Url(0)
            End If
            rowUrlRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowUrlRow)
            Return rowUrlRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByUrlID(ByVal UrlID As Integer) As UrlRow
            Return CType(Me.Rows.Find(New Object() {UrlID}),UrlRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As UrlDataTable = CType(MyBase.Clone,UrlDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New UrlDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnUrlID = MyBase.Columns("UrlID")
            Me.columnUrlStatusID = MyBase.Columns("UrlStatusID")
            Me.columnProxyID = MyBase.Columns("ProxyID")
            Me.columnUrlLink = MyBase.Columns("UrlLink")
            Me.columnUrlReferer = MyBase.Columns("UrlReferer")
            Me.columnPostData = MyBase.Columns("PostData")
            Me.columnContent = MyBase.Columns("Content")
            Me.columnLastScraped = MyBase.Columns("LastScraped")
            Me.columnLastModified = MyBase.Columns("LastModified")
            Me.columnLastAssigned = MyBase.Columns("LastAssigned")
            Me.columnDateAdded = MyBase.Columns("DateAdded")
            Me.columnErrorMessage = MyBase.Columns("ErrorMessage")
            Me.columnCrawlProjectID_FK = MyBase.Columns("CrawlProjectID_FK")
            Me.columnClientID_FK = MyBase.Columns("ClientID_FK")
            Me.columnIsPartialData = MyBase.Columns("IsPartialData")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnUrlID = New Global.System.Data.DataColumn("UrlID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUrlID)
            Me.columnUrlStatusID = New Global.System.Data.DataColumn("UrlStatusID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUrlStatusID)
            Me.columnProxyID = New Global.System.Data.DataColumn("ProxyID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProxyID)
            Me.columnUrlLink = New Global.System.Data.DataColumn("UrlLink", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUrlLink)
            Me.columnUrlReferer = New Global.System.Data.DataColumn("UrlReferer", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUrlReferer)
            Me.columnPostData = New Global.System.Data.DataColumn("PostData", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPostData)
            Me.columnContent = New Global.System.Data.DataColumn("Content", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnContent)
            Me.columnLastScraped = New Global.System.Data.DataColumn("LastScraped", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLastScraped)
            Me.columnLastModified = New Global.System.Data.DataColumn("LastModified", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLastModified)
            Me.columnLastAssigned = New Global.System.Data.DataColumn("LastAssigned", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLastAssigned)
            Me.columnDateAdded = New Global.System.Data.DataColumn("DateAdded", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateAdded)
            Me.columnErrorMessage = New Global.System.Data.DataColumn("ErrorMessage", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnErrorMessage)
            Me.columnCrawlProjectID_FK = New Global.System.Data.DataColumn("CrawlProjectID_FK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCrawlProjectID_FK)
            Me.columnClientID_FK = New Global.System.Data.DataColumn("ClientID_FK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnClientID_FK)
            Me.columnIsPartialData = New Global.System.Data.DataColumn("IsPartialData", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIsPartialData)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnUrlID}, true))
            Me.columnUrlID.AutoIncrement = true
            Me.columnUrlID.AutoIncrementSeed = -1
            Me.columnUrlID.AutoIncrementStep = -1
            Me.columnUrlID.AllowDBNull = false
            Me.columnUrlID.Unique = true
            Me.columnUrlStatusID.AllowDBNull = false
            Me.columnUrlLink.AllowDBNull = false
            Me.columnUrlLink.MaxLength = 255
            Me.columnUrlReferer.MaxLength = 255
            Me.columnPostData.MaxLength = 255
            Me.columnDateAdded.AllowDBNull = false
            Me.columnErrorMessage.MaxLength = 255
            Me.columnCrawlProjectID_FK.AllowDBNull = false
            Me.columnCrawlProjectID_FK.DefaultValue = CType(-1,Integer)
            Me.columnIsPartialData.AllowDBNull = false
            Me.columnIsPartialData.DefaultValue = CType(false,Boolean)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewUrlRow() As UrlRow
            Return CType(Me.NewRow,UrlRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New UrlRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(UrlRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.UrlRowChangedEvent) Is Nothing) Then
                RaiseEvent UrlRowChanged(Me, New UrlRowChangeEvent(CType(e.Row,UrlRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.UrlRowChangingEvent) Is Nothing) Then
                RaiseEvent UrlRowChanging(Me, New UrlRowChangeEvent(CType(e.Row,UrlRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.UrlRowDeletedEvent) Is Nothing) Then
                RaiseEvent UrlRowDeleted(Me, New UrlRowChangeEvent(CType(e.Row,UrlRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.UrlRowDeletingEvent) Is Nothing) Then
                RaiseEvent UrlRowDeleting(Me, New UrlRowChangeEvent(CType(e.Row,UrlRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveUrlRow(ByVal row As UrlRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ScraperDB = New ScraperDB
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "UrlDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class CrawlProjectDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCrawlProjectID As Global.System.Data.DataColumn
        
        Private columnName As Global.System.Data.DataColumn
        
        Private columnProxyCheckUrl As Global.System.Data.DataColumn
        
        Private columnProxyCheckContent As Global.System.Data.DataColumn
        
        Private columnIsSaveContent As Global.System.Data.DataColumn
        
        Private columnThreads As Global.System.Data.DataColumn
        
        Private columnDownloadDelay As Global.System.Data.DataColumn
        
        Private columnTotalUrl As Global.System.Data.DataColumn
        
        Private columnTotalUrlLeft As Global.System.Data.DataColumn
        
        Private columnConnectionPerIP As Global.System.Data.DataColumn
        
        Private columnDateRun As Global.System.Data.DataColumn
        
        Private columnMaxUrl As Global.System.Data.DataColumn
        
        Private columnTotalProjects As Global.System.Data.DataColumn
        
        Private columnAssignTimeOutMinute As Global.System.Data.DataColumn
        
        Private columnWebAgentName As Global.System.Data.DataColumn
        
        Private columnWebTimeout As Global.System.Data.DataColumn
        
        Private columnCreatedDate As Global.System.Data.DataColumn
        
        Private columnCreatedByUserID As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "CrawlProject"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CrawlProjectIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCrawlProjectID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ProxyCheckUrlColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProxyCheckUrl
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ProxyCheckContentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProxyCheckContent
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IsSaveContentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIsSaveContent
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ThreadsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnThreads
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DownloadDelayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDownloadDelay
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TotalUrlColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotalUrl
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TotalUrlLeftColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotalUrlLeft
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ConnectionPerIPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnConnectionPerIP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateRunColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateRun
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MaxUrlColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMaxUrl
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TotalProjectsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotalProjects
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AssignTimeOutMinuteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAssignTimeOutMinute
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WebAgentNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWebAgentName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WebTimeoutColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWebTimeout
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CreatedDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCreatedDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CreatedByUserIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCreatedByUserID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As CrawlProjectRow
            Get
                Return CType(Me.Rows(index),CrawlProjectRow)
            End Get
        End Property
        
        Public Event CrawlProjectRowChanging As CrawlProjectRowChangeEventHandler
        
        Public Event CrawlProjectRowChanged As CrawlProjectRowChangeEventHandler
        
        Public Event CrawlProjectRowDeleting As CrawlProjectRowChangeEventHandler
        
        Public Event CrawlProjectRowDeleted As CrawlProjectRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddCrawlProjectRow(ByVal row As CrawlProjectRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddCrawlProjectRow( _
                    ByVal Name As String,  _
                    ByVal ProxyCheckUrl As String,  _
                    ByVal ProxyCheckContent As String,  _
                    ByVal IsSaveContent As Boolean,  _
                    ByVal Threads As Integer,  _
                    ByVal DownloadDelay As Integer,  _
                    ByVal TotalUrl As Integer,  _
                    ByVal TotalUrlLeft As Integer,  _
                    ByVal ConnectionPerIP As Integer,  _
                    ByVal DateRun As Date,  _
                    ByVal MaxUrl As Integer,  _
                    ByVal TotalProjects As Integer,  _
                    ByVal AssignTimeOutMinute As Integer,  _
                    ByVal WebAgentName As String,  _
                    ByVal WebTimeout As Integer,  _
                    ByVal CreatedDate As Date,  _
                    ByVal CreatedByUserID As Integer) As CrawlProjectRow
            Dim rowCrawlProjectRow As CrawlProjectRow = CType(Me.NewRow,CrawlProjectRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Name, ProxyCheckUrl, ProxyCheckContent, IsSaveContent, Threads, DownloadDelay, TotalUrl, TotalUrlLeft, ConnectionPerIP, DateRun, MaxUrl, TotalProjects, AssignTimeOutMinute, WebAgentName, WebTimeout, CreatedDate, CreatedByUserID}
            rowCrawlProjectRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowCrawlProjectRow)
            Return rowCrawlProjectRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCrawlProjectID(ByVal CrawlProjectID As Integer) As CrawlProjectRow
            Return CType(Me.Rows.Find(New Object() {CrawlProjectID}),CrawlProjectRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As CrawlProjectDataTable = CType(MyBase.Clone,CrawlProjectDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New CrawlProjectDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCrawlProjectID = MyBase.Columns("CrawlProjectID")
            Me.columnName = MyBase.Columns("Name")
            Me.columnProxyCheckUrl = MyBase.Columns("ProxyCheckUrl")
            Me.columnProxyCheckContent = MyBase.Columns("ProxyCheckContent")
            Me.columnIsSaveContent = MyBase.Columns("IsSaveContent")
            Me.columnThreads = MyBase.Columns("Threads")
            Me.columnDownloadDelay = MyBase.Columns("DownloadDelay")
            Me.columnTotalUrl = MyBase.Columns("TotalUrl")
            Me.columnTotalUrlLeft = MyBase.Columns("TotalUrlLeft")
            Me.columnConnectionPerIP = MyBase.Columns("ConnectionPerIP")
            Me.columnDateRun = MyBase.Columns("DateRun")
            Me.columnMaxUrl = MyBase.Columns("MaxUrl")
            Me.columnTotalProjects = MyBase.Columns("TotalProjects")
            Me.columnAssignTimeOutMinute = MyBase.Columns("AssignTimeOutMinute")
            Me.columnWebAgentName = MyBase.Columns("WebAgentName")
            Me.columnWebTimeout = MyBase.Columns("WebTimeout")
            Me.columnCreatedDate = MyBase.Columns("CreatedDate")
            Me.columnCreatedByUserID = MyBase.Columns("CreatedByUserID")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCrawlProjectID = New Global.System.Data.DataColumn("CrawlProjectID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCrawlProjectID)
            Me.columnName = New Global.System.Data.DataColumn("Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnName)
            Me.columnProxyCheckUrl = New Global.System.Data.DataColumn("ProxyCheckUrl", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProxyCheckUrl)
            Me.columnProxyCheckContent = New Global.System.Data.DataColumn("ProxyCheckContent", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProxyCheckContent)
            Me.columnIsSaveContent = New Global.System.Data.DataColumn("IsSaveContent", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIsSaveContent)
            Me.columnThreads = New Global.System.Data.DataColumn("Threads", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnThreads)
            Me.columnDownloadDelay = New Global.System.Data.DataColumn("DownloadDelay", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDownloadDelay)
            Me.columnTotalUrl = New Global.System.Data.DataColumn("TotalUrl", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotalUrl)
            Me.columnTotalUrlLeft = New Global.System.Data.DataColumn("TotalUrlLeft", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotalUrlLeft)
            Me.columnConnectionPerIP = New Global.System.Data.DataColumn("ConnectionPerIP", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnConnectionPerIP)
            Me.columnDateRun = New Global.System.Data.DataColumn("DateRun", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateRun)
            Me.columnMaxUrl = New Global.System.Data.DataColumn("MaxUrl", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMaxUrl)
            Me.columnTotalProjects = New Global.System.Data.DataColumn("TotalProjects", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotalProjects)
            Me.columnAssignTimeOutMinute = New Global.System.Data.DataColumn("AssignTimeOutMinute", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAssignTimeOutMinute)
            Me.columnWebAgentName = New Global.System.Data.DataColumn("WebAgentName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWebAgentName)
            Me.columnWebTimeout = New Global.System.Data.DataColumn("WebTimeout", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWebTimeout)
            Me.columnCreatedDate = New Global.System.Data.DataColumn("CreatedDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCreatedDate)
            Me.columnCreatedByUserID = New Global.System.Data.DataColumn("CreatedByUserID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCreatedByUserID)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCrawlProjectID}, true))
            Me.columnCrawlProjectID.AutoIncrement = true
            Me.columnCrawlProjectID.AutoIncrementSeed = -1
            Me.columnCrawlProjectID.AutoIncrementStep = -1
            Me.columnCrawlProjectID.AllowDBNull = false
            Me.columnCrawlProjectID.Unique = true
            Me.columnName.AllowDBNull = false
            Me.columnName.DefaultValue = CType("Untitled",String)
            Me.columnName.MaxLength = 50
            Me.columnProxyCheckUrl.AllowDBNull = false
            Me.columnProxyCheckUrl.DefaultValue = CType("",String)
            Me.columnProxyCheckUrl.MaxLength = 255
            Me.columnProxyCheckContent.AllowDBNull = false
            Me.columnProxyCheckContent.DefaultValue = CType("",String)
            Me.columnProxyCheckContent.MaxLength = 255
            Me.columnIsSaveContent.AllowDBNull = false
            Me.columnIsSaveContent.DefaultValue = CType(false,Boolean)
            Me.columnThreads.AllowDBNull = false
            Me.columnThreads.DefaultValue = CType(10,Integer)
            Me.columnDownloadDelay.AllowDBNull = false
            Me.columnDownloadDelay.DefaultValue = CType(10,Integer)
            Me.columnTotalUrl.AllowDBNull = false
            Me.columnTotalUrl.DefaultValue = CType(0,Integer)
            Me.columnTotalUrlLeft.AllowDBNull = false
            Me.columnTotalUrlLeft.DefaultValue = CType(0,Integer)
            Me.columnConnectionPerIP.AllowDBNull = false
            Me.columnConnectionPerIP.DefaultValue = CType(5,Integer)
            Me.columnMaxUrl.AllowDBNull = false
            Me.columnMaxUrl.DefaultValue = CType(10,Integer)
            Me.columnTotalProjects.DefaultValue = CType(1,Integer)
            Me.columnAssignTimeOutMinute.AllowDBNull = false
            Me.columnAssignTimeOutMinute.DefaultValue = CType(30,Integer)
            Me.columnWebAgentName.AllowDBNull = false
            Me.columnWebAgentName.DefaultValue = CType("Mozilla/4.0 (compatible; MSIE 5.5; Windows NT 4.0)",String)
            Me.columnWebAgentName.MaxLength = 255
            Me.columnWebTimeout.AllowDBNull = false
            Me.columnWebTimeout.DefaultValue = CType(25,Integer)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewCrawlProjectRow() As CrawlProjectRow
            Return CType(Me.NewRow,CrawlProjectRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New CrawlProjectRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(CrawlProjectRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CrawlProjectRowChangedEvent) Is Nothing) Then
                RaiseEvent CrawlProjectRowChanged(Me, New CrawlProjectRowChangeEvent(CType(e.Row,CrawlProjectRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CrawlProjectRowChangingEvent) Is Nothing) Then
                RaiseEvent CrawlProjectRowChanging(Me, New CrawlProjectRowChangeEvent(CType(e.Row,CrawlProjectRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CrawlProjectRowDeletedEvent) Is Nothing) Then
                RaiseEvent CrawlProjectRowDeleted(Me, New CrawlProjectRowChangeEvent(CType(e.Row,CrawlProjectRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CrawlProjectRowDeletingEvent) Is Nothing) Then
                RaiseEvent CrawlProjectRowDeleting(Me, New CrawlProjectRowChangeEvent(CType(e.Row,CrawlProjectRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveCrawlProjectRow(ByVal row As CrawlProjectRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ScraperDB = New ScraperDB
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "CrawlProjectDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class UrlStatusDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnUrlStatusID As Global.System.Data.DataColumn
        
        Private columnName As Global.System.Data.DataColumn
        
        Private columnDescription As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "UrlStatus"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UrlStatusIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUrlStatusID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescription
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As UrlStatusRow
            Get
                Return CType(Me.Rows(index),UrlStatusRow)
            End Get
        End Property
        
        Public Event UrlStatusRowChanging As UrlStatusRowChangeEventHandler
        
        Public Event UrlStatusRowChanged As UrlStatusRowChangeEventHandler
        
        Public Event UrlStatusRowDeleting As UrlStatusRowChangeEventHandler
        
        Public Event UrlStatusRowDeleted As UrlStatusRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddUrlStatusRow(ByVal row As UrlStatusRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddUrlStatusRow(ByVal UrlStatusID As Integer, ByVal Name As String, ByVal Description As String) As UrlStatusRow
            Dim rowUrlStatusRow As UrlStatusRow = CType(Me.NewRow,UrlStatusRow)
            Dim columnValuesArray() As Object = New Object() {UrlStatusID, Name, Description}
            rowUrlStatusRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowUrlStatusRow)
            Return rowUrlStatusRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByUrlStatusID(ByVal UrlStatusID As Integer) As UrlStatusRow
            Return CType(Me.Rows.Find(New Object() {UrlStatusID}),UrlStatusRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As UrlStatusDataTable = CType(MyBase.Clone,UrlStatusDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New UrlStatusDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnUrlStatusID = MyBase.Columns("UrlStatusID")
            Me.columnName = MyBase.Columns("Name")
            Me.columnDescription = MyBase.Columns("Description")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnUrlStatusID = New Global.System.Data.DataColumn("UrlStatusID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUrlStatusID)
            Me.columnName = New Global.System.Data.DataColumn("Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnName)
            Me.columnDescription = New Global.System.Data.DataColumn("Description", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescription)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnUrlStatusID}, true))
            Me.columnUrlStatusID.AutoIncrementSeed = -1
            Me.columnUrlStatusID.AutoIncrementStep = -1
            Me.columnUrlStatusID.AllowDBNull = false
            Me.columnUrlStatusID.Unique = true
            Me.columnName.MaxLength = 10
            Me.columnDescription.MaxLength = 255
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewUrlStatusRow() As UrlStatusRow
            Return CType(Me.NewRow,UrlStatusRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New UrlStatusRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(UrlStatusRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.UrlStatusRowChangedEvent) Is Nothing) Then
                RaiseEvent UrlStatusRowChanged(Me, New UrlStatusRowChangeEvent(CType(e.Row,UrlStatusRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.UrlStatusRowChangingEvent) Is Nothing) Then
                RaiseEvent UrlStatusRowChanging(Me, New UrlStatusRowChangeEvent(CType(e.Row,UrlStatusRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.UrlStatusRowDeletedEvent) Is Nothing) Then
                RaiseEvent UrlStatusRowDeleted(Me, New UrlStatusRowChangeEvent(CType(e.Row,UrlStatusRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.UrlStatusRowDeletingEvent) Is Nothing) Then
                RaiseEvent UrlStatusRowDeleting(Me, New UrlStatusRowChangeEvent(CType(e.Row,UrlStatusRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveUrlStatusRow(ByVal row As UrlStatusRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ScraperDB = New ScraperDB
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "UrlStatusDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class LinkMappingDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnLinkMappingID As Global.System.Data.DataColumn
        
        Private columnTagID As Global.System.Data.DataColumn
        
        Private columnProjectID As Global.System.Data.DataColumn
        
        Private columnIsPartialData As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "LinkMapping"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LinkMappingIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLinkMappingID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TagIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTagID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ProjectIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProjectID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IsPartialDataColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIsPartialData
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As LinkMappingRow
            Get
                Return CType(Me.Rows(index),LinkMappingRow)
            End Get
        End Property
        
        Public Event LinkMappingRowChanging As LinkMappingRowChangeEventHandler
        
        Public Event LinkMappingRowChanged As LinkMappingRowChangeEventHandler
        
        Public Event LinkMappingRowDeleting As LinkMappingRowChangeEventHandler
        
        Public Event LinkMappingRowDeleted As LinkMappingRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddLinkMappingRow(ByVal row As LinkMappingRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddLinkMappingRow(ByVal parentTagLibraryRowByFK_LINKMAPP_TAGLIBRAR_TAGLIBRA As TagLibraryRow, ByVal parentProjectRowByFK_LINKMAPP_LINKMAPPI_PROJECT As ProjectRow, ByVal IsPartialData As Boolean) As LinkMappingRow
            Dim rowLinkMappingRow As LinkMappingRow = CType(Me.NewRow,LinkMappingRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Nothing, Nothing, IsPartialData}
            If (Not (parentTagLibraryRowByFK_LINKMAPP_TAGLIBRAR_TAGLIBRA) Is Nothing) Then
                columnValuesArray(1) = parentTagLibraryRowByFK_LINKMAPP_TAGLIBRAR_TAGLIBRA(0)
            End If
            If (Not (parentProjectRowByFK_LINKMAPP_LINKMAPPI_PROJECT) Is Nothing) Then
                columnValuesArray(2) = parentProjectRowByFK_LINKMAPP_LINKMAPPI_PROJECT(0)
            End If
            rowLinkMappingRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowLinkMappingRow)
            Return rowLinkMappingRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByLinkMappingID(ByVal LinkMappingID As Integer) As LinkMappingRow
            Return CType(Me.Rows.Find(New Object() {LinkMappingID}),LinkMappingRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As LinkMappingDataTable = CType(MyBase.Clone,LinkMappingDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New LinkMappingDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnLinkMappingID = MyBase.Columns("LinkMappingID")
            Me.columnTagID = MyBase.Columns("TagID")
            Me.columnProjectID = MyBase.Columns("ProjectID")
            Me.columnIsPartialData = MyBase.Columns("IsPartialData")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnLinkMappingID = New Global.System.Data.DataColumn("LinkMappingID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLinkMappingID)
            Me.columnTagID = New Global.System.Data.DataColumn("TagID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTagID)
            Me.columnProjectID = New Global.System.Data.DataColumn("ProjectID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProjectID)
            Me.columnIsPartialData = New Global.System.Data.DataColumn("IsPartialData", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIsPartialData)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnLinkMappingID}, true))
            Me.columnLinkMappingID.AutoIncrement = true
            Me.columnLinkMappingID.AutoIncrementSeed = -1
            Me.columnLinkMappingID.AutoIncrementStep = -1
            Me.columnLinkMappingID.AllowDBNull = false
            Me.columnLinkMappingID.Unique = true
            Me.columnTagID.AllowDBNull = false
            Me.columnProjectID.AllowDBNull = false
            Me.columnIsPartialData.AllowDBNull = false
            Me.columnIsPartialData.DefaultValue = CType(false,Boolean)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewLinkMappingRow() As LinkMappingRow
            Return CType(Me.NewRow,LinkMappingRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New LinkMappingRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(LinkMappingRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.LinkMappingRowChangedEvent) Is Nothing) Then
                RaiseEvent LinkMappingRowChanged(Me, New LinkMappingRowChangeEvent(CType(e.Row,LinkMappingRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.LinkMappingRowChangingEvent) Is Nothing) Then
                RaiseEvent LinkMappingRowChanging(Me, New LinkMappingRowChangeEvent(CType(e.Row,LinkMappingRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.LinkMappingRowDeletedEvent) Is Nothing) Then
                RaiseEvent LinkMappingRowDeleted(Me, New LinkMappingRowChangeEvent(CType(e.Row,LinkMappingRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.LinkMappingRowDeletingEvent) Is Nothing) Then
                RaiseEvent LinkMappingRowDeleting(Me, New LinkMappingRowChangeEvent(CType(e.Row,LinkMappingRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveLinkMappingRow(ByVal row As LinkMappingRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ScraperDB = New ScraperDB
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "LinkMappingDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ProjectDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnProjectID As Global.System.Data.DataColumn
        
        Private columnCrawlProjectID As Global.System.Data.DataColumn
        
        Private columnName As Global.System.Data.DataColumn
        
        Private columnUrlCheckContent As Global.System.Data.DataColumn
        
        Private columnTotalUrl As Global.System.Data.DataColumn
        
        Private columnTotalUrlLeft As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Project"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ProjectIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProjectID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CrawlProjectIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCrawlProjectID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UrlCheckContentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUrlCheckContent
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TotalUrlColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotalUrl
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TotalUrlLeftColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotalUrlLeft
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ProjectRow
            Get
                Return CType(Me.Rows(index),ProjectRow)
            End Get
        End Property
        
        Public Event ProjectRowChanging As ProjectRowChangeEventHandler
        
        Public Event ProjectRowChanged As ProjectRowChangeEventHandler
        
        Public Event ProjectRowDeleting As ProjectRowChangeEventHandler
        
        Public Event ProjectRowDeleted As ProjectRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddProjectRow(ByVal row As ProjectRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddProjectRow(ByVal parentCrawlProjectRowByFK_PROJECT_PROJECT_C_CRAWLPRO As CrawlProjectRow, ByVal Name As String, ByVal UrlCheckContent As String, ByVal TotalUrl As Integer, ByVal TotalUrlLeft As Integer) As ProjectRow
            Dim rowProjectRow As ProjectRow = CType(Me.NewRow,ProjectRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Nothing, Name, UrlCheckContent, TotalUrl, TotalUrlLeft}
            If (Not (parentCrawlProjectRowByFK_PROJECT_PROJECT_C_CRAWLPRO) Is Nothing) Then
                columnValuesArray(1) = parentCrawlProjectRowByFK_PROJECT_PROJECT_C_CRAWLPRO(0)
            End If
            rowProjectRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowProjectRow)
            Return rowProjectRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByProjectID(ByVal ProjectID As Integer) As ProjectRow
            Return CType(Me.Rows.Find(New Object() {ProjectID}),ProjectRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ProjectDataTable = CType(MyBase.Clone,ProjectDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ProjectDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnProjectID = MyBase.Columns("ProjectID")
            Me.columnCrawlProjectID = MyBase.Columns("CrawlProjectID")
            Me.columnName = MyBase.Columns("Name")
            Me.columnUrlCheckContent = MyBase.Columns("UrlCheckContent")
            Me.columnTotalUrl = MyBase.Columns("TotalUrl")
            Me.columnTotalUrlLeft = MyBase.Columns("TotalUrlLeft")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnProjectID = New Global.System.Data.DataColumn("ProjectID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProjectID)
            Me.columnCrawlProjectID = New Global.System.Data.DataColumn("CrawlProjectID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCrawlProjectID)
            Me.columnName = New Global.System.Data.DataColumn("Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnName)
            Me.columnUrlCheckContent = New Global.System.Data.DataColumn("UrlCheckContent", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUrlCheckContent)
            Me.columnTotalUrl = New Global.System.Data.DataColumn("TotalUrl", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotalUrl)
            Me.columnTotalUrlLeft = New Global.System.Data.DataColumn("TotalUrlLeft", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotalUrlLeft)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnProjectID}, true))
            Me.columnProjectID.AutoIncrement = true
            Me.columnProjectID.AutoIncrementSeed = -1
            Me.columnProjectID.AutoIncrementStep = -1
            Me.columnProjectID.AllowDBNull = false
            Me.columnProjectID.Unique = true
            Me.columnCrawlProjectID.AllowDBNull = false
            Me.columnName.AllowDBNull = false
            Me.columnName.DefaultValue = CType("Untitled",String)
            Me.columnName.MaxLength = 50
            Me.columnUrlCheckContent.DefaultValue = CType("",String)
            Me.columnUrlCheckContent.MaxLength = 50
            Me.columnTotalUrl.AllowDBNull = false
            Me.columnTotalUrl.DefaultValue = CType(0,Integer)
            Me.columnTotalUrlLeft.AllowDBNull = false
            Me.columnTotalUrlLeft.DefaultValue = CType(0,Integer)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewProjectRow() As ProjectRow
            Return CType(Me.NewRow,ProjectRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ProjectRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ProjectRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ProjectRowChangedEvent) Is Nothing) Then
                RaiseEvent ProjectRowChanged(Me, New ProjectRowChangeEvent(CType(e.Row,ProjectRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ProjectRowChangingEvent) Is Nothing) Then
                RaiseEvent ProjectRowChanging(Me, New ProjectRowChangeEvent(CType(e.Row,ProjectRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ProjectRowDeletedEvent) Is Nothing) Then
                RaiseEvent ProjectRowDeleted(Me, New ProjectRowChangeEvent(CType(e.Row,ProjectRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ProjectRowDeletingEvent) Is Nothing) Then
                RaiseEvent ProjectRowDeleting(Me, New ProjectRowChangeEvent(CType(e.Row,ProjectRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveProjectRow(ByVal row As ProjectRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ScraperDB = New ScraperDB
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ProjectDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Project_UrlDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnUrlID As Global.System.Data.DataColumn
        
        Private columnProjectID As Global.System.Data.DataColumn
        
        Private columnLastScraped As Global.System.Data.DataColumn
        
        Private columnIsScraped As Global.System.Data.DataColumn
        
        Private columnProjUrlID As Global.System.Data.DataColumn
        
        Private columnLinkMappingID_FK As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Project_Url"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UrlIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUrlID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ProjectIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProjectID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LastScrapedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLastScraped
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IsScrapedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIsScraped
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ProjUrlIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProjUrlID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LinkMappingID_FKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLinkMappingID_FK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ProjectUrlRow
            Get
                Return CType(Me.Rows(index),ProjectUrlRow)
            End Get
        End Property
        
        Public Event Project_UrlRowChanging As Project_UrlRowChangeEventHandler
        
        Public Event Project_UrlRowChanged As Project_UrlRowChangeEventHandler
        
        Public Event Project_UrlRowDeleting As Project_UrlRowChangeEventHandler
        
        Public Event Project_UrlRowDeleted As Project_UrlRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddProjectUrlRow(ByVal row As ProjectUrlRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddProjectUrlRow(ByVal parentUrlRowByFK_PROJECT__URL_PROJE_URL As UrlRow, ByVal parentProjectRowByFK_Project_Project_Url As ProjectRow, ByVal LastScraped As Date, ByVal IsScraped As Boolean, ByVal parentLinkMappingRowByFK_LinkMapping_Project_Url As LinkMappingRow) As ProjectUrlRow
            Dim rowProjectUrlRow As ProjectUrlRow = CType(Me.NewRow,ProjectUrlRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Nothing, LastScraped, IsScraped, Nothing, Nothing}
            If (Not (parentUrlRowByFK_PROJECT__URL_PROJE_URL) Is Nothing) Then
                columnValuesArray(0) = parentUrlRowByFK_PROJECT__URL_PROJE_URL(0)
            End If
            If (Not (parentProjectRowByFK_Project_Project_Url) Is Nothing) Then
                columnValuesArray(1) = parentProjectRowByFK_Project_Project_Url(0)
            End If
            If (Not (parentLinkMappingRowByFK_LinkMapping_Project_Url) Is Nothing) Then
                columnValuesArray(5) = parentLinkMappingRowByFK_LinkMapping_Project_Url(0)
            End If
            rowProjectUrlRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowProjectUrlRow)
            Return rowProjectUrlRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByProjUrlID(ByVal ProjUrlID As Integer) As ProjectUrlRow
            Return CType(Me.Rows.Find(New Object() {ProjUrlID}),ProjectUrlRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Project_UrlDataTable = CType(MyBase.Clone,Project_UrlDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Project_UrlDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnUrlID = MyBase.Columns("UrlID")
            Me.columnProjectID = MyBase.Columns("ProjectID")
            Me.columnLastScraped = MyBase.Columns("LastScraped")
            Me.columnIsScraped = MyBase.Columns("IsScraped")
            Me.columnProjUrlID = MyBase.Columns("ProjUrlID")
            Me.columnLinkMappingID_FK = MyBase.Columns("LinkMappingID_FK")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnUrlID = New Global.System.Data.DataColumn("UrlID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUrlID)
            Me.columnProjectID = New Global.System.Data.DataColumn("ProjectID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProjectID)
            Me.columnLastScraped = New Global.System.Data.DataColumn("LastScraped", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLastScraped)
            Me.columnIsScraped = New Global.System.Data.DataColumn("IsScraped", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIsScraped)
            Me.columnProjUrlID = New Global.System.Data.DataColumn("ProjUrlID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProjUrlID)
            Me.columnLinkMappingID_FK = New Global.System.Data.DataColumn("LinkMappingID_FK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLinkMappingID_FK)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnProjUrlID}, true))
            Me.columnUrlID.AllowDBNull = false
            Me.columnProjectID.AllowDBNull = false
            Me.columnIsScraped.AllowDBNull = false
            Me.columnIsScraped.DefaultValue = CType(false,Boolean)
            Me.columnProjUrlID.AutoIncrement = true
            Me.columnProjUrlID.AutoIncrementSeed = -1
            Me.columnProjUrlID.AutoIncrementStep = -1
            Me.columnProjUrlID.AllowDBNull = false
            Me.columnProjUrlID.Unique = true
            Me.ExtendedProperties.Add("Generator_RowChangedName", "Project_UrlRowChanged")
            Me.ExtendedProperties.Add("Generator_RowChangingName", "Project_UrlRowChanging")
            Me.ExtendedProperties.Add("Generator_RowClassName", "ProjectUrlRow")
            Me.ExtendedProperties.Add("Generator_RowDeletedName", "Project_UrlRowDeleted")
            Me.ExtendedProperties.Add("Generator_RowDeletingName", "Project_UrlRowDeleting")
            Me.ExtendedProperties.Add("Generator_UserTableName", "Project_Url")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewProjectUrlRow() As ProjectUrlRow
            Return CType(Me.NewRow,ProjectUrlRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ProjectUrlRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ProjectUrlRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Project_UrlRowChangedEvent) Is Nothing) Then
                RaiseEvent Project_UrlRowChanged(Me, New Project_UrlRowChangeEvent(CType(e.Row,ProjectUrlRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Project_UrlRowChangingEvent) Is Nothing) Then
                RaiseEvent Project_UrlRowChanging(Me, New Project_UrlRowChangeEvent(CType(e.Row,ProjectUrlRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Project_UrlRowDeletedEvent) Is Nothing) Then
                RaiseEvent Project_UrlRowDeleted(Me, New Project_UrlRowChangeEvent(CType(e.Row,ProjectUrlRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Project_UrlRowDeletingEvent) Is Nothing) Then
                RaiseEvent Project_UrlRowDeleting(Me, New Project_UrlRowChangeEvent(CType(e.Row,ProjectUrlRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveProjectUrlRow(ByVal row As ProjectUrlRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ScraperDB = New ScraperDB
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Project_UrlDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ProxyDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnProxyID As Global.System.Data.DataColumn
        
        Private columnProxyStatusID As Global.System.Data.DataColumn
        
        Private columnProxyLink As Global.System.Data.DataColumn
        
        Private columnProxyPort As Global.System.Data.DataColumn
        
        Private columnAverageSpeed As Global.System.Data.DataColumn
        
        Private columnAveragePing As Global.System.Data.DataColumn
        
        Private columnMaxConnection As Global.System.Data.DataColumn
        
        Private columnTotalTimeout As Global.System.Data.DataColumn
        
        Private columnTotalAnonymous As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Proxy"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ProxyIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProxyID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ProxyStatusIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProxyStatusID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ProxyLinkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProxyLink
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ProxyPortColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProxyPort
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AverageSpeedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAverageSpeed
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AveragePingColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAveragePing
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MaxConnectionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMaxConnection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TotalTimeoutColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotalTimeout
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TotalAnonymousColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotalAnonymous
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ProxyRow
            Get
                Return CType(Me.Rows(index),ProxyRow)
            End Get
        End Property
        
        Public Event ProxyRowChanging As ProxyRowChangeEventHandler
        
        Public Event ProxyRowChanged As ProxyRowChangeEventHandler
        
        Public Event ProxyRowDeleting As ProxyRowChangeEventHandler
        
        Public Event ProxyRowDeleted As ProxyRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddProxyRow(ByVal row As ProxyRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddProxyRow(ByVal parentProxyStatusRowByFK_PROXY_PROXYSTAT_PROXYSTA As ProxyStatusRow, ByVal ProxyLink As String, ByVal ProxyPort As Integer, ByVal AverageSpeed As Integer, ByVal AveragePing As Integer, ByVal MaxConnection As Integer, ByVal TotalTimeout As Integer, ByVal TotalAnonymous As Integer) As ProxyRow
            Dim rowProxyRow As ProxyRow = CType(Me.NewRow,ProxyRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Nothing, ProxyLink, ProxyPort, AverageSpeed, AveragePing, MaxConnection, TotalTimeout, TotalAnonymous}
            If (Not (parentProxyStatusRowByFK_PROXY_PROXYSTAT_PROXYSTA) Is Nothing) Then
                columnValuesArray(1) = parentProxyStatusRowByFK_PROXY_PROXYSTAT_PROXYSTA(0)
            End If
            rowProxyRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowProxyRow)
            Return rowProxyRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByProxyID(ByVal ProxyID As Integer) As ProxyRow
            Return CType(Me.Rows.Find(New Object() {ProxyID}),ProxyRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ProxyDataTable = CType(MyBase.Clone,ProxyDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ProxyDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnProxyID = MyBase.Columns("ProxyID")
            Me.columnProxyStatusID = MyBase.Columns("ProxyStatusID")
            Me.columnProxyLink = MyBase.Columns("ProxyLink")
            Me.columnProxyPort = MyBase.Columns("ProxyPort")
            Me.columnAverageSpeed = MyBase.Columns("AverageSpeed")
            Me.columnAveragePing = MyBase.Columns("AveragePing")
            Me.columnMaxConnection = MyBase.Columns("MaxConnection")
            Me.columnTotalTimeout = MyBase.Columns("TotalTimeout")
            Me.columnTotalAnonymous = MyBase.Columns("TotalAnonymous")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnProxyID = New Global.System.Data.DataColumn("ProxyID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProxyID)
            Me.columnProxyStatusID = New Global.System.Data.DataColumn("ProxyStatusID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProxyStatusID)
            Me.columnProxyLink = New Global.System.Data.DataColumn("ProxyLink", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProxyLink)
            Me.columnProxyPort = New Global.System.Data.DataColumn("ProxyPort", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProxyPort)
            Me.columnAverageSpeed = New Global.System.Data.DataColumn("AverageSpeed", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAverageSpeed)
            Me.columnAveragePing = New Global.System.Data.DataColumn("AveragePing", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAveragePing)
            Me.columnMaxConnection = New Global.System.Data.DataColumn("MaxConnection", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMaxConnection)
            Me.columnTotalTimeout = New Global.System.Data.DataColumn("TotalTimeout", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotalTimeout)
            Me.columnTotalAnonymous = New Global.System.Data.DataColumn("TotalAnonymous", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotalAnonymous)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnProxyID}, true))
            Me.columnProxyID.AutoIncrement = true
            Me.columnProxyID.AutoIncrementSeed = -1
            Me.columnProxyID.AutoIncrementStep = -1
            Me.columnProxyID.AllowDBNull = false
            Me.columnProxyID.Unique = true
            Me.columnProxyStatusID.AllowDBNull = false
            Me.columnProxyLink.AllowDBNull = false
            Me.columnProxyLink.DefaultValue = CType("0",String)
            Me.columnProxyLink.MaxLength = 255
            Me.columnProxyPort.AllowDBNull = false
            Me.columnProxyPort.DefaultValue = CType(0,Integer)
            Me.columnAverageSpeed.AllowDBNull = false
            Me.columnAverageSpeed.DefaultValue = CType(0,Integer)
            Me.columnAveragePing.AllowDBNull = false
            Me.columnAveragePing.DefaultValue = CType(0,Integer)
            Me.columnMaxConnection.AllowDBNull = false
            Me.columnMaxConnection.DefaultValue = CType(0,Integer)
            Me.columnTotalTimeout.AllowDBNull = false
            Me.columnTotalTimeout.DefaultValue = CType(0,Integer)
            Me.columnTotalAnonymous.AllowDBNull = false
            Me.columnTotalAnonymous.DefaultValue = CType(0,Integer)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewProxyRow() As ProxyRow
            Return CType(Me.NewRow,ProxyRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ProxyRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ProxyRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ProxyRowChangedEvent) Is Nothing) Then
                RaiseEvent ProxyRowChanged(Me, New ProxyRowChangeEvent(CType(e.Row,ProxyRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ProxyRowChangingEvent) Is Nothing) Then
                RaiseEvent ProxyRowChanging(Me, New ProxyRowChangeEvent(CType(e.Row,ProxyRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ProxyRowDeletedEvent) Is Nothing) Then
                RaiseEvent ProxyRowDeleted(Me, New ProxyRowChangeEvent(CType(e.Row,ProxyRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ProxyRowDeletingEvent) Is Nothing) Then
                RaiseEvent ProxyRowDeleting(Me, New ProxyRowChangeEvent(CType(e.Row,ProxyRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveProxyRow(ByVal row As ProxyRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ScraperDB = New ScraperDB
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ProxyDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ProxyStatusDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnProxyStatusID As Global.System.Data.DataColumn
        
        Private columnStatusName As Global.System.Data.DataColumn
        
        Private columnStatusDescription As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ProxyStatus"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ProxyStatusIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProxyStatusID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StatusNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStatusName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StatusDescriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStatusDescription
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ProxyStatusRow
            Get
                Return CType(Me.Rows(index),ProxyStatusRow)
            End Get
        End Property
        
        Public Event ProxyStatusRowChanging As ProxyStatusRowChangeEventHandler
        
        Public Event ProxyStatusRowChanged As ProxyStatusRowChangeEventHandler
        
        Public Event ProxyStatusRowDeleting As ProxyStatusRowChangeEventHandler
        
        Public Event ProxyStatusRowDeleted As ProxyStatusRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddProxyStatusRow(ByVal row As ProxyStatusRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddProxyStatusRow(ByVal ProxyStatusID As Integer, ByVal StatusName As String, ByVal StatusDescription As String) As ProxyStatusRow
            Dim rowProxyStatusRow As ProxyStatusRow = CType(Me.NewRow,ProxyStatusRow)
            Dim columnValuesArray() As Object = New Object() {ProxyStatusID, StatusName, StatusDescription}
            rowProxyStatusRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowProxyStatusRow)
            Return rowProxyStatusRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByProxyStatusID(ByVal ProxyStatusID As Integer) As ProxyStatusRow
            Return CType(Me.Rows.Find(New Object() {ProxyStatusID}),ProxyStatusRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ProxyStatusDataTable = CType(MyBase.Clone,ProxyStatusDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ProxyStatusDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnProxyStatusID = MyBase.Columns("ProxyStatusID")
            Me.columnStatusName = MyBase.Columns("StatusName")
            Me.columnStatusDescription = MyBase.Columns("StatusDescription")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnProxyStatusID = New Global.System.Data.DataColumn("ProxyStatusID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProxyStatusID)
            Me.columnStatusName = New Global.System.Data.DataColumn("StatusName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStatusName)
            Me.columnStatusDescription = New Global.System.Data.DataColumn("StatusDescription", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStatusDescription)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnProxyStatusID}, true))
            Me.columnProxyStatusID.AutoIncrementSeed = -1
            Me.columnProxyStatusID.AutoIncrementStep = -1
            Me.columnProxyStatusID.AllowDBNull = false
            Me.columnProxyStatusID.Unique = true
            Me.columnStatusName.MaxLength = 50
            Me.columnStatusDescription.MaxLength = 255
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewProxyStatusRow() As ProxyStatusRow
            Return CType(Me.NewRow,ProxyStatusRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ProxyStatusRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ProxyStatusRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ProxyStatusRowChangedEvent) Is Nothing) Then
                RaiseEvent ProxyStatusRowChanged(Me, New ProxyStatusRowChangeEvent(CType(e.Row,ProxyStatusRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ProxyStatusRowChangingEvent) Is Nothing) Then
                RaiseEvent ProxyStatusRowChanging(Me, New ProxyStatusRowChangeEvent(CType(e.Row,ProxyStatusRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ProxyStatusRowDeletedEvent) Is Nothing) Then
                RaiseEvent ProxyStatusRowDeleted(Me, New ProxyStatusRowChangeEvent(CType(e.Row,ProxyStatusRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ProxyStatusRowDeletingEvent) Is Nothing) Then
                RaiseEvent ProxyStatusRowDeleting(Me, New ProxyStatusRowChangeEvent(CType(e.Row,ProxyStatusRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveProxyStatusRow(ByVal row As ProxyStatusRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ScraperDB = New ScraperDB
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ProxyStatusDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class Project_SampleDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnSampleID As Global.System.Data.DataColumn
        
        Private columnSampleUrl As Global.System.Data.DataColumn
        
        Private columnSampleText As Global.System.Data.DataColumn
        
        Private columnProjectID_FK As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Project_Sample"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SampleIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSampleID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SampleUrlColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSampleUrl
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SampleTextColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSampleText
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ProjectID_FKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProjectID_FK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As Project_SampleRow
            Get
                Return CType(Me.Rows(index),Project_SampleRow)
            End Get
        End Property
        
        Public Event Project_SampleRowChanging As Project_SampleRowChangeEventHandler
        
        Public Event Project_SampleRowChanged As Project_SampleRowChangeEventHandler
        
        Public Event Project_SampleRowDeleting As Project_SampleRowChangeEventHandler
        
        Public Event Project_SampleRowDeleted As Project_SampleRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddProject_SampleRow(ByVal row As Project_SampleRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddProject_SampleRow(ByVal SampleUrl As String, ByVal SampleText As String, ByVal parentProjectRowByFK_Project_Project_Sample As ProjectRow) As Project_SampleRow
            Dim rowProject_SampleRow As Project_SampleRow = CType(Me.NewRow,Project_SampleRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, SampleUrl, SampleText, Nothing}
            If (Not (parentProjectRowByFK_Project_Project_Sample) Is Nothing) Then
                columnValuesArray(3) = parentProjectRowByFK_Project_Project_Sample(0)
            End If
            rowProject_SampleRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowProject_SampleRow)
            Return rowProject_SampleRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBySampleID(ByVal SampleID As Integer) As Project_SampleRow
            Return CType(Me.Rows.Find(New Object() {SampleID}),Project_SampleRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As Project_SampleDataTable = CType(MyBase.Clone,Project_SampleDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New Project_SampleDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSampleID = MyBase.Columns("SampleID")
            Me.columnSampleUrl = MyBase.Columns("SampleUrl")
            Me.columnSampleText = MyBase.Columns("SampleText")
            Me.columnProjectID_FK = MyBase.Columns("ProjectID_FK")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSampleID = New Global.System.Data.DataColumn("SampleID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSampleID)
            Me.columnSampleUrl = New Global.System.Data.DataColumn("SampleUrl", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSampleUrl)
            Me.columnSampleText = New Global.System.Data.DataColumn("SampleText", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSampleText)
            Me.columnProjectID_FK = New Global.System.Data.DataColumn("ProjectID_FK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProjectID_FK)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Project_SampleKey1", New Global.System.Data.DataColumn() {Me.columnSampleID}, true))
            Me.columnSampleID.AutoIncrement = true
            Me.columnSampleID.AutoIncrementSeed = -1
            Me.columnSampleID.AutoIncrementStep = -1
            Me.columnSampleID.AllowDBNull = false
            Me.columnSampleID.Unique = true
            Me.columnSampleUrl.DefaultValue = CType("http://www.yahoo.com",String)
            Me.columnSampleText.DefaultValue = CType("To start, enter a url in the combo box and download a web site.",String)
            Me.columnProjectID_FK.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewProject_SampleRow() As Project_SampleRow
            Return CType(Me.NewRow,Project_SampleRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New Project_SampleRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(Project_SampleRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Project_SampleRowChangedEvent) Is Nothing) Then
                RaiseEvent Project_SampleRowChanged(Me, New Project_SampleRowChangeEvent(CType(e.Row,Project_SampleRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Project_SampleRowChangingEvent) Is Nothing) Then
                RaiseEvent Project_SampleRowChanging(Me, New Project_SampleRowChangeEvent(CType(e.Row,Project_SampleRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Project_SampleRowDeletedEvent) Is Nothing) Then
                RaiseEvent Project_SampleRowDeleted(Me, New Project_SampleRowChangeEvent(CType(e.Row,Project_SampleRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Project_SampleRowDeletingEvent) Is Nothing) Then
                RaiseEvent Project_SampleRowDeleting(Me, New Project_SampleRowChangeEvent(CType(e.Row,Project_SampleRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveProject_SampleRow(ByVal row As Project_SampleRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ScraperDB = New ScraperDB
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "Project_SampleDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class UrlReferencesDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnUrlRefID As Global.System.Data.DataColumn
        
        Private columnUrlID_FK As Global.System.Data.DataColumn
        
        Private columnReferingUrlID_FK As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "UrlReferences"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UrlRefIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUrlRefID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UrlID_FKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUrlID_FK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ReferingUrlID_FKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnReferingUrlID_FK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As UrlReferencesRow
            Get
                Return CType(Me.Rows(index),UrlReferencesRow)
            End Get
        End Property
        
        Public Event UrlReferencesRowChanging As UrlReferencesRowChangeEventHandler
        
        Public Event UrlReferencesRowChanged As UrlReferencesRowChangeEventHandler
        
        Public Event UrlReferencesRowDeleting As UrlReferencesRowChangeEventHandler
        
        Public Event UrlReferencesRowDeleted As UrlReferencesRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddUrlReferencesRow(ByVal row As UrlReferencesRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddUrlReferencesRow(ByVal parentUrlRowByUrl_Main As UrlRow, ByVal parentUrlRowByUrl_Referer As UrlRow) As UrlReferencesRow
            Dim rowUrlReferencesRow As UrlReferencesRow = CType(Me.NewRow,UrlReferencesRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Nothing, Nothing}
            If (Not (parentUrlRowByUrl_Main) Is Nothing) Then
                columnValuesArray(1) = parentUrlRowByUrl_Main(0)
            End If
            If (Not (parentUrlRowByUrl_Referer) Is Nothing) Then
                columnValuesArray(2) = parentUrlRowByUrl_Referer(0)
            End If
            rowUrlReferencesRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowUrlReferencesRow)
            Return rowUrlReferencesRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByUrlRefID(ByVal UrlRefID As Integer) As UrlReferencesRow
            Return CType(Me.Rows.Find(New Object() {UrlRefID}),UrlReferencesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As UrlReferencesDataTable = CType(MyBase.Clone,UrlReferencesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New UrlReferencesDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnUrlRefID = MyBase.Columns("UrlRefID")
            Me.columnUrlID_FK = MyBase.Columns("UrlID_FK")
            Me.columnReferingUrlID_FK = MyBase.Columns("ReferingUrlID_FK")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnUrlRefID = New Global.System.Data.DataColumn("UrlRefID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUrlRefID)
            Me.columnUrlID_FK = New Global.System.Data.DataColumn("UrlID_FK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUrlID_FK)
            Me.columnReferingUrlID_FK = New Global.System.Data.DataColumn("ReferingUrlID_FK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReferingUrlID_FK)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnUrlRefID}, true))
            Me.columnUrlRefID.AutoIncrement = true
            Me.columnUrlRefID.AutoIncrementSeed = -1
            Me.columnUrlRefID.AutoIncrementStep = -1
            Me.columnUrlRefID.AllowDBNull = false
            Me.columnUrlRefID.Unique = true
            Me.columnUrlID_FK.AllowDBNull = false
            Me.columnReferingUrlID_FK.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewUrlReferencesRow() As UrlReferencesRow
            Return CType(Me.NewRow,UrlReferencesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New UrlReferencesRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(UrlReferencesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.UrlReferencesRowChangedEvent) Is Nothing) Then
                RaiseEvent UrlReferencesRowChanged(Me, New UrlReferencesRowChangeEvent(CType(e.Row,UrlReferencesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.UrlReferencesRowChangingEvent) Is Nothing) Then
                RaiseEvent UrlReferencesRowChanging(Me, New UrlReferencesRowChangeEvent(CType(e.Row,UrlReferencesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.UrlReferencesRowDeletedEvent) Is Nothing) Then
                RaiseEvent UrlReferencesRowDeleted(Me, New UrlReferencesRowChangeEvent(CType(e.Row,UrlReferencesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.UrlReferencesRowDeletingEvent) Is Nothing) Then
                RaiseEvent UrlReferencesRowDeleting(Me, New UrlReferencesRowChangeEvent(CType(e.Row,UrlReferencesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveUrlReferencesRow(ByVal row As UrlReferencesRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ScraperDB = New ScraperDB
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "UrlReferencesDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class DataTypeDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnDataTypeID As Global.System.Data.DataColumn
        
        Private columnDataTypeName As Global.System.Data.DataColumn
        
        Private columnDataTypeCode As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "DataType"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DataTypeIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDataTypeID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DataTypeNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDataTypeName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DataTypeCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDataTypeCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As DataTypeRow
            Get
                Return CType(Me.Rows(index),DataTypeRow)
            End Get
        End Property
        
        Public Event DataTypeRowChanging As DataTypeRowChangeEventHandler
        
        Public Event DataTypeRowChanged As DataTypeRowChangeEventHandler
        
        Public Event DataTypeRowDeleting As DataTypeRowChangeEventHandler
        
        Public Event DataTypeRowDeleted As DataTypeRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddDataTypeRow(ByVal row As DataTypeRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddDataTypeRow(ByVal DataTypeName As String, ByVal DataTypeCode As String) As DataTypeRow
            Dim rowDataTypeRow As DataTypeRow = CType(Me.NewRow,DataTypeRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, DataTypeName, DataTypeCode}
            rowDataTypeRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowDataTypeRow)
            Return rowDataTypeRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByDataTypeID(ByVal DataTypeID As Integer) As DataTypeRow
            Return CType(Me.Rows.Find(New Object() {DataTypeID}),DataTypeRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As DataTypeDataTable = CType(MyBase.Clone,DataTypeDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New DataTypeDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnDataTypeID = MyBase.Columns("DataTypeID")
            Me.columnDataTypeName = MyBase.Columns("DataTypeName")
            Me.columnDataTypeCode = MyBase.Columns("DataTypeCode")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnDataTypeID = New Global.System.Data.DataColumn("DataTypeID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDataTypeID)
            Me.columnDataTypeName = New Global.System.Data.DataColumn("DataTypeName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDataTypeName)
            Me.columnDataTypeCode = New Global.System.Data.DataColumn("DataTypeCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDataTypeCode)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnDataTypeID}, true))
            Me.columnDataTypeID.AutoIncrement = true
            Me.columnDataTypeID.AutoIncrementSeed = -1
            Me.columnDataTypeID.AutoIncrementStep = -1
            Me.columnDataTypeID.AllowDBNull = false
            Me.columnDataTypeID.Unique = true
            Me.columnDataTypeName.MaxLength = 25
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewDataTypeRow() As DataTypeRow
            Return CType(Me.NewRow,DataTypeRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New DataTypeRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(DataTypeRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DataTypeRowChangedEvent) Is Nothing) Then
                RaiseEvent DataTypeRowChanged(Me, New DataTypeRowChangeEvent(CType(e.Row,DataTypeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DataTypeRowChangingEvent) Is Nothing) Then
                RaiseEvent DataTypeRowChanging(Me, New DataTypeRowChangeEvent(CType(e.Row,DataTypeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DataTypeRowDeletedEvent) Is Nothing) Then
                RaiseEvent DataTypeRowDeleted(Me, New DataTypeRowChangeEvent(CType(e.Row,DataTypeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DataTypeRowDeletingEvent) Is Nothing) Then
                RaiseEvent DataTypeRowDeleting(Me, New DataTypeRowChangeEvent(CType(e.Row,DataTypeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveDataTypeRow(ByVal row As DataTypeRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ScraperDB = New ScraperDB
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "DataTypeDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class CrawlClientDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnClientID As Global.System.Data.DataColumn
        
        Private columnClientIP As Global.System.Data.DataColumn
        
        Private columnClientComputerName As Global.System.Data.DataColumn
        
        Private columnClientPassword As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "CrawlClient"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ClientIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnClientID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ClientIPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnClientIP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ClientComputerNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnClientComputerName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ClientPasswordColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnClientPassword
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As CrawlClientRow
            Get
                Return CType(Me.Rows(index),CrawlClientRow)
            End Get
        End Property
        
        Public Event CrawlClientRowChanging As CrawlClientRowChangeEventHandler
        
        Public Event CrawlClientRowChanged As CrawlClientRowChangeEventHandler
        
        Public Event CrawlClientRowDeleting As CrawlClientRowChangeEventHandler
        
        Public Event CrawlClientRowDeleted As CrawlClientRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddCrawlClientRow(ByVal row As CrawlClientRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddCrawlClientRow(ByVal ClientIP As String, ByVal ClientComputerName As String, ByVal ClientPassword As String) As CrawlClientRow
            Dim rowCrawlClientRow As CrawlClientRow = CType(Me.NewRow,CrawlClientRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, ClientIP, ClientComputerName, ClientPassword}
            rowCrawlClientRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowCrawlClientRow)
            Return rowCrawlClientRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByClientID(ByVal ClientID As Integer) As CrawlClientRow
            Return CType(Me.Rows.Find(New Object() {ClientID}),CrawlClientRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As CrawlClientDataTable = CType(MyBase.Clone,CrawlClientDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New CrawlClientDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnClientID = MyBase.Columns("ClientID")
            Me.columnClientIP = MyBase.Columns("ClientIP")
            Me.columnClientComputerName = MyBase.Columns("ClientComputerName")
            Me.columnClientPassword = MyBase.Columns("ClientPassword")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnClientID = New Global.System.Data.DataColumn("ClientID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnClientID)
            Me.columnClientIP = New Global.System.Data.DataColumn("ClientIP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnClientIP)
            Me.columnClientComputerName = New Global.System.Data.DataColumn("ClientComputerName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnClientComputerName)
            Me.columnClientPassword = New Global.System.Data.DataColumn("ClientPassword", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnClientPassword)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnClientID}, true))
            Me.columnClientID.AutoIncrement = true
            Me.columnClientID.AutoIncrementSeed = -1
            Me.columnClientID.AutoIncrementStep = -1
            Me.columnClientID.AllowDBNull = false
            Me.columnClientID.Unique = true
            Me.columnClientIP.AllowDBNull = false
            Me.columnClientIP.MaxLength = 15
            Me.columnClientComputerName.MaxLength = 50
            Me.columnClientPassword.MaxLength = 32
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewCrawlClientRow() As CrawlClientRow
            Return CType(Me.NewRow,CrawlClientRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New CrawlClientRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(CrawlClientRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CrawlClientRowChangedEvent) Is Nothing) Then
                RaiseEvent CrawlClientRowChanged(Me, New CrawlClientRowChangeEvent(CType(e.Row,CrawlClientRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CrawlClientRowChangingEvent) Is Nothing) Then
                RaiseEvent CrawlClientRowChanging(Me, New CrawlClientRowChangeEvent(CType(e.Row,CrawlClientRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CrawlClientRowDeletedEvent) Is Nothing) Then
                RaiseEvent CrawlClientRowDeleted(Me, New CrawlClientRowChangeEvent(CType(e.Row,CrawlClientRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CrawlClientRowDeletingEvent) Is Nothing) Then
                RaiseEvent CrawlClientRowDeleting(Me, New CrawlClientRowChangeEvent(CType(e.Row,CrawlClientRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveCrawlClientRow(ByVal row As CrawlClientRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ScraperDB = New ScraperDB
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "CrawlClientDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class CronDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnCronID As Global.System.Data.DataColumn
        
        Private columnCrawlProjectID_FK As Global.System.Data.DataColumn
        
        Private columnCronName As Global.System.Data.DataColumn
        
        Private columnDuration As Global.System.Data.DataColumn
        
        Private columnMinute As Global.System.Data.DataColumn
        
        Private columnHour As Global.System.Data.DataColumn
        
        Private columnDateOfMonth As Global.System.Data.DataColumn
        
        Private columnMonth As Global.System.Data.DataColumn
        
        Private columnDayOfWeek As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Cron"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CronIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCronID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CrawlProjectID_FKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCrawlProjectID_FK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CronNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCronName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DurationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDuration
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MinuteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMinute
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property HourColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHour
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateOfMonthColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDateOfMonth
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MonthColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMonth
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DayOfWeekColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDayOfWeek
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As CronRow
            Get
                Return CType(Me.Rows(index),CronRow)
            End Get
        End Property
        
        Public Event CronRowChanging As CronRowChangeEventHandler
        
        Public Event CronRowChanged As CronRowChangeEventHandler
        
        Public Event CronRowDeleting As CronRowChangeEventHandler
        
        Public Event CronRowDeleted As CronRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddCronRow(ByVal row As CronRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddCronRow(ByVal parentCrawlProjectRowByFK_CrawlProject_Cron As CrawlProjectRow, ByVal CronName As String, ByVal Duration As Integer, ByVal Minute As String, ByVal Hour As String, ByVal DateOfMonth As String, ByVal Month As String, ByVal DayOfWeek As String) As CronRow
            Dim rowCronRow As CronRow = CType(Me.NewRow,CronRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Nothing, CronName, Duration, Minute, Hour, DateOfMonth, Month, DayOfWeek}
            If (Not (parentCrawlProjectRowByFK_CrawlProject_Cron) Is Nothing) Then
                columnValuesArray(1) = parentCrawlProjectRowByFK_CrawlProject_Cron(0)
            End If
            rowCronRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowCronRow)
            Return rowCronRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCronID(ByVal CronID As Integer) As CronRow
            Return CType(Me.Rows.Find(New Object() {CronID}),CronRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As CronDataTable = CType(MyBase.Clone,CronDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New CronDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCronID = MyBase.Columns("CronID")
            Me.columnCrawlProjectID_FK = MyBase.Columns("CrawlProjectID_FK")
            Me.columnCronName = MyBase.Columns("CronName")
            Me.columnDuration = MyBase.Columns("Duration")
            Me.columnMinute = MyBase.Columns("Minute")
            Me.columnHour = MyBase.Columns("Hour")
            Me.columnDateOfMonth = MyBase.Columns("DateOfMonth")
            Me.columnMonth = MyBase.Columns("Month")
            Me.columnDayOfWeek = MyBase.Columns("DayOfWeek")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCronID = New Global.System.Data.DataColumn("CronID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCronID)
            Me.columnCrawlProjectID_FK = New Global.System.Data.DataColumn("CrawlProjectID_FK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCrawlProjectID_FK)
            Me.columnCronName = New Global.System.Data.DataColumn("CronName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCronName)
            Me.columnDuration = New Global.System.Data.DataColumn("Duration", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDuration)
            Me.columnMinute = New Global.System.Data.DataColumn("Minute", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMinute)
            Me.columnHour = New Global.System.Data.DataColumn("Hour", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHour)
            Me.columnDateOfMonth = New Global.System.Data.DataColumn("DateOfMonth", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateOfMonth)
            Me.columnMonth = New Global.System.Data.DataColumn("Month", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMonth)
            Me.columnDayOfWeek = New Global.System.Data.DataColumn("DayOfWeek", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDayOfWeek)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCronID}, true))
            Me.columnCronID.AutoIncrement = true
            Me.columnCronID.AutoIncrementSeed = -1
            Me.columnCronID.AutoIncrementStep = -1
            Me.columnCronID.AllowDBNull = false
            Me.columnCronID.Unique = true
            Me.columnCronName.DefaultValue = CType("25",String)
            Me.columnDuration.AllowDBNull = false
            Me.columnDuration.DefaultValue = CType(60,Integer)
            Me.columnMinute.AllowDBNull = false
            Me.columnMinute.DefaultValue = CType("0",String)
            Me.columnMinute.MaxLength = 100
            Me.columnHour.AllowDBNull = false
            Me.columnHour.DefaultValue = CType("0",String)
            Me.columnHour.MaxLength = 100
            Me.columnDateOfMonth.DefaultValue = CType("*",String)
            Me.columnDateOfMonth.MaxLength = 100
            Me.columnMonth.DefaultValue = CType("*",String)
            Me.columnMonth.MaxLength = 100
            Me.columnDayOfWeek.DefaultValue = CType("*",String)
            Me.columnDayOfWeek.MaxLength = 100
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewCronRow() As CronRow
            Return CType(Me.NewRow,CronRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New CronRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(CronRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CronRowChangedEvent) Is Nothing) Then
                RaiseEvent CronRowChanged(Me, New CronRowChangeEvent(CType(e.Row,CronRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CronRowChangingEvent) Is Nothing) Then
                RaiseEvent CronRowChanging(Me, New CronRowChangeEvent(CType(e.Row,CronRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CronRowDeletedEvent) Is Nothing) Then
                RaiseEvent CronRowDeleted(Me, New CronRowChangeEvent(CType(e.Row,CronRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CronRowDeletingEvent) Is Nothing) Then
                RaiseEvent CronRowDeleting(Me, New CronRowChangeEvent(CType(e.Row,CronRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveCronRow(ByVal row As CronRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ScraperDB = New ScraperDB
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "CronDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class TagLibraryRow
        Inherits Global.System.Data.DataRow
        
        Private tableTagLibrary As TagLibraryDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTagLibrary = CType(Me.Table,TagLibraryDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TagID() As Integer
            Get
                Return CType(Me(Me.tableTagLibrary.TagIDColumn),Integer)
            End Get
            Set
                Me(Me.tableTagLibrary.TagIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Parent_TagID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableTagLibrary.Parent_TagIDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Parent_TagID' in table 'TagLibrary' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTagLibrary.Parent_TagIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ProjectID() As Integer
            Get
                Return CType(Me(Me.tableTagLibrary.ProjectIDColumn),Integer)
            End Get
            Set
                Me(Me.tableTagLibrary.ProjectIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TagName() As String
            Get
                Return CType(Me(Me.tableTagLibrary.TagNameColumn),String)
            End Get
            Set
                Me(Me.tableTagLibrary.TagNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StartTag() As String
            Get
                Return CType(Me(Me.tableTagLibrary.StartTagColumn),String)
            End Get
            Set
                Me(Me.tableTagLibrary.StartTagColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EndTag() As String
            Get
                Return CType(Me(Me.tableTagLibrary.EndTagColumn),String)
            End Get
            Set
                Me(Me.tableTagLibrary.EndTagColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OrderNumber() As Integer
            Get
                Return CType(Me(Me.tableTagLibrary.OrderNumberColumn),Integer)
            End Get
            Set
                Me(Me.tableTagLibrary.OrderNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MaxChars() As Integer
            Get
                Return CType(Me(Me.tableTagLibrary.MaxCharsColumn),Integer)
            End Get
            Set
                Me(Me.tableTagLibrary.MaxCharsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IsAppendStartTag() As Boolean
            Get
                Return CType(Me(Me.tableTagLibrary.IsAppendStartTagColumn),Boolean)
            End Get
            Set
                Me(Me.tableTagLibrary.IsAppendStartTagColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IsAppendEndTag() As Boolean
            Get
                Return CType(Me(Me.tableTagLibrary.IsAppendEndTagColumn),Boolean)
            End Get
            Set
                Me(Me.tableTagLibrary.IsAppendEndTagColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IsStartTagRegex() As Boolean
            Get
                Return CType(Me(Me.tableTagLibrary.IsStartTagRegexColumn),Boolean)
            End Get
            Set
                Me(Me.tableTagLibrary.IsStartTagRegexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IsEndTagRegex() As Boolean
            Get
                Return CType(Me(Me.tableTagLibrary.IsEndTagRegexColumn),Boolean)
            End Get
            Set
                Me(Me.tableTagLibrary.IsEndTagRegexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IsOptional() As Boolean
            Get
                Return CType(Me(Me.tableTagLibrary.IsOptionalColumn),Boolean)
            End Get
            Set
                Me(Me.tableTagLibrary.IsOptionalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IsSingleRegex() As Boolean
            Get
                Return CType(Me(Me.tableTagLibrary.IsSingleRegexColumn),Boolean)
            End Get
            Set
                Me(Me.tableTagLibrary.IsSingleRegexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property isReverseSearch() As Boolean
            Get
                Return CType(Me(Me.tableTagLibrary.isReverseSearchColumn),Boolean)
            End Get
            Set
                Me(Me.tableTagLibrary.isReverseSearchColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IsURL() As Boolean
            Get
                Return CType(Me(Me.tableTagLibrary.IsURLColumn),Boolean)
            End Get
            Set
                Me(Me.tableTagLibrary.IsURLColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IsDisabled() As Boolean
            Get
                Return CType(Me(Me.tableTagLibrary.IsDisabledColumn),Boolean)
            End Get
            Set
                Me(Me.tableTagLibrary.IsDisabledColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property isSaveData() As Boolean
            Get
                Return CType(Me(Me.tableTagLibrary.isSaveDataColumn),Boolean)
            End Get
            Set
                Me(Me.tableTagLibrary.isSaveDataColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IsDataTable() As Boolean
            Get
                Return CType(Me(Me.tableTagLibrary.IsDataTableColumn),Boolean)
            End Get
            Set
                Me(Me.tableTagLibrary.IsDataTableColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IsIdentfier() As String
            Get
                Return CType(Me(Me.tableTagLibrary.IsIdentfierColumn),String)
            End Get
            Set
                Me(Me.tableTagLibrary.IsIdentfierColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TableName() As String
            Get
                If Me.IsTableNameNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableTagLibrary.TableNameColumn),String)
                End If
            End Get
            Set
                Me(Me.tableTagLibrary.TableNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FieldName() As String
            Get
                If Me.IsFieldNameNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableTagLibrary.FieldNameColumn),String)
                End If
            End Get
            Set
                Me(Me.tableTagLibrary.FieldNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DataTypeID_FK() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableTagLibrary.DataTypeID_FKColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DataTypeID_FK' in table 'TagLibrary' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTagLibrary.DataTypeID_FKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TagLibraryRowParent() As TagLibraryRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_TAGLIBRA_PARENTTAG_TAGLIBRA")),TagLibraryRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_TAGLIBRA_PARENTTAG_TAGLIBRA"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DataTypeRow() As DataTypeRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_DataType_TagLibrary")),DataTypeRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_DataType_TagLibrary"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ProjectRow() As ProjectRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_TAGLIBRA_PROJECT_T_PROJECT")),ProjectRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_TAGLIBRA_PROJECT_T_PROJECT"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsParent_TagIDNull() As Boolean
            Return Me.IsNull(Me.tableTagLibrary.Parent_TagIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetParent_TagIDNull()
            Me(Me.tableTagLibrary.Parent_TagIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTableNameNull() As Boolean
            Return Me.IsNull(Me.tableTagLibrary.TableNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTableNameNull()
            Me(Me.tableTagLibrary.TableNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFieldNameNull() As Boolean
            Return Me.IsNull(Me.tableTagLibrary.FieldNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFieldNameNull()
            Me(Me.tableTagLibrary.FieldNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDataTypeID_FKNull() As Boolean
            Return Me.IsNull(Me.tableTagLibrary.DataTypeID_FKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDataTypeID_FKNull()
            Me(Me.tableTagLibrary.DataTypeID_FKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetTagLibraryRows() As TagLibraryRow()
            If (Me.Table.ChildRelations("FK_TAGLIBRA_PARENTTAG_TAGLIBRA") Is Nothing) Then
                Return New TagLibraryRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_TAGLIBRA_PARENTTAG_TAGLIBRA")),TagLibraryRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetLinkMappingRows() As LinkMappingRow()
            If (Me.Table.ChildRelations("FK_LINKMAPP_TAGLIBRAR_TAGLIBRA") Is Nothing) Then
                Return New LinkMappingRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_LINKMAPP_TAGLIBRAR_TAGLIBRA")),LinkMappingRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class UrlRow
        Inherits Global.System.Data.DataRow
        
        Private tableUrl As UrlDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableUrl = CType(Me.Table,UrlDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UrlID() As Integer
            Get
                Return CType(Me(Me.tableUrl.UrlIDColumn),Integer)
            End Get
            Set
                Me(Me.tableUrl.UrlIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UrlStatusID() As Integer
            Get
                Return CType(Me(Me.tableUrl.UrlStatusIDColumn),Integer)
            End Get
            Set
                Me(Me.tableUrl.UrlStatusIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ProxyID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableUrl.ProxyIDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ProxyID' in table 'Url' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUrl.ProxyIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UrlLink() As String
            Get
                Return CType(Me(Me.tableUrl.UrlLinkColumn),String)
            End Get
            Set
                Me(Me.tableUrl.UrlLinkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UrlReferer() As String
            Get
                If Me.IsUrlRefererNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableUrl.UrlRefererColumn),String)
                End If
            End Get
            Set
                Me(Me.tableUrl.UrlRefererColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PostData() As String
            Get
                If Me.IsPostDataNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableUrl.PostDataColumn),String)
                End If
            End Get
            Set
                Me(Me.tableUrl.PostDataColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Content() As String
            Get
                If Me.IsContentNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableUrl.ContentColumn),String)
                End If
            End Get
            Set
                Me(Me.tableUrl.ContentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LastScraped() As Date
            Get
                Try 
                    Return CType(Me(Me.tableUrl.LastScrapedColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LastScraped' in table 'Url' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUrl.LastScrapedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LastModified() As Date
            Get
                Try 
                    Return CType(Me(Me.tableUrl.LastModifiedColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LastModified' in table 'Url' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUrl.LastModifiedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LastAssigned() As Date
            Get
                Try 
                    Return CType(Me(Me.tableUrl.LastAssignedColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LastAssigned' in table 'Url' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUrl.LastAssignedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateAdded() As Date
            Get
                Return CType(Me(Me.tableUrl.DateAddedColumn),Date)
            End Get
            Set
                Me(Me.tableUrl.DateAddedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ErrorMessage() As String
            Get
                If Me.IsErrorMessageNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableUrl.ErrorMessageColumn),String)
                End If
            End Get
            Set
                Me(Me.tableUrl.ErrorMessageColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CrawlProjectID_FK() As Integer
            Get
                Return CType(Me(Me.tableUrl.CrawlProjectID_FKColumn),Integer)
            End Get
            Set
                Me(Me.tableUrl.CrawlProjectID_FKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClientID_FK() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableUrl.ClientID_FKColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ClientID_FK' in table 'Url' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUrl.ClientID_FKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IsPartialData() As Boolean
            Get
                Return CType(Me(Me.tableUrl.IsPartialDataColumn),Boolean)
            End Get
            Set
                Me(Me.tableUrl.IsPartialDataColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ProxyRow() As ProxyRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_URL_PROXY_URL_PROXY")),ProxyRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_URL_PROXY_URL_PROXY"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UrlStatusRow() As UrlStatusRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_URL_URL_URLST_URLSTATU")),UrlStatusRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_URL_URL_URLST_URLSTATU"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CrawlProjectRow() As CrawlProjectRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_CrawlProject_Url")),CrawlProjectRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_CrawlProject_Url"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CrawlClientRow() As CrawlClientRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_CrawlClient_Url")),CrawlClientRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_CrawlClient_Url"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsProxyIDNull() As Boolean
            Return Me.IsNull(Me.tableUrl.ProxyIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetProxyIDNull()
            Me(Me.tableUrl.ProxyIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUrlRefererNull() As Boolean
            Return Me.IsNull(Me.tableUrl.UrlRefererColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUrlRefererNull()
            Me(Me.tableUrl.UrlRefererColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPostDataNull() As Boolean
            Return Me.IsNull(Me.tableUrl.PostDataColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPostDataNull()
            Me(Me.tableUrl.PostDataColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsContentNull() As Boolean
            Return Me.IsNull(Me.tableUrl.ContentColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetContentNull()
            Me(Me.tableUrl.ContentColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLastScrapedNull() As Boolean
            Return Me.IsNull(Me.tableUrl.LastScrapedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLastScrapedNull()
            Me(Me.tableUrl.LastScrapedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLastModifiedNull() As Boolean
            Return Me.IsNull(Me.tableUrl.LastModifiedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLastModifiedNull()
            Me(Me.tableUrl.LastModifiedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLastAssignedNull() As Boolean
            Return Me.IsNull(Me.tableUrl.LastAssignedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLastAssignedNull()
            Me(Me.tableUrl.LastAssignedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsErrorMessageNull() As Boolean
            Return Me.IsNull(Me.tableUrl.ErrorMessageColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetErrorMessageNull()
            Me(Me.tableUrl.ErrorMessageColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsClientID_FKNull() As Boolean
            Return Me.IsNull(Me.tableUrl.ClientID_FKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetClientID_FKNull()
            Me(Me.tableUrl.ClientID_FKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetUrlReferencesRowsByUrl_Main() As UrlReferencesRow()
            If (Me.Table.ChildRelations("Url_Main") Is Nothing) Then
                Return New UrlReferencesRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("Url_Main")),UrlReferencesRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetUrlReferencesRowsByUrl_Referer() As UrlReferencesRow()
            If (Me.Table.ChildRelations("Url_Referer") Is Nothing) Then
                Return New UrlReferencesRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("Url_Referer")),UrlReferencesRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetProject_UrlRows() As ProjectUrlRow()
            If (Me.Table.ChildRelations("FK_PROJECT__URL_PROJE_URL") Is Nothing) Then
                Return New ProjectUrlRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_PROJECT__URL_PROJE_URL")),ProjectUrlRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class CrawlProjectRow
        Inherits Global.System.Data.DataRow
        
        Private tableCrawlProject As CrawlProjectDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCrawlProject = CType(Me.Table,CrawlProjectDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CrawlProjectID() As Integer
            Get
                Return CType(Me(Me.tableCrawlProject.CrawlProjectIDColumn),Integer)
            End Get
            Set
                Me(Me.tableCrawlProject.CrawlProjectIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Name() As String
            Get
                Return CType(Me(Me.tableCrawlProject.NameColumn),String)
            End Get
            Set
                Me(Me.tableCrawlProject.NameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ProxyCheckUrl() As String
            Get
                Return CType(Me(Me.tableCrawlProject.ProxyCheckUrlColumn),String)
            End Get
            Set
                Me(Me.tableCrawlProject.ProxyCheckUrlColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ProxyCheckContent() As String
            Get
                Return CType(Me(Me.tableCrawlProject.ProxyCheckContentColumn),String)
            End Get
            Set
                Me(Me.tableCrawlProject.ProxyCheckContentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IsSaveContent() As Boolean
            Get
                Return CType(Me(Me.tableCrawlProject.IsSaveContentColumn),Boolean)
            End Get
            Set
                Me(Me.tableCrawlProject.IsSaveContentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Threads() As Integer
            Get
                Return CType(Me(Me.tableCrawlProject.ThreadsColumn),Integer)
            End Get
            Set
                Me(Me.tableCrawlProject.ThreadsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DownloadDelay() As Integer
            Get
                Return CType(Me(Me.tableCrawlProject.DownloadDelayColumn),Integer)
            End Get
            Set
                Me(Me.tableCrawlProject.DownloadDelayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TotalUrl() As Integer
            Get
                Return CType(Me(Me.tableCrawlProject.TotalUrlColumn),Integer)
            End Get
            Set
                Me(Me.tableCrawlProject.TotalUrlColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TotalUrlLeft() As Integer
            Get
                Return CType(Me(Me.tableCrawlProject.TotalUrlLeftColumn),Integer)
            End Get
            Set
                Me(Me.tableCrawlProject.TotalUrlLeftColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ConnectionPerIP() As Integer
            Get
                Return CType(Me(Me.tableCrawlProject.ConnectionPerIPColumn),Integer)
            End Get
            Set
                Me(Me.tableCrawlProject.ConnectionPerIPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateRun() As Date
            Get
                Try 
                    Return CType(Me(Me.tableCrawlProject.DateRunColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DateRun' in table 'CrawlProject' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCrawlProject.DateRunColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MaxUrl() As Integer
            Get
                Return CType(Me(Me.tableCrawlProject.MaxUrlColumn),Integer)
            End Get
            Set
                Me(Me.tableCrawlProject.MaxUrlColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TotalProjects() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCrawlProject.TotalProjectsColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TotalProjects' in table 'CrawlProject' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCrawlProject.TotalProjectsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AssignTimeOutMinute() As Integer
            Get
                Return CType(Me(Me.tableCrawlProject.AssignTimeOutMinuteColumn),Integer)
            End Get
            Set
                Me(Me.tableCrawlProject.AssignTimeOutMinuteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WebAgentName() As String
            Get
                Return CType(Me(Me.tableCrawlProject.WebAgentNameColumn),String)
            End Get
            Set
                Me(Me.tableCrawlProject.WebAgentNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WebTimeout() As Integer
            Get
                Return CType(Me(Me.tableCrawlProject.WebTimeoutColumn),Integer)
            End Get
            Set
                Me(Me.tableCrawlProject.WebTimeoutColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CreatedDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableCrawlProject.CreatedDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CreatedDate' in table 'CrawlProject' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCrawlProject.CreatedDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CreatedByUserID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCrawlProject.CreatedByUserIDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CreatedByUserID' in table 'CrawlProject' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCrawlProject.CreatedByUserIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateRunNull() As Boolean
            Return Me.IsNull(Me.tableCrawlProject.DateRunColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateRunNull()
            Me(Me.tableCrawlProject.DateRunColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTotalProjectsNull() As Boolean
            Return Me.IsNull(Me.tableCrawlProject.TotalProjectsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTotalProjectsNull()
            Me(Me.tableCrawlProject.TotalProjectsColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCreatedDateNull() As Boolean
            Return Me.IsNull(Me.tableCrawlProject.CreatedDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCreatedDateNull()
            Me(Me.tableCrawlProject.CreatedDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCreatedByUserIDNull() As Boolean
            Return Me.IsNull(Me.tableCrawlProject.CreatedByUserIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCreatedByUserIDNull()
            Me(Me.tableCrawlProject.CreatedByUserIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetCronRows() As CronRow()
            If (Me.Table.ChildRelations("FK_CrawlProject_Cron") Is Nothing) Then
                Return New CronRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_CrawlProject_Cron")),CronRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetProjectRows() As ProjectRow()
            If (Me.Table.ChildRelations("FK_PROJECT_PROJECT_C_CRAWLPRO") Is Nothing) Then
                Return New ProjectRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_PROJECT_PROJECT_C_CRAWLPRO")),ProjectRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetUrlRows() As UrlRow()
            If (Me.Table.ChildRelations("FK_CrawlProject_Url") Is Nothing) Then
                Return New UrlRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_CrawlProject_Url")),UrlRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class UrlStatusRow
        Inherits Global.System.Data.DataRow
        
        Private tableUrlStatus As UrlStatusDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableUrlStatus = CType(Me.Table,UrlStatusDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UrlStatusID() As Integer
            Get
                Return CType(Me(Me.tableUrlStatus.UrlStatusIDColumn),Integer)
            End Get
            Set
                Me(Me.tableUrlStatus.UrlStatusIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Name() As String
            Get
                Try 
                    Return CType(Me(Me.tableUrlStatus.NameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Name' in table 'UrlStatus' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUrlStatus.NameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Description() As String
            Get
                Try 
                    Return CType(Me(Me.tableUrlStatus.DescriptionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Description' in table 'UrlStatus' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUrlStatus.DescriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNameNull() As Boolean
            Return Me.IsNull(Me.tableUrlStatus.NameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNameNull()
            Me(Me.tableUrlStatus.NameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDescriptionNull() As Boolean
            Return Me.IsNull(Me.tableUrlStatus.DescriptionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDescriptionNull()
            Me(Me.tableUrlStatus.DescriptionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetUrlRows() As UrlRow()
            If (Me.Table.ChildRelations("FK_URL_URL_URLST_URLSTATU") Is Nothing) Then
                Return New UrlRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_URL_URL_URLST_URLSTATU")),UrlRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class LinkMappingRow
        Inherits Global.System.Data.DataRow
        
        Private tableLinkMapping As LinkMappingDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableLinkMapping = CType(Me.Table,LinkMappingDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LinkMappingID() As Integer
            Get
                Return CType(Me(Me.tableLinkMapping.LinkMappingIDColumn),Integer)
            End Get
            Set
                Me(Me.tableLinkMapping.LinkMappingIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TagID() As Integer
            Get
                Return CType(Me(Me.tableLinkMapping.TagIDColumn),Integer)
            End Get
            Set
                Me(Me.tableLinkMapping.TagIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ProjectID() As Integer
            Get
                Return CType(Me(Me.tableLinkMapping.ProjectIDColumn),Integer)
            End Get
            Set
                Me(Me.tableLinkMapping.ProjectIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IsPartialData() As Boolean
            Get
                Return CType(Me(Me.tableLinkMapping.IsPartialDataColumn),Boolean)
            End Get
            Set
                Me(Me.tableLinkMapping.IsPartialDataColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ProjectRow() As ProjectRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_LINKMAPP_LINKMAPPI_PROJECT")),ProjectRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_LINKMAPP_LINKMAPPI_PROJECT"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TagLibraryRow() As TagLibraryRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_LINKMAPP_TAGLIBRAR_TAGLIBRA")),TagLibraryRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_LINKMAPP_TAGLIBRAR_TAGLIBRA"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetProject_UrlRows() As ProjectUrlRow()
            If (Me.Table.ChildRelations("FK_LinkMapping_Project_Url") Is Nothing) Then
                Return New ProjectUrlRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_LinkMapping_Project_Url")),ProjectUrlRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ProjectRow
        Inherits Global.System.Data.DataRow
        
        Private tableProject As ProjectDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableProject = CType(Me.Table,ProjectDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ProjectID() As Integer
            Get
                Return CType(Me(Me.tableProject.ProjectIDColumn),Integer)
            End Get
            Set
                Me(Me.tableProject.ProjectIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CrawlProjectID() As Integer
            Get
                Return CType(Me(Me.tableProject.CrawlProjectIDColumn),Integer)
            End Get
            Set
                Me(Me.tableProject.CrawlProjectIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Name() As String
            Get
                Return CType(Me(Me.tableProject.NameColumn),String)
            End Get
            Set
                Me(Me.tableProject.NameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UrlCheckContent() As String
            Get
                If Me.IsUrlCheckContentNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableProject.UrlCheckContentColumn),String)
                End If
            End Get
            Set
                Me(Me.tableProject.UrlCheckContentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TotalUrl() As Integer
            Get
                Return CType(Me(Me.tableProject.TotalUrlColumn),Integer)
            End Get
            Set
                Me(Me.tableProject.TotalUrlColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TotalUrlLeft() As Integer
            Get
                Return CType(Me(Me.tableProject.TotalUrlLeftColumn),Integer)
            End Get
            Set
                Me(Me.tableProject.TotalUrlLeftColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CrawlProjectRow() As CrawlProjectRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_PROJECT_PROJECT_C_CRAWLPRO")),CrawlProjectRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_PROJECT_PROJECT_C_CRAWLPRO"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUrlCheckContentNull() As Boolean
            Return Me.IsNull(Me.tableProject.UrlCheckContentColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUrlCheckContentNull()
            Me(Me.tableProject.UrlCheckContentColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetProject_SampleRows() As Project_SampleRow()
            If (Me.Table.ChildRelations("FK_Project_Project_Sample") Is Nothing) Then
                Return New Project_SampleRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_Project_Project_Sample")),Project_SampleRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetProject_UrlRows() As ProjectUrlRow()
            If (Me.Table.ChildRelations("FK_Project_Project_Url") Is Nothing) Then
                Return New ProjectUrlRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_Project_Project_Url")),ProjectUrlRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetLinkMappingRows() As LinkMappingRow()
            If (Me.Table.ChildRelations("FK_LINKMAPP_LINKMAPPI_PROJECT") Is Nothing) Then
                Return New LinkMappingRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_LINKMAPP_LINKMAPPI_PROJECT")),LinkMappingRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetTagLibraryRows() As TagLibraryRow()
            If (Me.Table.ChildRelations("FK_TAGLIBRA_PROJECT_T_PROJECT") Is Nothing) Then
                Return New TagLibraryRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_TAGLIBRA_PROJECT_T_PROJECT")),TagLibraryRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ProjectUrlRow
        Inherits Global.System.Data.DataRow
        
        Private tableProject_Url As Project_UrlDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableProject_Url = CType(Me.Table,Project_UrlDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UrlID() As Integer
            Get
                Return CType(Me(Me.tableProject_Url.UrlIDColumn),Integer)
            End Get
            Set
                Me(Me.tableProject_Url.UrlIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ProjectID() As Integer
            Get
                Return CType(Me(Me.tableProject_Url.ProjectIDColumn),Integer)
            End Get
            Set
                Me(Me.tableProject_Url.ProjectIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LastScraped() As Date
            Get
                Try 
                    Return CType(Me(Me.tableProject_Url.LastScrapedColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LastScraped' in table 'Project_Url' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProject_Url.LastScrapedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IsScraped() As Boolean
            Get
                Return CType(Me(Me.tableProject_Url.IsScrapedColumn),Boolean)
            End Get
            Set
                Me(Me.tableProject_Url.IsScrapedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ProjUrlID() As Integer
            Get
                Return CType(Me(Me.tableProject_Url.ProjUrlIDColumn),Integer)
            End Get
            Set
                Me(Me.tableProject_Url.ProjUrlIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LinkMappingID_FK() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableProject_Url.LinkMappingID_FKColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LinkMappingID_FK' in table 'Project_Url' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProject_Url.LinkMappingID_FKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UrlRow() As UrlRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_PROJECT__URL_PROJE_URL")),UrlRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_PROJECT__URL_PROJE_URL"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ProjectRow() As ProjectRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_Project_Project_Url")),ProjectRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_Project_Project_Url"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LinkMappingRow() As LinkMappingRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_LinkMapping_Project_Url")),LinkMappingRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_LinkMapping_Project_Url"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLastScrapedNull() As Boolean
            Return Me.IsNull(Me.tableProject_Url.LastScrapedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLastScrapedNull()
            Me(Me.tableProject_Url.LastScrapedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLinkMappingID_FKNull() As Boolean
            Return Me.IsNull(Me.tableProject_Url.LinkMappingID_FKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLinkMappingID_FKNull()
            Me(Me.tableProject_Url.LinkMappingID_FKColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ProxyRow
        Inherits Global.System.Data.DataRow
        
        Private tableProxy As ProxyDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableProxy = CType(Me.Table,ProxyDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ProxyID() As Integer
            Get
                Return CType(Me(Me.tableProxy.ProxyIDColumn),Integer)
            End Get
            Set
                Me(Me.tableProxy.ProxyIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ProxyStatusID() As Integer
            Get
                Return CType(Me(Me.tableProxy.ProxyStatusIDColumn),Integer)
            End Get
            Set
                Me(Me.tableProxy.ProxyStatusIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ProxyLink() As String
            Get
                Return CType(Me(Me.tableProxy.ProxyLinkColumn),String)
            End Get
            Set
                Me(Me.tableProxy.ProxyLinkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ProxyPort() As Integer
            Get
                Return CType(Me(Me.tableProxy.ProxyPortColumn),Integer)
            End Get
            Set
                Me(Me.tableProxy.ProxyPortColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AverageSpeed() As Integer
            Get
                Return CType(Me(Me.tableProxy.AverageSpeedColumn),Integer)
            End Get
            Set
                Me(Me.tableProxy.AverageSpeedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AveragePing() As Integer
            Get
                Return CType(Me(Me.tableProxy.AveragePingColumn),Integer)
            End Get
            Set
                Me(Me.tableProxy.AveragePingColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MaxConnection() As Integer
            Get
                Return CType(Me(Me.tableProxy.MaxConnectionColumn),Integer)
            End Get
            Set
                Me(Me.tableProxy.MaxConnectionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TotalTimeout() As Integer
            Get
                Return CType(Me(Me.tableProxy.TotalTimeoutColumn),Integer)
            End Get
            Set
                Me(Me.tableProxy.TotalTimeoutColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TotalAnonymous() As Integer
            Get
                Return CType(Me(Me.tableProxy.TotalAnonymousColumn),Integer)
            End Get
            Set
                Me(Me.tableProxy.TotalAnonymousColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ProxyStatusRow() As ProxyStatusRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_PROXY_PROXYSTAT_PROXYSTA")),ProxyStatusRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_PROXY_PROXYSTAT_PROXYSTA"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetUrlRows() As UrlRow()
            If (Me.Table.ChildRelations("FK_URL_PROXY_URL_PROXY") Is Nothing) Then
                Return New UrlRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_URL_PROXY_URL_PROXY")),UrlRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ProxyStatusRow
        Inherits Global.System.Data.DataRow
        
        Private tableProxyStatus As ProxyStatusDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableProxyStatus = CType(Me.Table,ProxyStatusDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ProxyStatusID() As Integer
            Get
                Return CType(Me(Me.tableProxyStatus.ProxyStatusIDColumn),Integer)
            End Get
            Set
                Me(Me.tableProxyStatus.ProxyStatusIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StatusName() As String
            Get
                Try 
                    Return CType(Me(Me.tableProxyStatus.StatusNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'StatusName' in table 'ProxyStatus' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProxyStatus.StatusNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StatusDescription() As String
            Get
                Try 
                    Return CType(Me(Me.tableProxyStatus.StatusDescriptionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'StatusDescription' in table 'ProxyStatus' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProxyStatus.StatusDescriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStatusNameNull() As Boolean
            Return Me.IsNull(Me.tableProxyStatus.StatusNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStatusNameNull()
            Me(Me.tableProxyStatus.StatusNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStatusDescriptionNull() As Boolean
            Return Me.IsNull(Me.tableProxyStatus.StatusDescriptionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStatusDescriptionNull()
            Me(Me.tableProxyStatus.StatusDescriptionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetProxyRows() As ProxyRow()
            If (Me.Table.ChildRelations("FK_PROXY_PROXYSTAT_PROXYSTA") Is Nothing) Then
                Return New ProxyRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_PROXY_PROXYSTAT_PROXYSTA")),ProxyRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class Project_SampleRow
        Inherits Global.System.Data.DataRow
        
        Private tableProject_Sample As Project_SampleDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableProject_Sample = CType(Me.Table,Project_SampleDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SampleID() As Integer
            Get
                Return CType(Me(Me.tableProject_Sample.SampleIDColumn),Integer)
            End Get
            Set
                Me(Me.tableProject_Sample.SampleIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SampleUrl() As String
            Get
                If Me.IsSampleUrlNull Then
                    Return Nothing
                Else
                    Return CType(Me(Me.tableProject_Sample.SampleUrlColumn),String)
                End If
            End Get
            Set
                Me(Me.tableProject_Sample.SampleUrlColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SampleText() As String
            Get
                If Me.IsSampleTextNull Then
                    Return Nothing
                Else
                    Return CType(Me(Me.tableProject_Sample.SampleTextColumn),String)
                End If
            End Get
            Set
                Me(Me.tableProject_Sample.SampleTextColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ProjectID_FK() As Integer
            Get
                Return CType(Me(Me.tableProject_Sample.ProjectID_FKColumn),Integer)
            End Get
            Set
                Me(Me.tableProject_Sample.ProjectID_FKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ProjectRow() As ProjectRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_Project_Project_Sample")),ProjectRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_Project_Project_Sample"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSampleUrlNull() As Boolean
            Return Me.IsNull(Me.tableProject_Sample.SampleUrlColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSampleUrlNull()
            Me(Me.tableProject_Sample.SampleUrlColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSampleTextNull() As Boolean
            Return Me.IsNull(Me.tableProject_Sample.SampleTextColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSampleTextNull()
            Me(Me.tableProject_Sample.SampleTextColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class UrlReferencesRow
        Inherits Global.System.Data.DataRow
        
        Private tableUrlReferences As UrlReferencesDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableUrlReferences = CType(Me.Table,UrlReferencesDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UrlRefID() As Integer
            Get
                Return CType(Me(Me.tableUrlReferences.UrlRefIDColumn),Integer)
            End Get
            Set
                Me(Me.tableUrlReferences.UrlRefIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UrlID_FK() As Integer
            Get
                Return CType(Me(Me.tableUrlReferences.UrlID_FKColumn),Integer)
            End Get
            Set
                Me(Me.tableUrlReferences.UrlID_FKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ReferingUrlID_FK() As Integer
            Get
                Return CType(Me(Me.tableUrlReferences.ReferingUrlID_FKColumn),Integer)
            End Get
            Set
                Me(Me.tableUrlReferences.ReferingUrlID_FKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UrlRowByUrl_Main() As UrlRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Url_Main")),UrlRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Url_Main"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UrlRowByUrl_Referer() As UrlRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Url_Referer")),UrlRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Url_Referer"))
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class DataTypeRow
        Inherits Global.System.Data.DataRow
        
        Private tableDataType As DataTypeDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableDataType = CType(Me.Table,DataTypeDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DataTypeID() As Integer
            Get
                Return CType(Me(Me.tableDataType.DataTypeIDColumn),Integer)
            End Get
            Set
                Me(Me.tableDataType.DataTypeIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DataTypeName() As String
            Get
                Try 
                    Return CType(Me(Me.tableDataType.DataTypeNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DataTypeName' in table 'DataType' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataType.DataTypeNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DataTypeCode() As String
            Get
                Try 
                    Return CType(Me(Me.tableDataType.DataTypeCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DataTypeCode' in table 'DataType' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDataType.DataTypeCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDataTypeNameNull() As Boolean
            Return Me.IsNull(Me.tableDataType.DataTypeNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDataTypeNameNull()
            Me(Me.tableDataType.DataTypeNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDataTypeCodeNull() As Boolean
            Return Me.IsNull(Me.tableDataType.DataTypeCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDataTypeCodeNull()
            Me(Me.tableDataType.DataTypeCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetTagLibraryRows() As TagLibraryRow()
            If (Me.Table.ChildRelations("FK_DataType_TagLibrary") Is Nothing) Then
                Return New TagLibraryRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_DataType_TagLibrary")),TagLibraryRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class CrawlClientRow
        Inherits Global.System.Data.DataRow
        
        Private tableCrawlClient As CrawlClientDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCrawlClient = CType(Me.Table,CrawlClientDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClientID() As Integer
            Get
                Return CType(Me(Me.tableCrawlClient.ClientIDColumn),Integer)
            End Get
            Set
                Me(Me.tableCrawlClient.ClientIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClientIP() As String
            Get
                Return CType(Me(Me.tableCrawlClient.ClientIPColumn),String)
            End Get
            Set
                Me(Me.tableCrawlClient.ClientIPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClientComputerName() As String
            Get
                Try 
                    Return CType(Me(Me.tableCrawlClient.ClientComputerNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ClientComputerName' in table 'CrawlClient' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCrawlClient.ClientComputerNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClientPassword() As String
            Get
                Try 
                    Return CType(Me(Me.tableCrawlClient.ClientPasswordColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ClientPassword' in table 'CrawlClient' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCrawlClient.ClientPasswordColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsClientComputerNameNull() As Boolean
            Return Me.IsNull(Me.tableCrawlClient.ClientComputerNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetClientComputerNameNull()
            Me(Me.tableCrawlClient.ClientComputerNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsClientPasswordNull() As Boolean
            Return Me.IsNull(Me.tableCrawlClient.ClientPasswordColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetClientPasswordNull()
            Me(Me.tableCrawlClient.ClientPasswordColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetUrlRows() As UrlRow()
            If (Me.Table.ChildRelations("FK_CrawlClient_Url") Is Nothing) Then
                Return New UrlRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_CrawlClient_Url")),UrlRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class CronRow
        Inherits Global.System.Data.DataRow
        
        Private tableCron As CronDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCron = CType(Me.Table,CronDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CronID() As Integer
            Get
                Return CType(Me(Me.tableCron.CronIDColumn),Integer)
            End Get
            Set
                Me(Me.tableCron.CronIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CrawlProjectID_FK() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCron.CrawlProjectID_FKColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CrawlProjectID_FK' in table 'Cron' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCron.CrawlProjectID_FKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CronName() As String
            Get
                If Me.IsCronNameNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableCron.CronNameColumn),String)
                End If
            End Get
            Set
                Me(Me.tableCron.CronNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Duration() As Integer
            Get
                Return CType(Me(Me.tableCron.DurationColumn),Integer)
            End Get
            Set
                Me(Me.tableCron.DurationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Minute() As String
            Get
                Return CType(Me(Me.tableCron.MinuteColumn),String)
            End Get
            Set
                Me(Me.tableCron.MinuteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Hour() As String
            Get
                Return CType(Me(Me.tableCron.HourColumn),String)
            End Get
            Set
                Me(Me.tableCron.HourColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateOfMonth() As String
            Get
                Try 
                    Return CType(Me(Me.tableCron.DateOfMonthColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DateOfMonth' in table 'Cron' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCron.DateOfMonthColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Month() As String
            Get
                Try 
                    Return CType(Me(Me.tableCron.MonthColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Month' in table 'Cron' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCron.MonthColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DayOfWeek() As String
            Get
                Try 
                    Return CType(Me(Me.tableCron.DayOfWeekColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DayOfWeek' in table 'Cron' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCron.DayOfWeekColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CrawlProjectRow() As CrawlProjectRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_CrawlProject_Cron")),CrawlProjectRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_CrawlProject_Cron"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCrawlProjectID_FKNull() As Boolean
            Return Me.IsNull(Me.tableCron.CrawlProjectID_FKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCrawlProjectID_FKNull()
            Me(Me.tableCron.CrawlProjectID_FKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCronNameNull() As Boolean
            Return Me.IsNull(Me.tableCron.CronNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCronNameNull()
            Me(Me.tableCron.CronNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateOfMonthNull() As Boolean
            Return Me.IsNull(Me.tableCron.DateOfMonthColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateOfMonthNull()
            Me(Me.tableCron.DateOfMonthColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMonthNull() As Boolean
            Return Me.IsNull(Me.tableCron.MonthColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMonthNull()
            Me(Me.tableCron.MonthColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDayOfWeekNull() As Boolean
            Return Me.IsNull(Me.tableCron.DayOfWeekColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDayOfWeekNull()
            Me(Me.tableCron.DayOfWeekColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class TagLibraryRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As TagLibraryRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As TagLibraryRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As TagLibraryRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class UrlRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As UrlRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As UrlRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As UrlRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class CrawlProjectRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As CrawlProjectRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As CrawlProjectRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As CrawlProjectRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class UrlStatusRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As UrlStatusRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As UrlStatusRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As UrlStatusRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class LinkMappingRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As LinkMappingRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As LinkMappingRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As LinkMappingRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ProjectRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ProjectRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ProjectRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ProjectRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Project_UrlRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ProjectUrlRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ProjectUrlRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ProjectUrlRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ProxyRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ProxyRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ProxyRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ProxyRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ProxyStatusRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ProxyStatusRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ProxyStatusRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ProxyStatusRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class Project_SampleRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As Project_SampleRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As Project_SampleRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As Project_SampleRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class UrlReferencesRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As UrlReferencesRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As UrlReferencesRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As UrlReferencesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class DataTypeRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As DataTypeRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As DataTypeRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As DataTypeRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class CrawlClientRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As CrawlClientRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As CrawlClientRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As CrawlClientRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class CronRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As CronRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As CronRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As CronRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
