'The following code was generated by Microsoft Visual Studio 2005.
'The test owner should check each test for validity.
Imports Microsoft.VisualStudio.TestTools.UnitTesting
Imports System
Imports System.Text
Imports System.Collections.Generic
Imports ScraperLib.DataManagement
Imports System.Data
Imports ScraperLib






'''<summary>
'''This is a test class for ScraperLib.DataManagement.SqlExpress and is intended
'''to contain all ScraperLib.DataManagement.SqlExpress Unit Tests
'''</summary>
<TestClass()> _
Public Class SqlExpressTest

   Private Shared tran As SqlClient.SqlTransaction
   Private Shared conn As SqlClient.SqlConnection
   Private testContextInstance As TestContext

   '''<summary>
   '''Gets or sets the test context which provides
   '''information about and functionality for the current test run.
   '''</summary>
   Public Property TestContext() As TestContext
      Get
         Return testContextInstance
      End Get
      Set(ByVal value As TestContext)
         testContextInstance = value
      End Set
   End Property

#Region "Additional test attributes"
   '
   'You can use the following additional attributes as you write your tests:
   '
   'Use ClassInitialize to run code before running the first test in the class
   '
   <ClassInitialize()> _
   Public Shared Sub MyClassInitialize(ByVal testContext As TestContext)
      conn = New Data.SqlClient.SqlConnection(My.Settings.SqlConnString)
      conn.Open()
   End Sub
   '
   'Use ClassCleanup to run code after all tests in a class have run
   '
   '<ClassCleanup()> _
   'Public Shared Sub MyClassCleanup()
   'End Sub
   '
   'Use TestInitialize to run code before running each test
   '
   <TestInitialize()> _
   Public Sub MyTestInitialize()
      tran = conn.BeginTransaction("test")
      Dim target As SQLDDL = New SQLDDL
      target.SqlConnection = conn
      target.trans = tran

      Dim dt As DataTable = Me.getDT  'TODO: Initialize to an appropriate value
      Dim actual As Boolean
      actual = target.CreateTable(dt)
   End Sub

   '
   'Use TestCleanup to run code after each test has run
   '
   <TestCleanup()> _
   Public Sub MyTestCleanup()
      tran.Rollback()
   End Sub
#End Region

   Private Function getDT() As DataTable
      Dim dt As New DataTable("TestTable")
      dt.Columns.Add("ID", GetType(Integer))

      dt.Columns.Add("identifier1", GetType(String))
      dt.Columns.Add("identifier2", GetType(String))

      dt.Columns.Add("checksum1")
      dt.Columns.Add("checksum2")
      dt.Columns.Add("checksum3")

      Dim ids() As DataColumn = New DataColumn() {dt.Columns(1), dt.Columns(2)}

      dt.Columns(0).AutoIncrement = True
      dt.Columns(0).AutoIncrementSeed = -1
      dt.Columns(0).AutoIncrementStep = -1

      Dim uniqueCon As New Data.UniqueConstraint("identifier", ids, False)

      dt.Constraints.Add("PK", dt.Columns(0), True)
      dt.Constraints.Add(uniqueCon)

      Return dt
   End Function

   '''<summary>
   '''A test for updateData(ByVal System.Data.DataTable)
   '''</summary>
   <TestMethod()> _
   Public Sub updateDataTest()
      Dim target As SqlExpress = New SqlExpress
      target.SqlConnection = conn
      target.trans = tran

      Dim dt As DataTable = Me.getDT

      Dim uniqueConstraint As Data.UniqueConstraint = CType(dt.Constraints(SqlExpress.IDENTIFIER), Data.UniqueConstraint)
      Dim colList As New List(Of DataColumn)
      For Each col As DataColumn In uniqueConstraint.Columns
         colList.Add(col)
      Next


      ' Create temp data.
      For i As Integer = 0 To 10
         Dim row As DataRow = dt.NewRow

         For j As Integer = 1 To 5
            row(j) = String.Format("Row: {0}-{1}", i, j)
         Next

         dt.Rows.Add(row)
      Next

      target.updateData(dt, colList)

      Assert.AreEqual(dt.Rows.Count, target.getRowCount(dt.TableName), "Did not inserted all rows")

      ' Create identical data - this should call update
      dt = Me.getDT
      ' Create temp data.
      For i As Integer = 0 To 15
         Dim row As DataRow = dt.NewRow

         For j As Integer = 1 To 5
            row(j) = String.Format("Row: {0}-{1}", i, j)
         Next

         For j As Integer = 3 To 5
            row(j) = String.Format("ChangedRow: {0}-{1}", i, j)
         Next

         dt.Rows.Add(row)
         row.AcceptChanges()

         If i > 10 Then
            row.SetAdded()
         Else
            row.SetModified()
         End If
      Next

      target.updateData(dt, colList)

      ' Make sure it gets the generated numbers from the database.
      For Each row As DataRow In dt.Rows
         Assert.AreEqual(True, CType(row(0), Int32) > 0, "Update() did not updated the data row's primary key")
      Next

      Assert.AreEqual(dt.Rows.Count, target.getRowCount(dt.TableName), "Did not inserted all rows")

      ' Testing adding row with error!
      For i As Integer = 0 To 2
         Dim row As DataRow = dt.NewRow

         For j As Integer = 1 To 5
            row(j) = String.Format("Row: {0}-{1}", i, j)
         Next

         Try
            dt.Rows.Add(row)
         Catch ex As Data.ConstraintException
            Console.WriteLine("Constraint Error: " & ex.Message)
            Console.WriteLine(ex.StackTrace)
         Catch ex As Exception
            Console.WriteLine(ex.Message)
            Console.WriteLine(ex.StackTrace)
         End Try
      Next

      ' Test select query

   End Sub

   '''<summary>
   '''A test for isNewDataRow(ByVal System.Data.DataRow)
   '''</summary>
   <TestMethod()> _
   Public Sub isNewDataRowTest()
      Dim target As SqlExpress = New SqlExpress
      target.SqlConnection = conn
      target.trans = tran

      Dim dt As DataTable = Me.getDT

      Dim uniqueConstraint As Data.UniqueConstraint = CType(dt.Constraints(SqlExpress.IDENTIFIER), Data.UniqueConstraint)
      Dim colList As New List(Of DataColumn)
      For Each col As DataColumn In uniqueConstraint.Columns
         colList.Add(col)
      Next

      ' Create temp data.
      For i As Integer = 0 To 10
         Dim row As DataRow = dt.NewRow

         For j As Integer = 1 To 5
            row(j) = String.Format("Row: {0}-{1}", i, j)
         Next

         dt.Rows.Add(row)
         Assert.AreEqual(True, target.isNewDataRow(row, colList))
      Next

      target.updateData(dt, colList)

      ' Create temp data.
      For Each row As DataRow In dt.Rows
         Assert.AreEqual(False, target.isNewDataRow(row, colList))            ' not new
         Assert.AreEqual(False, target.isChangedDataRow(row))        ' not changed

         ' Change the row
         For j As Integer = 3 To 5
            row(j) = String.Format("Row: {0}-{1}", -1, j)
         Next

         Assert.AreEqual(True, target.isChangedDataRow(row))
      Next

      target.updateData(dt, colList)
   End Sub
End Class
