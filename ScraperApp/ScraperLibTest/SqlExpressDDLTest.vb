'The following code was generated by Microsoft Visual Studio 2005.
'The test owner should check each test for validity.
Imports Microsoft.VisualStudio.TestTools.UnitTesting
Imports System
Imports System.Text
Imports System.Collections.Generic
Imports ScraperLib
Imports ScraperLibTest
Imports System.Data







'''<summary>
'''This is a test class for ScraperLib.SQLDDL and is intended
'''to contain all ScraperLib.SQLDDL Unit Tests
'''</summary>
<TestClass()> _
Public Class SQLDDLTest


   Private Shared tran As SqlClient.SqlTransaction
   Private Shared conn As SqlClient.SqlConnection
   Private testContextInstance As TestContext

   '''<summary>
   '''Gets or sets the test context which provides
   '''information about and functionality for the current test run.
   '''</summary>
   Public Property TestContext() As TestContext
      Get
         Return testContextInstance
      End Get
      Set(ByVal value As TestContext)
         testContextInstance = value
      End Set
   End Property

#Region "Additional test attributes"
   '
   'You can use the following additional attributes as you write your tests:
   '
   'Use ClassInitialize to run code before running the first test in the class
   '
   <ClassInitialize()> _
   Public Shared Sub MyClassInitialize(ByVal testContext As TestContext)
      conn = New Data.SqlClient.SqlConnection(My.Settings.SqlConnString)
      conn.Open()
   End Sub
   '
   'Use ClassCleanup to run code after all tests in a class have run
   '
   '<ClassCleanup()> _
   'Public Shared Sub MyClassCleanup()
   'End Sub
   '
   'Use TestInitialize to run code before running each test
   '
   <TestInitialize()> _
   Public Sub MyTestInitialize()
      tran = conn.BeginTransaction("test")
   End Sub

   '
   'Use TestCleanup to run code after each test has run
   '
   <TestCleanup()> _
   Public Sub MyTestCleanup()
      tran.Rollback()
   End Sub
#End Region


   Private Function getDT() As DataTable
      Dim dt As New DataTable("TestTable")
      dt.Columns.Add("ID", GetType(Integer))

      dt.Columns.Add("identifier1", GetType(String))
      dt.Columns.Add("identifier2", GetType(String))

      dt.Columns.Add("checksum1")
      dt.Columns.Add("checksum2")
      dt.Columns.Add("checksum3")

      Dim ids() As DataColumn = New DataColumn() {dt.Columns(1), dt.Columns(2)}

      Dim uniqueCon As New Data.UniqueConstraint("identifier", ids, False)

      dt.Constraints.Add("PK", dt.Columns(0), True)
      dt.Constraints.Add(uniqueCon)

      Return dt
   End Function

   '''<summary>
   '''A test for getCreateTableSQL(ByVal System.Data.DataTable)
   '''</summary>
   <TestMethod()> _
   Public Sub getCreateTableSQLTest()
      Dim target As SQLDDL = New SQLDDL

      Dim dt As DataTable = Me.getDT  'TODO: Initialize to an appropriate value

      Dim expected As String = My.Resources.sqlExpressCreateTable
      Dim actual As String

      actual = SQLDDL.getCreateTableSQL(dt)

      'Assert.AreEqual(expected, actual, "ScraperLib.SQLDDL.getCreateTableSQL did not return the expected value.")
   End Sub

   '''<summary>
   '''A test for CreateTable(ByVal System.Data.DataTable)
   '''</summary>
   <TestMethod()> _
   Public Sub CreateTableTest()
      Dim target As SQLDDL = New SQLDDL
      target.SqlConnection = conn
      target.trans = tran

      Dim dt As DataTable = Me.getDT  'TODO: Initialize to an appropriate value

      Dim expected As Boolean = True
      Dim actual As Boolean

      actual = target.CreateTable(dt)
      Assert.AreEqual(expected, actual, "ScraperLib.SQLDDL.CreateTable did not return the expected value.")

      ' See if the datatable exits
      actual = target.IsTableExists(dt.TableName)
      Assert.AreEqual(expected, actual, "ScraperLib.SQLDDL.IsTableExists did not return the expected value.")

      Dim fields As List(Of String) = target.getFields(dt.TableName)
      Assert.AreEqual(6, fields.Count, "ScraperLib.SQLDDL.getFields did not return the expected value.")

      ' Test is exists
      For Each col As DataColumn In dt.Columns
         Assert.AreEqual(True, target.IsFieldExists(dt.TableName, col.ColumnName), "ScraperLib.SQLDDL.IsFieldExists did not return the expected value.")
      Next

      Assert.AreEqual(False, target.IsFieldExists(dt.TableName, "Lame"))

      ' Drop the table
      actual = target.DropTable(dt.TableName)
      Assert.AreEqual(expected, actual, "ScraperLib.SQLDDL.DropTable did not return the expected value.")

      ' Drop the table
      actual = target.DropTable(dt.TableName)
      Assert.AreEqual(False, actual, "ScraperLib.SQLDDL.DropTable did not return the expected value.")

      actual = target.IsTableExists(dt.TableName)
      Assert.AreEqual(False, actual, "ScraperLib.SQLDDL.IsTableExists did not return the expected value.")
   End Sub

   '''<summary>
   '''A test for IsTableExists(ByVal String)
   '''</summary>
   <TestMethod()> _
   Public Sub IsTableExistsTest()
      Dim target As SQLDDL = New SQLDDL
      target.SqlConnection = conn
      target.trans = tran

      Dim tableName As String = "Url" 'TODO: Initialize to an appropriate value

      Dim expected As Boolean = True
      Dim actual As Boolean

      actual = target.IsTableExists(tableName)

      Assert.AreEqual(expected, actual, "ScraperLib.SQLDDL.IsTableExists did not return the expected value.")
   End Sub
End Class
