'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.42
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System


<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.ComponentModel.ToolboxItem(true),  _
 System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 System.Xml.Serialization.XmlRootAttribute("ScraperDB"),  _
 System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class ScraperDB
    Inherits System.Data.DataSet
    
    Private tableUrlLog As UrlLogDataTable
    
    Private tableProxy As ProxyDataTable
    
    Private tableProxyStatus As ProxyStatusDataTable
    
    Private tableReports As ReportsDataTable
    
    Private tableTagLibrary As TagLibraryDataTable
    
    Private tableUrl As UrlDataTable
    
    Private tableUrlStatus As UrlStatusDataTable
    
    Private tableProject As ProjectDataTable
    
    Private relationFK_URL_PROJECT_S_PROJECT As System.Data.DataRelation
    
    Private relationFK_URLLOG_PROXY_URL_PROXY As System.Data.DataRelation
    
    Private relationFK_URLLOG_URL_URLLO_URL As System.Data.DataRelation
    
    Private relationFK_TAGLIBRA_PARENTTAG_TAGLIBRA As System.Data.DataRelation
    
    Private relationFK_TAGLIBRA_PROJECT_T_PROJECT As System.Data.DataRelation
    
    Private relationFK_REPORTS_PROJECT_R_PROJECT As System.Data.DataRelation
    
    Private _schemaSerializationMode As System.Data.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("UrlLog")) Is Nothing) Then
                MyBase.Tables.Add(New UrlLogDataTable(ds.Tables("UrlLog")))
            End If
            If (Not (ds.Tables("Proxy")) Is Nothing) Then
                MyBase.Tables.Add(New ProxyDataTable(ds.Tables("Proxy")))
            End If
            If (Not (ds.Tables("ProxyStatus")) Is Nothing) Then
                MyBase.Tables.Add(New ProxyStatusDataTable(ds.Tables("ProxyStatus")))
            End If
            If (Not (ds.Tables("Reports")) Is Nothing) Then
                MyBase.Tables.Add(New ReportsDataTable(ds.Tables("Reports")))
            End If
            If (Not (ds.Tables("TagLibrary")) Is Nothing) Then
                MyBase.Tables.Add(New TagLibraryDataTable(ds.Tables("TagLibrary")))
            End If
            If (Not (ds.Tables("Url")) Is Nothing) Then
                MyBase.Tables.Add(New UrlDataTable(ds.Tables("Url")))
            End If
            If (Not (ds.Tables("UrlStatus")) Is Nothing) Then
                MyBase.Tables.Add(New UrlStatusDataTable(ds.Tables("UrlStatus")))
            End If
            If (Not (ds.Tables("Project")) Is Nothing) Then
                MyBase.Tables.Add(New ProjectDataTable(ds.Tables("Project")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property UrlLog() As UrlLogDataTable
        Get
            Return Me.tableUrlLog
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Proxy() As ProxyDataTable
        Get
            Return Me.tableProxy
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ProxyStatus() As ProxyStatusDataTable
        Get
            Return Me.tableProxyStatus
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Reports() As ReportsDataTable
        Get
            Return Me.tableReports
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property TagLibrary() As TagLibraryDataTable
        Get
            Return Me.tableTagLibrary
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Url() As UrlDataTable
        Get
            Return Me.tableUrl
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property UrlStatus() As UrlStatusDataTable
        Get
            Return Me.tableUrlStatus
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Project() As ProjectDataTable
        Get
            Return Me.tableProject
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.BrowsableAttribute(true),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As System.Data.DataSet
        Dim cln As ScraperDB = CType(MyBase.Clone,ScraperDB)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("UrlLog")) Is Nothing) Then
                MyBase.Tables.Add(New UrlLogDataTable(ds.Tables("UrlLog")))
            End If
            If (Not (ds.Tables("Proxy")) Is Nothing) Then
                MyBase.Tables.Add(New ProxyDataTable(ds.Tables("Proxy")))
            End If
            If (Not (ds.Tables("ProxyStatus")) Is Nothing) Then
                MyBase.Tables.Add(New ProxyStatusDataTable(ds.Tables("ProxyStatus")))
            End If
            If (Not (ds.Tables("Reports")) Is Nothing) Then
                MyBase.Tables.Add(New ReportsDataTable(ds.Tables("Reports")))
            End If
            If (Not (ds.Tables("TagLibrary")) Is Nothing) Then
                MyBase.Tables.Add(New TagLibraryDataTable(ds.Tables("TagLibrary")))
            End If
            If (Not (ds.Tables("Url")) Is Nothing) Then
                MyBase.Tables.Add(New UrlDataTable(ds.Tables("Url")))
            End If
            If (Not (ds.Tables("UrlStatus")) Is Nothing) Then
                MyBase.Tables.Add(New UrlStatusDataTable(ds.Tables("UrlStatus")))
            End If
            If (Not (ds.Tables("Project")) Is Nothing) Then
                MyBase.Tables.Add(New ProjectDataTable(ds.Tables("Project")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableUrlLog = CType(MyBase.Tables("UrlLog"),UrlLogDataTable)
        If (initTable = true) Then
            If (Not (Me.tableUrlLog) Is Nothing) Then
                Me.tableUrlLog.InitVars
            End If
        End If
        Me.tableProxy = CType(MyBase.Tables("Proxy"),ProxyDataTable)
        If (initTable = true) Then
            If (Not (Me.tableProxy) Is Nothing) Then
                Me.tableProxy.InitVars
            End If
        End If
        Me.tableProxyStatus = CType(MyBase.Tables("ProxyStatus"),ProxyStatusDataTable)
        If (initTable = true) Then
            If (Not (Me.tableProxyStatus) Is Nothing) Then
                Me.tableProxyStatus.InitVars
            End If
        End If
        Me.tableReports = CType(MyBase.Tables("Reports"),ReportsDataTable)
        If (initTable = true) Then
            If (Not (Me.tableReports) Is Nothing) Then
                Me.tableReports.InitVars
            End If
        End If
        Me.tableTagLibrary = CType(MyBase.Tables("TagLibrary"),TagLibraryDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTagLibrary) Is Nothing) Then
                Me.tableTagLibrary.InitVars
            End If
        End If
        Me.tableUrl = CType(MyBase.Tables("Url"),UrlDataTable)
        If (initTable = true) Then
            If (Not (Me.tableUrl) Is Nothing) Then
                Me.tableUrl.InitVars
            End If
        End If
        Me.tableUrlStatus = CType(MyBase.Tables("UrlStatus"),UrlStatusDataTable)
        If (initTable = true) Then
            If (Not (Me.tableUrlStatus) Is Nothing) Then
                Me.tableUrlStatus.InitVars
            End If
        End If
        Me.tableProject = CType(MyBase.Tables("Project"),ProjectDataTable)
        If (initTable = true) Then
            If (Not (Me.tableProject) Is Nothing) Then
                Me.tableProject.InitVars
            End If
        End If
        Me.relationFK_URL_PROJECT_S_PROJECT = Me.Relations("FK_URL_PROJECT_S_PROJECT")
        Me.relationFK_URLLOG_PROXY_URL_PROXY = Me.Relations("FK_URLLOG_PROXY_URL_PROXY")
        Me.relationFK_URLLOG_URL_URLLO_URL = Me.Relations("FK_URLLOG_URL_URLLO_URL")
        Me.relationFK_TAGLIBRA_PARENTTAG_TAGLIBRA = Me.Relations("FK_TAGLIBRA_PARENTTAG_TAGLIBRA")
        Me.relationFK_TAGLIBRA_PROJECT_T_PROJECT = Me.Relations("FK_TAGLIBRA_PROJECT_T_PROJECT")
        Me.relationFK_REPORTS_PROJECT_R_PROJECT = Me.Relations("FK_REPORTS_PROJECT_R_PROJECT")
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "ScraperDB"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/SS.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableUrlLog = New UrlLogDataTable
        MyBase.Tables.Add(Me.tableUrlLog)
        Me.tableProxy = New ProxyDataTable
        MyBase.Tables.Add(Me.tableProxy)
        Me.tableProxyStatus = New ProxyStatusDataTable
        MyBase.Tables.Add(Me.tableProxyStatus)
        Me.tableReports = New ReportsDataTable
        MyBase.Tables.Add(Me.tableReports)
        Me.tableTagLibrary = New TagLibraryDataTable
        MyBase.Tables.Add(Me.tableTagLibrary)
        Me.tableUrl = New UrlDataTable
        MyBase.Tables.Add(Me.tableUrl)
        Me.tableUrlStatus = New UrlStatusDataTable
        MyBase.Tables.Add(Me.tableUrlStatus)
        Me.tableProject = New ProjectDataTable
        MyBase.Tables.Add(Me.tableProject)
        Dim fkc As System.Data.ForeignKeyConstraint
        fkc = New System.Data.ForeignKeyConstraint("FK_URL_PROJECT_S_PROJECT", New System.Data.DataColumn() {Me.tableProject.ProjectIDColumn}, New System.Data.DataColumn() {Me.tableUrl.ProjectIDColumn})
        Me.tableUrl.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        Me.relationFK_URL_PROJECT_S_PROJECT = New System.Data.DataRelation("FK_URL_PROJECT_S_PROJECT", New System.Data.DataColumn() {Me.tableProject.ProjectIDColumn}, New System.Data.DataColumn() {Me.tableUrl.ProjectIDColumn}, false)
        Me.Relations.Add(Me.relationFK_URL_PROJECT_S_PROJECT)
        Me.relationFK_URLLOG_PROXY_URL_PROXY = New System.Data.DataRelation("FK_URLLOG_PROXY_URL_PROXY", New System.Data.DataColumn() {Me.tableProxy.ProxyIDColumn}, New System.Data.DataColumn() {Me.tableUrlLog.ProxyIDColumn}, false)
        Me.Relations.Add(Me.relationFK_URLLOG_PROXY_URL_PROXY)
        Me.relationFK_URLLOG_URL_URLLO_URL = New System.Data.DataRelation("FK_URLLOG_URL_URLLO_URL", New System.Data.DataColumn() {Me.tableUrl.UrlIDColumn}, New System.Data.DataColumn() {Me.tableUrlLog.UrlIDColumn}, false)
        Me.Relations.Add(Me.relationFK_URLLOG_URL_URLLO_URL)
        Me.relationFK_TAGLIBRA_PARENTTAG_TAGLIBRA = New System.Data.DataRelation("FK_TAGLIBRA_PARENTTAG_TAGLIBRA", New System.Data.DataColumn() {Me.tableTagLibrary.TagIDColumn}, New System.Data.DataColumn() {Me.tableTagLibrary.Parent_TagIDColumn}, false)
        Me.Relations.Add(Me.relationFK_TAGLIBRA_PARENTTAG_TAGLIBRA)
        Me.relationFK_TAGLIBRA_PROJECT_T_PROJECT = New System.Data.DataRelation("FK_TAGLIBRA_PROJECT_T_PROJECT", New System.Data.DataColumn() {Me.tableProject.ProjectIDColumn}, New System.Data.DataColumn() {Me.tableTagLibrary.ProjectIDColumn}, false)
        Me.Relations.Add(Me.relationFK_TAGLIBRA_PROJECT_T_PROJECT)
        Me.relationFK_REPORTS_PROJECT_R_PROJECT = New System.Data.DataRelation("FK_REPORTS_PROJECT_R_PROJECT", New System.Data.DataColumn() {Me.tableProject.ProjectIDColumn}, New System.Data.DataColumn() {Me.tableReports.ProjectIDColumn}, false)
        Me.Relations.Add(Me.relationFK_REPORTS_PROJECT_R_PROJECT)
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeUrlLog() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeProxy() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeProxyStatus() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeReports() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeTagLibrary() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeUrl() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeUrlStatus() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeProject() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
        Dim ds As ScraperDB = New ScraperDB
        Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
        xs.Add(ds.GetSchemaSerializable)
        Dim any As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Return type
    End Function
    
    Public Delegate Sub UrlLogRowChangeEventHandler(ByVal sender As Object, ByVal e As UrlLogRowChangeEvent)
    
    Public Delegate Sub ProxyRowChangeEventHandler(ByVal sender As Object, ByVal e As ProxyRowChangeEvent)
    
    Public Delegate Sub ProxyStatusRowChangeEventHandler(ByVal sender As Object, ByVal e As ProxyStatusRowChangeEvent)
    
    Public Delegate Sub ReportsRowChangeEventHandler(ByVal sender As Object, ByVal e As ReportsRowChangeEvent)
    
    Public Delegate Sub TagLibraryRowChangeEventHandler(ByVal sender As Object, ByVal e As TagLibraryRowChangeEvent)
    
    Public Delegate Sub UrlRowChangeEventHandler(ByVal sender As Object, ByVal e As UrlRowChangeEvent)
    
    Public Delegate Sub UrlStatusRowChangeEventHandler(ByVal sender As Object, ByVal e As UrlStatusRowChangeEvent)
    
    Public Delegate Sub ProjectRowChangeEventHandler(ByVal sender As Object, ByVal e As ProjectRowChangeEvent)
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class UrlLogDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnUrlID As System.Data.DataColumn
        
        Private columnProxyID As System.Data.DataColumn
        
        Private columnMessage As System.Data.DataColumn
        
        Private columnErrorCode As System.Data.DataColumn
        
        Private columnDateScraped As System.Data.DataColumn
        
        Private columnDateModified As System.Data.DataColumn
        
        Private columnContent As System.Data.DataColumn
        
        Private columnUrlLogID As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "UrlLog"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UrlIDColumn() As System.Data.DataColumn
            Get
                Return Me.columnUrlID
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ProxyIDColumn() As System.Data.DataColumn
            Get
                Return Me.columnProxyID
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MessageColumn() As System.Data.DataColumn
            Get
                Return Me.columnMessage
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ErrorCodeColumn() As System.Data.DataColumn
            Get
                Return Me.columnErrorCode
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateScrapedColumn() As System.Data.DataColumn
            Get
                Return Me.columnDateScraped
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateModifiedColumn() As System.Data.DataColumn
            Get
                Return Me.columnDateModified
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ContentColumn() As System.Data.DataColumn
            Get
                Return Me.columnContent
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UrlLogIDColumn() As System.Data.DataColumn
            Get
                Return Me.columnUrlLogID
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As UrlLogRow
            Get
                Return CType(Me.Rows(index),UrlLogRow)
            End Get
        End Property
        
        Public Event UrlLogRowChanging As UrlLogRowChangeEventHandler
        
        Public Event UrlLogRowChanged As UrlLogRowChangeEventHandler
        
        Public Event UrlLogRowDeleting As UrlLogRowChangeEventHandler
        
        Public Event UrlLogRowDeleted As UrlLogRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddUrlLogRow(ByVal row As UrlLogRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddUrlLogRow(ByVal parentUrlRowByFK_URLLOG_URL_URLLO_URL As UrlRow, ByVal parentProxyRowByFK_URLLOG_PROXY_URL_PROXY As ProxyRow, ByVal Message As String, ByVal ErrorCode As Integer, ByVal DateScraped As Date, ByVal DateModified As Date, ByVal Content As String) As UrlLogRow
            Dim rowUrlLogRow As UrlLogRow = CType(Me.NewRow,UrlLogRow)
            rowUrlLogRow.ItemArray = New Object() {parentUrlRowByFK_URLLOG_URL_URLLO_URL(0), parentProxyRowByFK_URLLOG_PROXY_URL_PROXY(0), Message, ErrorCode, DateScraped, DateModified, Content, Nothing}
            Me.Rows.Add(rowUrlLogRow)
            Return rowUrlLogRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByUrlIDProxyIDUrlLogID(ByVal UrlID As Integer, ByVal ProxyID As Integer, ByVal UrlLogID As Integer) As UrlLogRow
            Return CType(Me.Rows.Find(New Object() {UrlID, ProxyID, UrlLogID}),UrlLogRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As UrlLogDataTable = CType(MyBase.Clone,UrlLogDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New UrlLogDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnUrlID = MyBase.Columns("UrlID")
            Me.columnProxyID = MyBase.Columns("ProxyID")
            Me.columnMessage = MyBase.Columns("Message")
            Me.columnErrorCode = MyBase.Columns("ErrorCode")
            Me.columnDateScraped = MyBase.Columns("DateScraped")
            Me.columnDateModified = MyBase.Columns("DateModified")
            Me.columnContent = MyBase.Columns("Content")
            Me.columnUrlLogID = MyBase.Columns("UrlLogID")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnUrlID = New System.Data.DataColumn("UrlID", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUrlID)
            Me.columnProxyID = New System.Data.DataColumn("ProxyID", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProxyID)
            Me.columnMessage = New System.Data.DataColumn("Message", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMessage)
            Me.columnErrorCode = New System.Data.DataColumn("ErrorCode", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnErrorCode)
            Me.columnDateScraped = New System.Data.DataColumn("DateScraped", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateScraped)
            Me.columnDateModified = New System.Data.DataColumn("DateModified", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateModified)
            Me.columnContent = New System.Data.DataColumn("Content", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnContent)
            Me.columnUrlLogID = New System.Data.DataColumn("UrlLogID", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUrlLogID)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnUrlID, Me.columnProxyID, Me.columnUrlLogID}, true))
            Me.columnUrlID.AllowDBNull = false
            Me.columnProxyID.AllowDBNull = false
            Me.columnMessage.AllowDBNull = false
            Me.columnMessage.MaxLength = 2147483647
            Me.columnErrorCode.AllowDBNull = false
            Me.columnDateScraped.AllowDBNull = false
            Me.columnDateModified.AllowDBNull = false
            Me.columnContent.MaxLength = 2147483647
            Me.columnUrlLogID.AutoIncrement = true
            Me.columnUrlLogID.AllowDBNull = false
            Me.columnUrlLogID.ReadOnly = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewUrlLogRow() As UrlLogRow
            Return CType(Me.NewRow,UrlLogRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New UrlLogRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(UrlLogRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.UrlLogRowChangedEvent) Is Nothing) Then
                RaiseEvent UrlLogRowChanged(Me, New UrlLogRowChangeEvent(CType(e.Row,UrlLogRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.UrlLogRowChangingEvent) Is Nothing) Then
                RaiseEvent UrlLogRowChanging(Me, New UrlLogRowChangeEvent(CType(e.Row,UrlLogRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.UrlLogRowDeletedEvent) Is Nothing) Then
                RaiseEvent UrlLogRowDeleted(Me, New UrlLogRowChangeEvent(CType(e.Row,UrlLogRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.UrlLogRowDeletingEvent) Is Nothing) Then
                RaiseEvent UrlLogRowDeleting(Me, New UrlLogRowChangeEvent(CType(e.Row,UrlLogRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveUrlLogRow(ByVal row As UrlLogRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As ScraperDB = New ScraperDB
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "UrlLogDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ProxyDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnProxyID As System.Data.DataColumn
        
        Private columnProxyLink As System.Data.DataColumn
        
        Private columnProxyPort As System.Data.DataColumn
        
        Private columnAverageSpeed As System.Data.DataColumn
        
        Private columnAveragePing As System.Data.DataColumn
        
        Private columnMaxConnection As System.Data.DataColumn
        
        Private columnTotalTimeout As System.Data.DataColumn
        
        Private columnTotalAnonymous As System.Data.DataColumn
        
        Private columnProxyStatusID As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Proxy"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ProxyIDColumn() As System.Data.DataColumn
            Get
                Return Me.columnProxyID
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ProxyLinkColumn() As System.Data.DataColumn
            Get
                Return Me.columnProxyLink
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ProxyPortColumn() As System.Data.DataColumn
            Get
                Return Me.columnProxyPort
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AverageSpeedColumn() As System.Data.DataColumn
            Get
                Return Me.columnAverageSpeed
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AveragePingColumn() As System.Data.DataColumn
            Get
                Return Me.columnAveragePing
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MaxConnectionColumn() As System.Data.DataColumn
            Get
                Return Me.columnMaxConnection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TotalTimeoutColumn() As System.Data.DataColumn
            Get
                Return Me.columnTotalTimeout
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TotalAnonymousColumn() As System.Data.DataColumn
            Get
                Return Me.columnTotalAnonymous
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ProxyStatusIDColumn() As System.Data.DataColumn
            Get
                Return Me.columnProxyStatusID
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ProxyRow
            Get
                Return CType(Me.Rows(index),ProxyRow)
            End Get
        End Property
        
        Public Event ProxyRowChanging As ProxyRowChangeEventHandler
        
        Public Event ProxyRowChanged As ProxyRowChangeEventHandler
        
        Public Event ProxyRowDeleting As ProxyRowChangeEventHandler
        
        Public Event ProxyRowDeleted As ProxyRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddProxyRow(ByVal row As ProxyRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddProxyRow(ByVal ProxyLink As String, ByVal ProxyPort As Integer, ByVal AverageSpeed As Integer, ByVal AveragePing As Integer, ByVal MaxConnection As Integer, ByVal TotalTimeout As Integer, ByVal TotalAnonymous As Integer, ByVal ProxyStatusID As Integer) As ProxyRow
            Dim rowProxyRow As ProxyRow = CType(Me.NewRow,ProxyRow)
            rowProxyRow.ItemArray = New Object() {Nothing, ProxyLink, ProxyPort, AverageSpeed, AveragePing, MaxConnection, TotalTimeout, TotalAnonymous, ProxyStatusID}
            Me.Rows.Add(rowProxyRow)
            Return rowProxyRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByProxyID(ByVal ProxyID As Integer) As ProxyRow
            Return CType(Me.Rows.Find(New Object() {ProxyID}),ProxyRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As ProxyDataTable = CType(MyBase.Clone,ProxyDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New ProxyDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnProxyID = MyBase.Columns("ProxyID")
            Me.columnProxyLink = MyBase.Columns("ProxyLink")
            Me.columnProxyPort = MyBase.Columns("ProxyPort")
            Me.columnAverageSpeed = MyBase.Columns("AverageSpeed")
            Me.columnAveragePing = MyBase.Columns("AveragePing")
            Me.columnMaxConnection = MyBase.Columns("MaxConnection")
            Me.columnTotalTimeout = MyBase.Columns("TotalTimeout")
            Me.columnTotalAnonymous = MyBase.Columns("TotalAnonymous")
            Me.columnProxyStatusID = MyBase.Columns("ProxyStatusID")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnProxyID = New System.Data.DataColumn("ProxyID", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProxyID)
            Me.columnProxyLink = New System.Data.DataColumn("ProxyLink", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProxyLink)
            Me.columnProxyPort = New System.Data.DataColumn("ProxyPort", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProxyPort)
            Me.columnAverageSpeed = New System.Data.DataColumn("AverageSpeed", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAverageSpeed)
            Me.columnAveragePing = New System.Data.DataColumn("AveragePing", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAveragePing)
            Me.columnMaxConnection = New System.Data.DataColumn("MaxConnection", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMaxConnection)
            Me.columnTotalTimeout = New System.Data.DataColumn("TotalTimeout", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotalTimeout)
            Me.columnTotalAnonymous = New System.Data.DataColumn("TotalAnonymous", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotalAnonymous)
            Me.columnProxyStatusID = New System.Data.DataColumn("ProxyStatusID", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProxyStatusID)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnProxyID}, true))
            Me.columnProxyID.AutoIncrement = true
            Me.columnProxyID.AllowDBNull = false
            Me.columnProxyID.ReadOnly = true
            Me.columnProxyID.Unique = true
            Me.columnProxyLink.AllowDBNull = false
            Me.columnProxyLink.MaxLength = 255
            Me.columnProxyPort.AllowDBNull = false
            Me.columnProxyPort.DefaultValue = CType(80,Integer)
            Me.columnAverageSpeed.AllowDBNull = false
            Me.columnAverageSpeed.DefaultValue = CType(0,Integer)
            Me.columnAveragePing.AllowDBNull = false
            Me.columnAveragePing.DefaultValue = CType(0,Integer)
            Me.columnMaxConnection.AllowDBNull = false
            Me.columnMaxConnection.DefaultValue = CType(1,Integer)
            Me.columnTotalTimeout.AllowDBNull = false
            Me.columnTotalTimeout.DefaultValue = CType(0,Integer)
            Me.columnTotalAnonymous.AllowDBNull = false
            Me.columnTotalAnonymous.DefaultValue = CType(0,Integer)
            Me.columnProxyStatusID.AllowDBNull = false
            Me.columnProxyStatusID.DefaultValue = CType(2,Integer)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewProxyRow() As ProxyRow
            Return CType(Me.NewRow,ProxyRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New ProxyRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ProxyRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ProxyRowChangedEvent) Is Nothing) Then
                RaiseEvent ProxyRowChanged(Me, New ProxyRowChangeEvent(CType(e.Row,ProxyRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ProxyRowChangingEvent) Is Nothing) Then
                RaiseEvent ProxyRowChanging(Me, New ProxyRowChangeEvent(CType(e.Row,ProxyRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ProxyRowDeletedEvent) Is Nothing) Then
                RaiseEvent ProxyRowDeleted(Me, New ProxyRowChangeEvent(CType(e.Row,ProxyRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ProxyRowDeletingEvent) Is Nothing) Then
                RaiseEvent ProxyRowDeleting(Me, New ProxyRowChangeEvent(CType(e.Row,ProxyRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveProxyRow(ByVal row As ProxyRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As ScraperDB = New ScraperDB
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ProxyDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ProxyStatusDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnProxyStatusID As System.Data.DataColumn
        
        Private columnStatusName As System.Data.DataColumn
        
        Private columnStatusDescription As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ProxyStatus"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ProxyStatusIDColumn() As System.Data.DataColumn
            Get
                Return Me.columnProxyStatusID
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StatusNameColumn() As System.Data.DataColumn
            Get
                Return Me.columnStatusName
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StatusDescriptionColumn() As System.Data.DataColumn
            Get
                Return Me.columnStatusDescription
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ProxyStatusRow
            Get
                Return CType(Me.Rows(index),ProxyStatusRow)
            End Get
        End Property
        
        Public Event ProxyStatusRowChanging As ProxyStatusRowChangeEventHandler
        
        Public Event ProxyStatusRowChanged As ProxyStatusRowChangeEventHandler
        
        Public Event ProxyStatusRowDeleting As ProxyStatusRowChangeEventHandler
        
        Public Event ProxyStatusRowDeleted As ProxyStatusRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddProxyStatusRow(ByVal row As ProxyStatusRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddProxyStatusRow(ByVal ProxyStatusID As Integer, ByVal StatusName As String, ByVal StatusDescription As String) As ProxyStatusRow
            Dim rowProxyStatusRow As ProxyStatusRow = CType(Me.NewRow,ProxyStatusRow)
            rowProxyStatusRow.ItemArray = New Object() {ProxyStatusID, StatusName, StatusDescription}
            Me.Rows.Add(rowProxyStatusRow)
            Return rowProxyStatusRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByProxyStatusID(ByVal ProxyStatusID As Integer) As ProxyStatusRow
            Return CType(Me.Rows.Find(New Object() {ProxyStatusID}),ProxyStatusRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As ProxyStatusDataTable = CType(MyBase.Clone,ProxyStatusDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New ProxyStatusDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnProxyStatusID = MyBase.Columns("ProxyStatusID")
            Me.columnStatusName = MyBase.Columns("StatusName")
            Me.columnStatusDescription = MyBase.Columns("StatusDescription")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnProxyStatusID = New System.Data.DataColumn("ProxyStatusID", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProxyStatusID)
            Me.columnStatusName = New System.Data.DataColumn("StatusName", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStatusName)
            Me.columnStatusDescription = New System.Data.DataColumn("StatusDescription", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStatusDescription)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnProxyStatusID}, true))
            Me.columnProxyStatusID.AllowDBNull = false
            Me.columnProxyStatusID.Unique = true
            Me.columnStatusName.MaxLength = 50
            Me.columnStatusDescription.MaxLength = 255
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewProxyStatusRow() As ProxyStatusRow
            Return CType(Me.NewRow,ProxyStatusRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New ProxyStatusRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ProxyStatusRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ProxyStatusRowChangedEvent) Is Nothing) Then
                RaiseEvent ProxyStatusRowChanged(Me, New ProxyStatusRowChangeEvent(CType(e.Row,ProxyStatusRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ProxyStatusRowChangingEvent) Is Nothing) Then
                RaiseEvent ProxyStatusRowChanging(Me, New ProxyStatusRowChangeEvent(CType(e.Row,ProxyStatusRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ProxyStatusRowDeletedEvent) Is Nothing) Then
                RaiseEvent ProxyStatusRowDeleted(Me, New ProxyStatusRowChangeEvent(CType(e.Row,ProxyStatusRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ProxyStatusRowDeletingEvent) Is Nothing) Then
                RaiseEvent ProxyStatusRowDeleting(Me, New ProxyStatusRowChangeEvent(CType(e.Row,ProxyStatusRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveProxyStatusRow(ByVal row As ProxyStatusRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As ScraperDB = New ScraperDB
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ProxyStatusDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ReportsDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnReportID As System.Data.DataColumn
        
        Private columnProjectID As System.Data.DataColumn
        
        Private columnReportDate As System.Data.DataColumn
        
        Private columnReportLevel As System.Data.DataColumn
        
        Private columnReportDetail As System.Data.DataColumn
        
        Private columnReportMessage As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Reports"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ReportIDColumn() As System.Data.DataColumn
            Get
                Return Me.columnReportID
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ProjectIDColumn() As System.Data.DataColumn
            Get
                Return Me.columnProjectID
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ReportDateColumn() As System.Data.DataColumn
            Get
                Return Me.columnReportDate
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ReportLevelColumn() As System.Data.DataColumn
            Get
                Return Me.columnReportLevel
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ReportDetailColumn() As System.Data.DataColumn
            Get
                Return Me.columnReportDetail
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ReportMessageColumn() As System.Data.DataColumn
            Get
                Return Me.columnReportMessage
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ReportsRow
            Get
                Return CType(Me.Rows(index),ReportsRow)
            End Get
        End Property
        
        Public Event ReportsRowChanging As ReportsRowChangeEventHandler
        
        Public Event ReportsRowChanged As ReportsRowChangeEventHandler
        
        Public Event ReportsRowDeleting As ReportsRowChangeEventHandler
        
        Public Event ReportsRowDeleted As ReportsRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddReportsRow(ByVal row As ReportsRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddReportsRow(ByVal parentProjectRowByFK_REPORTS_PROJECT_R_PROJECT As ProjectRow, ByVal ReportDate As Date, ByVal ReportLevel As Integer, ByVal ReportDetail As String, ByVal ReportMessage As String) As ReportsRow
            Dim rowReportsRow As ReportsRow = CType(Me.NewRow,ReportsRow)
            rowReportsRow.ItemArray = New Object() {Nothing, parentProjectRowByFK_REPORTS_PROJECT_R_PROJECT(0), ReportDate, ReportLevel, ReportDetail, ReportMessage}
            Me.Rows.Add(rowReportsRow)
            Return rowReportsRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByReportID(ByVal ReportID As Integer) As ReportsRow
            Return CType(Me.Rows.Find(New Object() {ReportID}),ReportsRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As ReportsDataTable = CType(MyBase.Clone,ReportsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New ReportsDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnReportID = MyBase.Columns("ReportID")
            Me.columnProjectID = MyBase.Columns("ProjectID")
            Me.columnReportDate = MyBase.Columns("ReportDate")
            Me.columnReportLevel = MyBase.Columns("ReportLevel")
            Me.columnReportDetail = MyBase.Columns("ReportDetail")
            Me.columnReportMessage = MyBase.Columns("ReportMessage")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnReportID = New System.Data.DataColumn("ReportID", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReportID)
            Me.columnProjectID = New System.Data.DataColumn("ProjectID", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProjectID)
            Me.columnReportDate = New System.Data.DataColumn("ReportDate", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReportDate)
            Me.columnReportLevel = New System.Data.DataColumn("ReportLevel", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReportLevel)
            Me.columnReportDetail = New System.Data.DataColumn("ReportDetail", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReportDetail)
            Me.columnReportMessage = New System.Data.DataColumn("ReportMessage", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReportMessage)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnReportID}, true))
            Me.columnReportID.AutoIncrement = true
            Me.columnReportID.AllowDBNull = false
            Me.columnReportID.ReadOnly = true
            Me.columnReportID.Unique = true
            Me.columnProjectID.AllowDBNull = false
            Me.columnReportDate.AllowDBNull = false
            Me.columnReportLevel.AllowDBNull = false
            Me.columnReportDetail.AllowDBNull = false
            Me.columnReportDetail.MaxLength = 255
            Me.columnReportMessage.AllowDBNull = false
            Me.columnReportMessage.MaxLength = 2147483647
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewReportsRow() As ReportsRow
            Return CType(Me.NewRow,ReportsRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New ReportsRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ReportsRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ReportsRowChangedEvent) Is Nothing) Then
                RaiseEvent ReportsRowChanged(Me, New ReportsRowChangeEvent(CType(e.Row,ReportsRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ReportsRowChangingEvent) Is Nothing) Then
                RaiseEvent ReportsRowChanging(Me, New ReportsRowChangeEvent(CType(e.Row,ReportsRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ReportsRowDeletedEvent) Is Nothing) Then
                RaiseEvent ReportsRowDeleted(Me, New ReportsRowChangeEvent(CType(e.Row,ReportsRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ReportsRowDeletingEvent) Is Nothing) Then
                RaiseEvent ReportsRowDeleting(Me, New ReportsRowChangeEvent(CType(e.Row,ReportsRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveReportsRow(ByVal row As ReportsRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As ScraperDB = New ScraperDB
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ReportsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class TagLibraryDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnTagID As System.Data.DataColumn
        
        Private columnParent_TagID As System.Data.DataColumn
        
        Private columnProjectID As System.Data.DataColumn
        
        Private columnTagName As System.Data.DataColumn
        
        Private columnOrderNumber As System.Data.DataColumn
        
        Private columnStartTag As System.Data.DataColumn
        
        Private columnEndTag As System.Data.DataColumn
        
        Private columnIsAppendStartTag As System.Data.DataColumn
        
        Private columnIsAppendEndTag As System.Data.DataColumn
        
        Private columnIsStartTagRegex As System.Data.DataColumn
        
        Private columnIsEndTagRegex As System.Data.DataColumn
        
        Private columnMaxChars As System.Data.DataColumn
        
        Private columnIsOptional As System.Data.DataColumn
        
        Private columnIsSingleRegex As System.Data.DataColumn
        
        Private columnisReverseSearch As System.Data.DataColumn
        
        Private columnIsURL As System.Data.DataColumn
        
        Private columnisSaveData As System.Data.DataColumn
        
        Private columnDynamicCode As System.Data.DataColumn
        
        Private columnIsSharedTag As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "TagLibrary"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TagIDColumn() As System.Data.DataColumn
            Get
                Return Me.columnTagID
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Parent_TagIDColumn() As System.Data.DataColumn
            Get
                Return Me.columnParent_TagID
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ProjectIDColumn() As System.Data.DataColumn
            Get
                Return Me.columnProjectID
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TagNameColumn() As System.Data.DataColumn
            Get
                Return Me.columnTagName
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OrderNumberColumn() As System.Data.DataColumn
            Get
                Return Me.columnOrderNumber
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StartTagColumn() As System.Data.DataColumn
            Get
                Return Me.columnStartTag
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EndTagColumn() As System.Data.DataColumn
            Get
                Return Me.columnEndTag
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IsAppendStartTagColumn() As System.Data.DataColumn
            Get
                Return Me.columnIsAppendStartTag
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IsAppendEndTagColumn() As System.Data.DataColumn
            Get
                Return Me.columnIsAppendEndTag
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IsStartTagRegexColumn() As System.Data.DataColumn
            Get
                Return Me.columnIsStartTagRegex
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IsEndTagRegexColumn() As System.Data.DataColumn
            Get
                Return Me.columnIsEndTagRegex
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MaxCharsColumn() As System.Data.DataColumn
            Get
                Return Me.columnMaxChars
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IsOptionalColumn() As System.Data.DataColumn
            Get
                Return Me.columnIsOptional
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IsSingleRegexColumn() As System.Data.DataColumn
            Get
                Return Me.columnIsSingleRegex
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property isReverseSearchColumn() As System.Data.DataColumn
            Get
                Return Me.columnisReverseSearch
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IsURLColumn() As System.Data.DataColumn
            Get
                Return Me.columnIsURL
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property isSaveDataColumn() As System.Data.DataColumn
            Get
                Return Me.columnisSaveData
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DynamicCodeColumn() As System.Data.DataColumn
            Get
                Return Me.columnDynamicCode
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IsSharedTagColumn() As System.Data.DataColumn
            Get
                Return Me.columnIsSharedTag
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As TagLibraryRow
            Get
                Return CType(Me.Rows(index),TagLibraryRow)
            End Get
        End Property
        
        Public Event TagLibraryRowChanging As TagLibraryRowChangeEventHandler
        
        Public Event TagLibraryRowChanged As TagLibraryRowChangeEventHandler
        
        Public Event TagLibraryRowDeleting As TagLibraryRowChangeEventHandler
        
        Public Event TagLibraryRowDeleted As TagLibraryRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddTagLibraryRow(ByVal row As TagLibraryRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddTagLibraryRow( _
                    ByVal parentTagLibraryRowByFK_TAGLIBRA_PARENTTAG_TAGLIBRA As TagLibraryRow,  _
                    ByVal parentProjectRowByFK_TAGLIBRA_PROJECT_T_PROJECT As ProjectRow,  _
                    ByVal TagName As String,  _
                    ByVal OrderNumber As Integer,  _
                    ByVal StartTag As String,  _
                    ByVal EndTag As String,  _
                    ByVal IsAppendStartTag As Boolean,  _
                    ByVal IsAppendEndTag As Boolean,  _
                    ByVal IsStartTagRegex As Boolean,  _
                    ByVal IsEndTagRegex As Boolean,  _
                    ByVal MaxChars As Integer,  _
                    ByVal IsOptional As Boolean,  _
                    ByVal IsSingleRegex As Boolean,  _
                    ByVal isReverseSearch As Boolean,  _
                    ByVal IsURL As Boolean,  _
                    ByVal isSaveData As Boolean,  _
                    ByVal DynamicCode As String,  _
                    ByVal IsSharedTag As Boolean) As TagLibraryRow
            Dim rowTagLibraryRow As TagLibraryRow = CType(Me.NewRow,TagLibraryRow)
            rowTagLibraryRow.ItemArray = New Object() {Nothing, parentTagLibraryRowByFK_TAGLIBRA_PARENTTAG_TAGLIBRA(0), parentProjectRowByFK_TAGLIBRA_PROJECT_T_PROJECT(0), TagName, OrderNumber, StartTag, EndTag, IsAppendStartTag, IsAppendEndTag, IsStartTagRegex, IsEndTagRegex, MaxChars, IsOptional, IsSingleRegex, isReverseSearch, IsURL, isSaveData, DynamicCode, IsSharedTag}
            Me.Rows.Add(rowTagLibraryRow)
            Return rowTagLibraryRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByTagID(ByVal TagID As Integer) As TagLibraryRow
            Return CType(Me.Rows.Find(New Object() {TagID}),TagLibraryRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As TagLibraryDataTable = CType(MyBase.Clone,TagLibraryDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New TagLibraryDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnTagID = MyBase.Columns("TagID")
            Me.columnParent_TagID = MyBase.Columns("Parent_TagID")
            Me.columnProjectID = MyBase.Columns("ProjectID")
            Me.columnTagName = MyBase.Columns("TagName")
            Me.columnOrderNumber = MyBase.Columns("OrderNumber")
            Me.columnStartTag = MyBase.Columns("StartTag")
            Me.columnEndTag = MyBase.Columns("EndTag")
            Me.columnIsAppendStartTag = MyBase.Columns("IsAppendStartTag")
            Me.columnIsAppendEndTag = MyBase.Columns("IsAppendEndTag")
            Me.columnIsStartTagRegex = MyBase.Columns("IsStartTagRegex")
            Me.columnIsEndTagRegex = MyBase.Columns("IsEndTagRegex")
            Me.columnMaxChars = MyBase.Columns("MaxChars")
            Me.columnIsOptional = MyBase.Columns("IsOptional")
            Me.columnIsSingleRegex = MyBase.Columns("IsSingleRegex")
            Me.columnisReverseSearch = MyBase.Columns("isReverseSearch")
            Me.columnIsURL = MyBase.Columns("IsURL")
            Me.columnisSaveData = MyBase.Columns("isSaveData")
            Me.columnDynamicCode = MyBase.Columns("DynamicCode")
            Me.columnIsSharedTag = MyBase.Columns("IsSharedTag")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnTagID = New System.Data.DataColumn("TagID", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTagID)
            Me.columnParent_TagID = New System.Data.DataColumn("Parent_TagID", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnParent_TagID)
            Me.columnProjectID = New System.Data.DataColumn("ProjectID", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProjectID)
            Me.columnTagName = New System.Data.DataColumn("TagName", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTagName)
            Me.columnOrderNumber = New System.Data.DataColumn("OrderNumber", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOrderNumber)
            Me.columnStartTag = New System.Data.DataColumn("StartTag", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStartTag)
            Me.columnEndTag = New System.Data.DataColumn("EndTag", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEndTag)
            Me.columnIsAppendStartTag = New System.Data.DataColumn("IsAppendStartTag", GetType(Boolean), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIsAppendStartTag)
            Me.columnIsAppendEndTag = New System.Data.DataColumn("IsAppendEndTag", GetType(Boolean), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIsAppendEndTag)
            Me.columnIsStartTagRegex = New System.Data.DataColumn("IsStartTagRegex", GetType(Boolean), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIsStartTagRegex)
            Me.columnIsEndTagRegex = New System.Data.DataColumn("IsEndTagRegex", GetType(Boolean), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIsEndTagRegex)
            Me.columnMaxChars = New System.Data.DataColumn("MaxChars", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMaxChars)
            Me.columnIsOptional = New System.Data.DataColumn("IsOptional", GetType(Boolean), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIsOptional)
            Me.columnIsSingleRegex = New System.Data.DataColumn("IsSingleRegex", GetType(Boolean), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIsSingleRegex)
            Me.columnisReverseSearch = New System.Data.DataColumn("isReverseSearch", GetType(Boolean), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnisReverseSearch)
            Me.columnIsURL = New System.Data.DataColumn("IsURL", GetType(Boolean), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIsURL)
            Me.columnisSaveData = New System.Data.DataColumn("isSaveData", GetType(Boolean), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnisSaveData)
            Me.columnDynamicCode = New System.Data.DataColumn("DynamicCode", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDynamicCode)
            Me.columnIsSharedTag = New System.Data.DataColumn("IsSharedTag", GetType(Boolean), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIsSharedTag)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnTagID}, true))
            Me.columnTagID.AutoIncrement = true
            Me.columnTagID.AllowDBNull = false
            Me.columnTagID.ReadOnly = true
            Me.columnTagID.Unique = true
            Me.columnParent_TagID.Caption = "Tag_TagID"
            Me.columnProjectID.AllowDBNull = false
            Me.columnTagName.AllowDBNull = false
            Me.columnTagName.MaxLength = 50
            Me.columnOrderNumber.AllowDBNull = false
            Me.columnOrderNumber.DefaultValue = CType(0,Integer)
            Me.columnStartTag.AllowDBNull = false
            Me.columnStartTag.MaxLength = 255
            Me.columnEndTag.AllowDBNull = false
            Me.columnEndTag.MaxLength = 255
            Me.columnIsAppendStartTag.AllowDBNull = false
            Me.columnIsAppendStartTag.DefaultValue = CType(false,Boolean)
            Me.columnIsAppendEndTag.AllowDBNull = false
            Me.columnIsAppendEndTag.DefaultValue = CType(false,Boolean)
            Me.columnIsStartTagRegex.AllowDBNull = false
            Me.columnIsStartTagRegex.DefaultValue = CType(false,Boolean)
            Me.columnIsEndTagRegex.AllowDBNull = false
            Me.columnIsEndTagRegex.DefaultValue = CType(false,Boolean)
            Me.columnMaxChars.AllowDBNull = false
            Me.columnMaxChars.DefaultValue = CType(0,Integer)
            Me.columnIsOptional.AllowDBNull = false
            Me.columnIsOptional.DefaultValue = CType(false,Boolean)
            Me.columnIsSingleRegex.AllowDBNull = false
            Me.columnIsSingleRegex.DefaultValue = CType(false,Boolean)
            Me.columnisReverseSearch.AllowDBNull = false
            Me.columnisReverseSearch.DefaultValue = CType(false,Boolean)
            Me.columnIsURL.AllowDBNull = false
            Me.columnIsURL.DefaultValue = CType(false,Boolean)
            Me.columnisSaveData.AllowDBNull = false
            Me.columnisSaveData.DefaultValue = CType(false,Boolean)
            Me.columnDynamicCode.AllowDBNull = false
            Me.columnDynamicCode.DefaultValue = CType("""""",String)
            Me.columnDynamicCode.MaxLength = 2147483647
            Me.columnIsSharedTag.AllowDBNull = false
            Me.columnIsSharedTag.DefaultValue = CType(false,Boolean)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewTagLibraryRow() As TagLibraryRow
            Return CType(Me.NewRow,TagLibraryRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New TagLibraryRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(TagLibraryRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TagLibraryRowChangedEvent) Is Nothing) Then
                RaiseEvent TagLibraryRowChanged(Me, New TagLibraryRowChangeEvent(CType(e.Row,TagLibraryRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TagLibraryRowChangingEvent) Is Nothing) Then
                RaiseEvent TagLibraryRowChanging(Me, New TagLibraryRowChangeEvent(CType(e.Row,TagLibraryRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TagLibraryRowDeletedEvent) Is Nothing) Then
                RaiseEvent TagLibraryRowDeleted(Me, New TagLibraryRowChangeEvent(CType(e.Row,TagLibraryRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TagLibraryRowDeletingEvent) Is Nothing) Then
                RaiseEvent TagLibraryRowDeleting(Me, New TagLibraryRowChangeEvent(CType(e.Row,TagLibraryRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveTagLibraryRow(ByVal row As TagLibraryRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As ScraperDB = New ScraperDB
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "TagLibraryDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class UrlDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnUrlID As System.Data.DataColumn
        
        Private columnProjectID As System.Data.DataColumn
        
        Private columnUrlStatusID As System.Data.DataColumn
        
        Private columnUrl As System.Data.DataColumn
        
        Private columnUrlReferer As System.Data.DataColumn
        
        Private columnPostData As System.Data.DataColumn
        
        Private columnLastModified As System.Data.DataColumn
        
        Private columnLastScraped As System.Data.DataColumn
        
        Private columnDateAdded As System.Data.DataColumn
        
        Private columnContent As System.Data.DataColumn
        
        Private columnLastAssigned As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Url"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UrlIDColumn() As System.Data.DataColumn
            Get
                Return Me.columnUrlID
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ProjectIDColumn() As System.Data.DataColumn
            Get
                Return Me.columnProjectID
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UrlStatusIDColumn() As System.Data.DataColumn
            Get
                Return Me.columnUrlStatusID
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UrlColumn() As System.Data.DataColumn
            Get
                Return Me.columnUrl
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UrlRefererColumn() As System.Data.DataColumn
            Get
                Return Me.columnUrlReferer
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PostDataColumn() As System.Data.DataColumn
            Get
                Return Me.columnPostData
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LastModifiedColumn() As System.Data.DataColumn
            Get
                Return Me.columnLastModified
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LastScrapedColumn() As System.Data.DataColumn
            Get
                Return Me.columnLastScraped
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateAddedColumn() As System.Data.DataColumn
            Get
                Return Me.columnDateAdded
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ContentColumn() As System.Data.DataColumn
            Get
                Return Me.columnContent
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LastAssignedColumn() As System.Data.DataColumn
            Get
                Return Me.columnLastAssigned
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As UrlRow
            Get
                Return CType(Me.Rows(index),UrlRow)
            End Get
        End Property
        
        Public Event UrlRowChanging As UrlRowChangeEventHandler
        
        Public Event UrlRowChanged As UrlRowChangeEventHandler
        
        Public Event UrlRowDeleting As UrlRowChangeEventHandler
        
        Public Event UrlRowDeleted As UrlRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddUrlRow(ByVal row As UrlRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddUrlRow(ByVal parentProjectRowByFK_URL_PROJECT_S_PROJECT As ProjectRow, ByVal UrlStatusID As Integer, ByVal Url As String, ByVal UrlReferer As String, ByVal PostData As String, ByVal LastModified As Date, ByVal LastScraped As Date, ByVal DateAdded As Date, ByVal Content As String, ByVal LastAssigned As Date) As UrlRow
            Dim rowUrlRow As UrlRow = CType(Me.NewRow,UrlRow)
            rowUrlRow.ItemArray = New Object() {Nothing, parentProjectRowByFK_URL_PROJECT_S_PROJECT(0), UrlStatusID, Url, UrlReferer, PostData, LastModified, LastScraped, DateAdded, Content, LastAssigned}
            Me.Rows.Add(rowUrlRow)
            Return rowUrlRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByUrlID(ByVal UrlID As Integer) As UrlRow
            Return CType(Me.Rows.Find(New Object() {UrlID}),UrlRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As UrlDataTable = CType(MyBase.Clone,UrlDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New UrlDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnUrlID = MyBase.Columns("UrlID")
            Me.columnProjectID = MyBase.Columns("ProjectID")
            Me.columnUrlStatusID = MyBase.Columns("UrlStatusID")
            Me.columnUrl = MyBase.Columns("Url")
            Me.columnUrlReferer = MyBase.Columns("UrlReferer")
            Me.columnPostData = MyBase.Columns("PostData")
            Me.columnLastModified = MyBase.Columns("LastModified")
            Me.columnLastScraped = MyBase.Columns("LastScraped")
            Me.columnDateAdded = MyBase.Columns("DateAdded")
            Me.columnContent = MyBase.Columns("Content")
            Me.columnLastAssigned = MyBase.Columns("LastAssigned")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnUrlID = New System.Data.DataColumn("UrlID", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUrlID)
            Me.columnProjectID = New System.Data.DataColumn("ProjectID", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProjectID)
            Me.columnUrlStatusID = New System.Data.DataColumn("UrlStatusID", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUrlStatusID)
            Me.columnUrl = New System.Data.DataColumn("Url", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUrl)
            Me.columnUrlReferer = New System.Data.DataColumn("UrlReferer", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUrlReferer)
            Me.columnPostData = New System.Data.DataColumn("PostData", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPostData)
            Me.columnLastModified = New System.Data.DataColumn("LastModified", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLastModified)
            Me.columnLastScraped = New System.Data.DataColumn("LastScraped", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLastScraped)
            Me.columnDateAdded = New System.Data.DataColumn("DateAdded", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateAdded)
            Me.columnContent = New System.Data.DataColumn("Content", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnContent)
            Me.columnLastAssigned = New System.Data.DataColumn("LastAssigned", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLastAssigned)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnUrlID}, true))
            Me.columnUrlID.AutoIncrement = true
            Me.columnUrlID.AllowDBNull = false
            Me.columnUrlID.ReadOnly = true
            Me.columnUrlID.Unique = true
            Me.columnProjectID.AllowDBNull = false
            Me.columnUrlStatusID.AllowDBNull = false
            Me.columnUrl.AllowDBNull = false
            Me.columnUrl.MaxLength = 255
            Me.columnUrlReferer.MaxLength = 255
            Me.columnPostData.MaxLength = 255
            Me.columnDateAdded.AllowDBNull = false
            Me.columnContent.MaxLength = 2147483647
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewUrlRow() As UrlRow
            Return CType(Me.NewRow,UrlRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New UrlRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(UrlRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.UrlRowChangedEvent) Is Nothing) Then
                RaiseEvent UrlRowChanged(Me, New UrlRowChangeEvent(CType(e.Row,UrlRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.UrlRowChangingEvent) Is Nothing) Then
                RaiseEvent UrlRowChanging(Me, New UrlRowChangeEvent(CType(e.Row,UrlRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.UrlRowDeletedEvent) Is Nothing) Then
                RaiseEvent UrlRowDeleted(Me, New UrlRowChangeEvent(CType(e.Row,UrlRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.UrlRowDeletingEvent) Is Nothing) Then
                RaiseEvent UrlRowDeleting(Me, New UrlRowChangeEvent(CType(e.Row,UrlRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveUrlRow(ByVal row As UrlRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As ScraperDB = New ScraperDB
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "UrlDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class UrlStatusDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnUrlStatusID As System.Data.DataColumn
        
        Private columnName As System.Data.DataColumn
        
        Private columnDescription As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "UrlStatus"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UrlStatusIDColumn() As System.Data.DataColumn
            Get
                Return Me.columnUrlStatusID
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NameColumn() As System.Data.DataColumn
            Get
                Return Me.columnName
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescriptionColumn() As System.Data.DataColumn
            Get
                Return Me.columnDescription
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As UrlStatusRow
            Get
                Return CType(Me.Rows(index),UrlStatusRow)
            End Get
        End Property
        
        Public Event UrlStatusRowChanging As UrlStatusRowChangeEventHandler
        
        Public Event UrlStatusRowChanged As UrlStatusRowChangeEventHandler
        
        Public Event UrlStatusRowDeleting As UrlStatusRowChangeEventHandler
        
        Public Event UrlStatusRowDeleted As UrlStatusRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddUrlStatusRow(ByVal row As UrlStatusRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddUrlStatusRow(ByVal UrlStatusID As Integer, ByVal Name As String, ByVal Description As String) As UrlStatusRow
            Dim rowUrlStatusRow As UrlStatusRow = CType(Me.NewRow,UrlStatusRow)
            rowUrlStatusRow.ItemArray = New Object() {UrlStatusID, Name, Description}
            Me.Rows.Add(rowUrlStatusRow)
            Return rowUrlStatusRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByUrlStatusID(ByVal UrlStatusID As Integer) As UrlStatusRow
            Return CType(Me.Rows.Find(New Object() {UrlStatusID}),UrlStatusRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As UrlStatusDataTable = CType(MyBase.Clone,UrlStatusDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New UrlStatusDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnUrlStatusID = MyBase.Columns("UrlStatusID")
            Me.columnName = MyBase.Columns("Name")
            Me.columnDescription = MyBase.Columns("Description")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnUrlStatusID = New System.Data.DataColumn("UrlStatusID", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUrlStatusID)
            Me.columnName = New System.Data.DataColumn("Name", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnName)
            Me.columnDescription = New System.Data.DataColumn("Description", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescription)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnUrlStatusID}, true))
            Me.columnUrlStatusID.AllowDBNull = false
            Me.columnUrlStatusID.Unique = true
            Me.columnName.MaxLength = 2147483647
            Me.columnDescription.MaxLength = 2147483647
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewUrlStatusRow() As UrlStatusRow
            Return CType(Me.NewRow,UrlStatusRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New UrlStatusRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(UrlStatusRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.UrlStatusRowChangedEvent) Is Nothing) Then
                RaiseEvent UrlStatusRowChanged(Me, New UrlStatusRowChangeEvent(CType(e.Row,UrlStatusRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.UrlStatusRowChangingEvent) Is Nothing) Then
                RaiseEvent UrlStatusRowChanging(Me, New UrlStatusRowChangeEvent(CType(e.Row,UrlStatusRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.UrlStatusRowDeletedEvent) Is Nothing) Then
                RaiseEvent UrlStatusRowDeleted(Me, New UrlStatusRowChangeEvent(CType(e.Row,UrlStatusRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.UrlStatusRowDeletingEvent) Is Nothing) Then
                RaiseEvent UrlStatusRowDeleting(Me, New UrlStatusRowChangeEvent(CType(e.Row,UrlStatusRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveUrlStatusRow(ByVal row As UrlStatusRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As ScraperDB = New ScraperDB
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "UrlStatusDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ProjectDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnProjectID As System.Data.DataColumn
        
        Private columnName As System.Data.DataColumn
        
        Private columnComment As System.Data.DataColumn
        
        Private columnDateAdded As System.Data.DataColumn
        
        Private columnDateRun As System.Data.DataColumn
        
        Private columnElasped As System.Data.DataColumn
        
        Private columnIsSaveContent As System.Data.DataColumn
        
        Private columnScrapeInterval As System.Data.DataColumn
        
        Private columnDownloadDelay As System.Data.DataColumn
        
        Private columnThreads As System.Data.DataColumn
        
        Private columnProxyCheckURl As System.Data.DataColumn
        
        Private columnProxyCheckContent As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Project"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ProjectIDColumn() As System.Data.DataColumn
            Get
                Return Me.columnProjectID
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NameColumn() As System.Data.DataColumn
            Get
                Return Me.columnName
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CommentColumn() As System.Data.DataColumn
            Get
                Return Me.columnComment
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateAddedColumn() As System.Data.DataColumn
            Get
                Return Me.columnDateAdded
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateRunColumn() As System.Data.DataColumn
            Get
                Return Me.columnDateRun
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ElaspedColumn() As System.Data.DataColumn
            Get
                Return Me.columnElasped
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IsSaveContentColumn() As System.Data.DataColumn
            Get
                Return Me.columnIsSaveContent
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ScrapeIntervalColumn() As System.Data.DataColumn
            Get
                Return Me.columnScrapeInterval
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DownloadDelayColumn() As System.Data.DataColumn
            Get
                Return Me.columnDownloadDelay
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ThreadsColumn() As System.Data.DataColumn
            Get
                Return Me.columnThreads
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ProxyCheckURlColumn() As System.Data.DataColumn
            Get
                Return Me.columnProxyCheckURl
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ProxyCheckContentColumn() As System.Data.DataColumn
            Get
                Return Me.columnProxyCheckContent
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ProjectRow
            Get
                Return CType(Me.Rows(index),ProjectRow)
            End Get
        End Property
        
        Public Event ProjectRowChanging As ProjectRowChangeEventHandler
        
        Public Event ProjectRowChanged As ProjectRowChangeEventHandler
        
        Public Event ProjectRowDeleting As ProjectRowChangeEventHandler
        
        Public Event ProjectRowDeleted As ProjectRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddProjectRow(ByVal row As ProjectRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddProjectRow(ByVal Name As String, ByVal Comment As String, ByVal DateAdded As Date, ByVal DateRun As Date, ByVal Elasped As Integer, ByVal IsSaveContent As Boolean, ByVal ScrapeInterval As Integer, ByVal DownloadDelay As Integer, ByVal Threads As Integer, ByVal ProxyCheckURl As String, ByVal ProxyCheckContent As String) As ProjectRow
            Dim rowProjectRow As ProjectRow = CType(Me.NewRow,ProjectRow)
            rowProjectRow.ItemArray = New Object() {Nothing, Name, Comment, DateAdded, DateRun, Elasped, IsSaveContent, ScrapeInterval, DownloadDelay, Threads, ProxyCheckURl, ProxyCheckContent}
            Me.Rows.Add(rowProjectRow)
            Return rowProjectRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByProjectID(ByVal ProjectID As Integer) As ProjectRow
            Return CType(Me.Rows.Find(New Object() {ProjectID}),ProjectRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As ProjectDataTable = CType(MyBase.Clone,ProjectDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New ProjectDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnProjectID = MyBase.Columns("ProjectID")
            Me.columnName = MyBase.Columns("Name")
            Me.columnComment = MyBase.Columns("Comment")
            Me.columnDateAdded = MyBase.Columns("DateAdded")
            Me.columnDateRun = MyBase.Columns("DateRun")
            Me.columnElasped = MyBase.Columns("Elasped")
            Me.columnIsSaveContent = MyBase.Columns("IsSaveContent")
            Me.columnScrapeInterval = MyBase.Columns("ScrapeInterval")
            Me.columnDownloadDelay = MyBase.Columns("DownloadDelay")
            Me.columnThreads = MyBase.Columns("Threads")
            Me.columnProxyCheckURl = MyBase.Columns("ProxyCheckURl")
            Me.columnProxyCheckContent = MyBase.Columns("ProxyCheckContent")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnProjectID = New System.Data.DataColumn("ProjectID", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProjectID)
            Me.columnName = New System.Data.DataColumn("Name", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnName)
            Me.columnComment = New System.Data.DataColumn("Comment", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnComment)
            Me.columnDateAdded = New System.Data.DataColumn("DateAdded", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateAdded)
            Me.columnDateRun = New System.Data.DataColumn("DateRun", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateRun)
            Me.columnElasped = New System.Data.DataColumn("Elasped", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnElasped)
            Me.columnIsSaveContent = New System.Data.DataColumn("IsSaveContent", GetType(Boolean), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIsSaveContent)
            Me.columnScrapeInterval = New System.Data.DataColumn("ScrapeInterval", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnScrapeInterval)
            Me.columnDownloadDelay = New System.Data.DataColumn("DownloadDelay", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDownloadDelay)
            Me.columnThreads = New System.Data.DataColumn("Threads", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnThreads)
            Me.columnProxyCheckURl = New System.Data.DataColumn("ProxyCheckURl", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProxyCheckURl)
            Me.columnProxyCheckContent = New System.Data.DataColumn("ProxyCheckContent", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProxyCheckContent)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnProjectID}, true))
            Me.columnProjectID.AutoIncrement = true
            Me.columnProjectID.AllowDBNull = false
            Me.columnProjectID.ReadOnly = true
            Me.columnProjectID.Unique = true
            Me.columnName.AllowDBNull = false
            Me.columnName.MaxLength = 50
            Me.columnComment.MaxLength = 500
            Me.columnDateAdded.AllowDBNull = false
            Me.columnDateRun.AllowDBNull = false
            Me.columnElasped.AllowDBNull = false
            Me.columnElasped.DefaultValue = CType(0,Integer)
            Me.columnIsSaveContent.AllowDBNull = false
            Me.columnIsSaveContent.DefaultValue = CType(false,Boolean)
            Me.columnScrapeInterval.AllowDBNull = false
            Me.columnScrapeInterval.DefaultValue = CType(0,Integer)
            Me.columnDownloadDelay.AllowDBNull = false
            Me.columnDownloadDelay.DefaultValue = CType(0,Integer)
            Me.columnThreads.AllowDBNull = false
            Me.columnThreads.DefaultValue = CType(0,Integer)
            Me.columnProxyCheckURl.AllowDBNull = false
            Me.columnProxyCheckURl.DefaultValue = CType("""""",String)
            Me.columnProxyCheckURl.MaxLength = 255
            Me.columnProxyCheckContent.AllowDBNull = false
            Me.columnProxyCheckContent.DefaultValue = CType("""""",String)
            Me.columnProxyCheckContent.MaxLength = 255
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewProjectRow() As ProjectRow
            Return CType(Me.NewRow,ProjectRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New ProjectRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ProjectRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ProjectRowChangedEvent) Is Nothing) Then
                RaiseEvent ProjectRowChanged(Me, New ProjectRowChangeEvent(CType(e.Row,ProjectRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ProjectRowChangingEvent) Is Nothing) Then
                RaiseEvent ProjectRowChanging(Me, New ProjectRowChangeEvent(CType(e.Row,ProjectRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ProjectRowDeletedEvent) Is Nothing) Then
                RaiseEvent ProjectRowDeleted(Me, New ProjectRowChangeEvent(CType(e.Row,ProjectRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ProjectRowDeletingEvent) Is Nothing) Then
                RaiseEvent ProjectRowDeleting(Me, New ProjectRowChangeEvent(CType(e.Row,ProjectRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveProjectRow(ByVal row As ProjectRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As ScraperDB = New ScraperDB
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ProjectDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class UrlLogRow
        Inherits System.Data.DataRow
        
        Private tableUrlLog As UrlLogDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableUrlLog = CType(Me.Table,UrlLogDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UrlID() As Integer
            Get
                Return CType(Me(Me.tableUrlLog.UrlIDColumn),Integer)
            End Get
            Set
                Me(Me.tableUrlLog.UrlIDColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ProxyID() As Integer
            Get
                Return CType(Me(Me.tableUrlLog.ProxyIDColumn),Integer)
            End Get
            Set
                Me(Me.tableUrlLog.ProxyIDColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Message() As String
            Get
                Return CType(Me(Me.tableUrlLog.MessageColumn),String)
            End Get
            Set
                Me(Me.tableUrlLog.MessageColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ErrorCode() As Integer
            Get
                Return CType(Me(Me.tableUrlLog.ErrorCodeColumn),Integer)
            End Get
            Set
                Me(Me.tableUrlLog.ErrorCodeColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateScraped() As Date
            Get
                Return CType(Me(Me.tableUrlLog.DateScrapedColumn),Date)
            End Get
            Set
                Me(Me.tableUrlLog.DateScrapedColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateModified() As Date
            Get
                Return CType(Me(Me.tableUrlLog.DateModifiedColumn),Date)
            End Get
            Set
                Me(Me.tableUrlLog.DateModifiedColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Content() As String
            Get
                Try 
                    Return CType(Me(Me.tableUrlLog.ContentColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'Content' in table 'UrlLog' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUrlLog.ContentColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UrlLogID() As Integer
            Get
                Return CType(Me(Me.tableUrlLog.UrlLogIDColumn),Integer)
            End Get
            Set
                Me(Me.tableUrlLog.UrlLogIDColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ProxyRow() As ProxyRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_URLLOG_PROXY_URL_PROXY")),ProxyRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_URLLOG_PROXY_URL_PROXY"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UrlRow() As UrlRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_URLLOG_URL_URLLO_URL")),UrlRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_URLLOG_URL_URLLO_URL"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsContentNull() As Boolean
            Return Me.IsNull(Me.tableUrlLog.ContentColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetContentNull()
            Me(Me.tableUrlLog.ContentColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ProxyRow
        Inherits System.Data.DataRow
        
        Private tableProxy As ProxyDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableProxy = CType(Me.Table,ProxyDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ProxyID() As Integer
            Get
                Return CType(Me(Me.tableProxy.ProxyIDColumn),Integer)
            End Get
            Set
                Me(Me.tableProxy.ProxyIDColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ProxyLink() As String
            Get
                Return CType(Me(Me.tableProxy.ProxyLinkColumn),String)
            End Get
            Set
                Me(Me.tableProxy.ProxyLinkColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ProxyPort() As Integer
            Get
                Return CType(Me(Me.tableProxy.ProxyPortColumn),Integer)
            End Get
            Set
                Me(Me.tableProxy.ProxyPortColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AverageSpeed() As Integer
            Get
                Return CType(Me(Me.tableProxy.AverageSpeedColumn),Integer)
            End Get
            Set
                Me(Me.tableProxy.AverageSpeedColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AveragePing() As Integer
            Get
                Return CType(Me(Me.tableProxy.AveragePingColumn),Integer)
            End Get
            Set
                Me(Me.tableProxy.AveragePingColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MaxConnection() As Integer
            Get
                Return CType(Me(Me.tableProxy.MaxConnectionColumn),Integer)
            End Get
            Set
                Me(Me.tableProxy.MaxConnectionColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TotalTimeout() As Integer
            Get
                Return CType(Me(Me.tableProxy.TotalTimeoutColumn),Integer)
            End Get
            Set
                Me(Me.tableProxy.TotalTimeoutColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TotalAnonymous() As Integer
            Get
                Return CType(Me(Me.tableProxy.TotalAnonymousColumn),Integer)
            End Get
            Set
                Me(Me.tableProxy.TotalAnonymousColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ProxyStatusID() As Integer
            Get
                Return CType(Me(Me.tableProxy.ProxyStatusIDColumn),Integer)
            End Get
            Set
                Me(Me.tableProxy.ProxyStatusIDColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetUrlLogRows() As UrlLogRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_URLLOG_PROXY_URL_PROXY")),UrlLogRow())
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ProxyStatusRow
        Inherits System.Data.DataRow
        
        Private tableProxyStatus As ProxyStatusDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableProxyStatus = CType(Me.Table,ProxyStatusDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ProxyStatusID() As Integer
            Get
                Return CType(Me(Me.tableProxyStatus.ProxyStatusIDColumn),Integer)
            End Get
            Set
                Me(Me.tableProxyStatus.ProxyStatusIDColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StatusName() As String
            Get
                Try 
                    Return CType(Me(Me.tableProxyStatus.StatusNameColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'StatusName' in table 'ProxyStatus' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProxyStatus.StatusNameColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StatusDescription() As String
            Get
                Try 
                    Return CType(Me(Me.tableProxyStatus.StatusDescriptionColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'StatusDescription' in table 'ProxyStatus' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProxyStatus.StatusDescriptionColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStatusNameNull() As Boolean
            Return Me.IsNull(Me.tableProxyStatus.StatusNameColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStatusNameNull()
            Me(Me.tableProxyStatus.StatusNameColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStatusDescriptionNull() As Boolean
            Return Me.IsNull(Me.tableProxyStatus.StatusDescriptionColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStatusDescriptionNull()
            Me(Me.tableProxyStatus.StatusDescriptionColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ReportsRow
        Inherits System.Data.DataRow
        
        Private tableReports As ReportsDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableReports = CType(Me.Table,ReportsDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ReportID() As Integer
            Get
                Return CType(Me(Me.tableReports.ReportIDColumn),Integer)
            End Get
            Set
                Me(Me.tableReports.ReportIDColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ProjectID() As Integer
            Get
                Return CType(Me(Me.tableReports.ProjectIDColumn),Integer)
            End Get
            Set
                Me(Me.tableReports.ProjectIDColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ReportDate() As Date
            Get
                Return CType(Me(Me.tableReports.ReportDateColumn),Date)
            End Get
            Set
                Me(Me.tableReports.ReportDateColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ReportLevel() As Integer
            Get
                Return CType(Me(Me.tableReports.ReportLevelColumn),Integer)
            End Get
            Set
                Me(Me.tableReports.ReportLevelColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ReportDetail() As String
            Get
                Return CType(Me(Me.tableReports.ReportDetailColumn),String)
            End Get
            Set
                Me(Me.tableReports.ReportDetailColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ReportMessage() As String
            Get
                Return CType(Me(Me.tableReports.ReportMessageColumn),String)
            End Get
            Set
                Me(Me.tableReports.ReportMessageColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ProjectRow() As ProjectRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_REPORTS_PROJECT_R_PROJECT")),ProjectRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_REPORTS_PROJECT_R_PROJECT"))
            End Set
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class TagLibraryRow
        Inherits System.Data.DataRow
        
        Private tableTagLibrary As TagLibraryDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTagLibrary = CType(Me.Table,TagLibraryDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TagID() As Integer
            Get
                Return CType(Me(Me.tableTagLibrary.TagIDColumn),Integer)
            End Get
            Set
                Me(Me.tableTagLibrary.TagIDColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Parent_TagID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableTagLibrary.Parent_TagIDColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'Parent_TagID' in table 'TagLibrary' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTagLibrary.Parent_TagIDColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ProjectID() As Integer
            Get
                Return CType(Me(Me.tableTagLibrary.ProjectIDColumn),Integer)
            End Get
            Set
                Me(Me.tableTagLibrary.ProjectIDColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TagName() As String
            Get
                Return CType(Me(Me.tableTagLibrary.TagNameColumn),String)
            End Get
            Set
                Me(Me.tableTagLibrary.TagNameColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OrderNumber() As Integer
            Get
                Return CType(Me(Me.tableTagLibrary.OrderNumberColumn),Integer)
            End Get
            Set
                Me(Me.tableTagLibrary.OrderNumberColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StartTag() As String
            Get
                Return CType(Me(Me.tableTagLibrary.StartTagColumn),String)
            End Get
            Set
                Me(Me.tableTagLibrary.StartTagColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EndTag() As String
            Get
                Return CType(Me(Me.tableTagLibrary.EndTagColumn),String)
            End Get
            Set
                Me(Me.tableTagLibrary.EndTagColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IsAppendStartTag() As Boolean
            Get
                Return CType(Me(Me.tableTagLibrary.IsAppendStartTagColumn),Boolean)
            End Get
            Set
                Me(Me.tableTagLibrary.IsAppendStartTagColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IsAppendEndTag() As Boolean
            Get
                Return CType(Me(Me.tableTagLibrary.IsAppendEndTagColumn),Boolean)
            End Get
            Set
                Me(Me.tableTagLibrary.IsAppendEndTagColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IsStartTagRegex() As Boolean
            Get
                Return CType(Me(Me.tableTagLibrary.IsStartTagRegexColumn),Boolean)
            End Get
            Set
                Me(Me.tableTagLibrary.IsStartTagRegexColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IsEndTagRegex() As Boolean
            Get
                Return CType(Me(Me.tableTagLibrary.IsEndTagRegexColumn),Boolean)
            End Get
            Set
                Me(Me.tableTagLibrary.IsEndTagRegexColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MaxChars() As Integer
            Get
                Return CType(Me(Me.tableTagLibrary.MaxCharsColumn),Integer)
            End Get
            Set
                Me(Me.tableTagLibrary.MaxCharsColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IsOptional() As Boolean
            Get
                Return CType(Me(Me.tableTagLibrary.IsOptionalColumn),Boolean)
            End Get
            Set
                Me(Me.tableTagLibrary.IsOptionalColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IsSingleRegex() As Boolean
            Get
                Return CType(Me(Me.tableTagLibrary.IsSingleRegexColumn),Boolean)
            End Get
            Set
                Me(Me.tableTagLibrary.IsSingleRegexColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property isReverseSearch() As Boolean
            Get
                Return CType(Me(Me.tableTagLibrary.isReverseSearchColumn),Boolean)
            End Get
            Set
                Me(Me.tableTagLibrary.isReverseSearchColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IsURL() As Boolean
            Get
                Return CType(Me(Me.tableTagLibrary.IsURLColumn),Boolean)
            End Get
            Set
                Me(Me.tableTagLibrary.IsURLColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property isSaveData() As Boolean
            Get
                Return CType(Me(Me.tableTagLibrary.isSaveDataColumn),Boolean)
            End Get
            Set
                Me(Me.tableTagLibrary.isSaveDataColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DynamicCode() As String
            Get
                Return CType(Me(Me.tableTagLibrary.DynamicCodeColumn),String)
            End Get
            Set
                Me(Me.tableTagLibrary.DynamicCodeColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IsSharedTag() As Boolean
            Get
                Return CType(Me(Me.tableTagLibrary.IsSharedTagColumn),Boolean)
            End Get
            Set
                Me(Me.tableTagLibrary.IsSharedTagColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TagLibraryRowParent() As TagLibraryRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_TAGLIBRA_PARENTTAG_TAGLIBRA")),TagLibraryRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_TAGLIBRA_PARENTTAG_TAGLIBRA"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ProjectRow() As ProjectRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_TAGLIBRA_PROJECT_T_PROJECT")),ProjectRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_TAGLIBRA_PROJECT_T_PROJECT"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsParent_TagIDNull() As Boolean
            Return Me.IsNull(Me.tableTagLibrary.Parent_TagIDColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetParent_TagIDNull()
            Me(Me.tableTagLibrary.Parent_TagIDColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetTagLibraryRows() As TagLibraryRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_TAGLIBRA_PARENTTAG_TAGLIBRA")),TagLibraryRow())
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class UrlRow
        Inherits System.Data.DataRow
        
        Private tableUrl As UrlDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableUrl = CType(Me.Table,UrlDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UrlID() As Integer
            Get
                Return CType(Me(Me.tableUrl.UrlIDColumn),Integer)
            End Get
            Set
                Me(Me.tableUrl.UrlIDColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ProjectID() As Integer
            Get
                Return CType(Me(Me.tableUrl.ProjectIDColumn),Integer)
            End Get
            Set
                Me(Me.tableUrl.ProjectIDColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UrlStatusID() As Integer
            Get
                Return CType(Me(Me.tableUrl.UrlStatusIDColumn),Integer)
            End Get
            Set
                Me(Me.tableUrl.UrlStatusIDColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Url() As String
            Get
                Return CType(Me(Me.tableUrl.UrlColumn),String)
            End Get
            Set
                Me(Me.tableUrl.UrlColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UrlReferer() As String
            Get
                If Me.IsUrlRefererNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableUrl.UrlRefererColumn),String)
                End If
            End Get
            Set
                Me(Me.tableUrl.UrlRefererColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PostData() As String
            Get
                If Me.IsPostDataNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableUrl.PostDataColumn),String)
                End If
            End Get
            Set
                Me(Me.tableUrl.PostDataColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LastModified() As Date
            Get
                Try 
                    Return CType(Me(Me.tableUrl.LastModifiedColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'LastModified' in table 'Url' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUrl.LastModifiedColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LastScraped() As Date
            Get
                Try 
                    Return CType(Me(Me.tableUrl.LastScrapedColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'LastScraped' in table 'Url' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUrl.LastScrapedColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateAdded() As Date
            Get
                Return CType(Me(Me.tableUrl.DateAddedColumn),Date)
            End Get
            Set
                Me(Me.tableUrl.DateAddedColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Content() As String
            Get
                If Me.IsContentNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableUrl.ContentColumn),String)
                End If
            End Get
            Set
                Me(Me.tableUrl.ContentColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LastAssigned() As Date
            Get
                Try 
                    Return CType(Me(Me.tableUrl.LastAssignedColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'LastAssigned' in table 'Url' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUrl.LastAssignedColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ProjectRow() As ProjectRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_URL_PROJECT_S_PROJECT")),ProjectRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_URL_PROJECT_S_PROJECT"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUrlRefererNull() As Boolean
            Return Me.IsNull(Me.tableUrl.UrlRefererColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUrlRefererNull()
            Me(Me.tableUrl.UrlRefererColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPostDataNull() As Boolean
            Return Me.IsNull(Me.tableUrl.PostDataColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPostDataNull()
            Me(Me.tableUrl.PostDataColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLastModifiedNull() As Boolean
            Return Me.IsNull(Me.tableUrl.LastModifiedColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLastModifiedNull()
            Me(Me.tableUrl.LastModifiedColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLastScrapedNull() As Boolean
            Return Me.IsNull(Me.tableUrl.LastScrapedColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLastScrapedNull()
            Me(Me.tableUrl.LastScrapedColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsContentNull() As Boolean
            Return Me.IsNull(Me.tableUrl.ContentColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetContentNull()
            Me(Me.tableUrl.ContentColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLastAssignedNull() As Boolean
            Return Me.IsNull(Me.tableUrl.LastAssignedColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLastAssignedNull()
            Me(Me.tableUrl.LastAssignedColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetUrlLogRows() As UrlLogRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_URLLOG_URL_URLLO_URL")),UrlLogRow())
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class UrlStatusRow
        Inherits System.Data.DataRow
        
        Private tableUrlStatus As UrlStatusDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableUrlStatus = CType(Me.Table,UrlStatusDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UrlStatusID() As Integer
            Get
                Return CType(Me(Me.tableUrlStatus.UrlStatusIDColumn),Integer)
            End Get
            Set
                Me(Me.tableUrlStatus.UrlStatusIDColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Name() As String
            Get
                Try 
                    Return CType(Me(Me.tableUrlStatus.NameColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'Name' in table 'UrlStatus' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUrlStatus.NameColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Description() As String
            Get
                Try 
                    Return CType(Me(Me.tableUrlStatus.DescriptionColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'Description' in table 'UrlStatus' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUrlStatus.DescriptionColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNameNull() As Boolean
            Return Me.IsNull(Me.tableUrlStatus.NameColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNameNull()
            Me(Me.tableUrlStatus.NameColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDescriptionNull() As Boolean
            Return Me.IsNull(Me.tableUrlStatus.DescriptionColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDescriptionNull()
            Me(Me.tableUrlStatus.DescriptionColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ProjectRow
        Inherits System.Data.DataRow
        
        Private tableProject As ProjectDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableProject = CType(Me.Table,ProjectDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ProjectID() As Integer
            Get
                Return CType(Me(Me.tableProject.ProjectIDColumn),Integer)
            End Get
            Set
                Me(Me.tableProject.ProjectIDColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Name() As String
            Get
                Return CType(Me(Me.tableProject.NameColumn),String)
            End Get
            Set
                Me(Me.tableProject.NameColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Comment() As String
            Get
                Try 
                    Return CType(Me(Me.tableProject.CommentColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("The value for column 'Comment' in table 'Project' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProject.CommentColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateAdded() As Date
            Get
                Return CType(Me(Me.tableProject.DateAddedColumn),Date)
            End Get
            Set
                Me(Me.tableProject.DateAddedColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateRun() As Date
            Get
                Return CType(Me(Me.tableProject.DateRunColumn),Date)
            End Get
            Set
                Me(Me.tableProject.DateRunColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Elasped() As Integer
            Get
                Return CType(Me(Me.tableProject.ElaspedColumn),Integer)
            End Get
            Set
                Me(Me.tableProject.ElaspedColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IsSaveContent() As Boolean
            Get
                Return CType(Me(Me.tableProject.IsSaveContentColumn),Boolean)
            End Get
            Set
                Me(Me.tableProject.IsSaveContentColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ScrapeInterval() As Integer
            Get
                Return CType(Me(Me.tableProject.ScrapeIntervalColumn),Integer)
            End Get
            Set
                Me(Me.tableProject.ScrapeIntervalColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DownloadDelay() As Integer
            Get
                Return CType(Me(Me.tableProject.DownloadDelayColumn),Integer)
            End Get
            Set
                Me(Me.tableProject.DownloadDelayColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Threads() As Integer
            Get
                Return CType(Me(Me.tableProject.ThreadsColumn),Integer)
            End Get
            Set
                Me(Me.tableProject.ThreadsColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ProxyCheckURl() As String
            Get
                Return CType(Me(Me.tableProject.ProxyCheckURlColumn),String)
            End Get
            Set
                Me(Me.tableProject.ProxyCheckURlColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ProxyCheckContent() As String
            Get
                Return CType(Me(Me.tableProject.ProxyCheckContentColumn),String)
            End Get
            Set
                Me(Me.tableProject.ProxyCheckContentColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCommentNull() As Boolean
            Return Me.IsNull(Me.tableProject.CommentColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCommentNull()
            Me(Me.tableProject.CommentColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetUrlRows() As UrlRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_URL_PROJECT_S_PROJECT")),UrlRow())
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetTagLibraryRows() As TagLibraryRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_TAGLIBRA_PROJECT_T_PROJECT")),TagLibraryRow())
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetReportsRows() As ReportsRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_REPORTS_PROJECT_R_PROJECT")),ReportsRow())
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class UrlLogRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As UrlLogRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As UrlLogRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As UrlLogRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ProxyRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As ProxyRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ProxyRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ProxyRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ProxyStatusRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As ProxyStatusRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ProxyStatusRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ProxyStatusRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ReportsRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As ReportsRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ReportsRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ReportsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class TagLibraryRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As TagLibraryRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As TagLibraryRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As TagLibraryRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class UrlRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As UrlRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As UrlRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As UrlRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class UrlStatusRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As UrlStatusRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As UrlStatusRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As UrlStatusRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ProjectRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As ProjectRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ProjectRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ProjectRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
