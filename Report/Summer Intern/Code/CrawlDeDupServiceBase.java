// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: SpringServiceBase.vsl in andromda-spring-cartridge.
//
package com.ten45.service.aggregator;

/**
 * <p>
 * Spring Service base class for <code>com.ten45.service.aggregator.CrawlDeDupService</code>,
 * provides access to all services and entities referenced by this service.
 * </p>
 *
 * @see com.ten45.service.aggregator.CrawlDeDupService
 */
public abstract class CrawlDeDupServiceBase
    implements com.ten45.service.aggregator.CrawlDeDupService
{

    private com.ten45.manager.aggregator.ClassificationManager classificationManager;

    /**
     * Sets the reference to <code>classificationManager</code>.
     */
    public void setClassificationManager(com.ten45.manager.aggregator.ClassificationManager classificationManager)
    {
        this.classificationManager = classificationManager;
    }

    /**
     * Gets the reference to <code>classificationManager</code>.
     */
    protected com.ten45.manager.aggregator.ClassificationManager getClassificationManager()
    {
        return this.classificationManager;
    }

    private com.ten45.entity.product.ProductDao productDao;

    /**
     * Sets the reference to <code>product</code>'s DAO.
     */
    public void setProductDao(com.ten45.entity.product.ProductDao productDao)
    {
        this.productDao = productDao;
    }

    /**
     * Gets the reference to <code>product</code>'s DAO.
     */
    protected com.ten45.entity.product.ProductDao getProductDao()
    {
        return this.productDao;
    }

    private com.ten45.entity.product.PricingHistoryDao pricingHistoryDao;

    /**
     * Sets the reference to <code>pricingHistory</code>'s DAO.
     */
    public void setPricingHistoryDao(com.ten45.entity.product.PricingHistoryDao pricingHistoryDao)
    {
        this.pricingHistoryDao = pricingHistoryDao;
    }

    /**
     * Gets the reference to <code>pricingHistory</code>'s DAO.
     */
    protected com.ten45.entity.product.PricingHistoryDao getPricingHistoryDao()
    {
        return this.pricingHistoryDao;
    }

    private com.ten45.entity.product.ProductCategoryDao productCategoryDao;

    /**
     * Sets the reference to <code>productCategory</code>'s DAO.
     */
    public void setProductCategoryDao(com.ten45.entity.product.ProductCategoryDao productCategoryDao)
    {
        this.productCategoryDao = productCategoryDao;
    }

    /**
     * Gets the reference to <code>productCategory</code>'s DAO.
     */
    protected com.ten45.entity.product.ProductCategoryDao getProductCategoryDao()
    {
        return this.productCategoryDao;
    }

    /**
     * @see com.ten45.service.aggregator.CrawlDeDupService#deDupCategories(java.util.List<com.ten45.entity.product.ProductCategory>)
     */
    public com.ten45.domain.crawler.DeDupInfo deDupCategories(java.util.List<com.ten45.entity.product.ProductCategory> categories)
    {
        if (categories == null)
        {
            throw new IllegalArgumentException(
                "com.ten45.service.aggregator.CrawlDeDupService.deDupCategories(java.util.List<com.ten45.entity.product.ProductCategory> categories) - 'categories' can not be null");
        }
        try
        {
            return this.handleDeDupCategories(categories);
        }
        catch (Throwable th)
        {
            throw new com.ten45.service.aggregator.CrawlDeDupServiceException(
                "Error performing 'com.ten45.service.aggregator.CrawlDeDupService.deDupCategories(java.util.List<com.ten45.entity.product.ProductCategory> categories)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #deDupCategories(java.util.List<com.ten45.entity.product.ProductCategory>)}
      */
    protected abstract com.ten45.domain.crawler.DeDupInfo handleDeDupCategories(java.util.List<com.ten45.entity.product.ProductCategory> categories)
        throws java.lang.Exception;

    /**
     * @see com.ten45.service.aggregator.CrawlDeDupService#deDupProducts(java.util.List<com.ten45.entity.online.OnlineProduct>)
     */
    public com.ten45.domain.crawler.DeDupInfo deDupProducts(java.util.List<com.ten45.entity.online.OnlineProduct> products)
    {
        if (products == null)
        {
            throw new IllegalArgumentException(
                "com.ten45.service.aggregator.CrawlDeDupService.deDupProducts(java.util.List<com.ten45.entity.online.OnlineProduct> products) - 'products' can not be null");
        }
        try
        {
            return this.handleDeDupProducts(products);
        }
        catch (Throwable th)
        {
            throw new com.ten45.service.aggregator.CrawlDeDupServiceException(
                "Error performing 'com.ten45.service.aggregator.CrawlDeDupService.deDupProducts(java.util.List<com.ten45.entity.online.OnlineProduct> products)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #deDupProducts(java.util.List<com.ten45.entity.online.OnlineProduct>)}
      */
    protected abstract com.ten45.domain.crawler.DeDupInfo handleDeDupProducts(java.util.List<com.ten45.entity.online.OnlineProduct> products)
        throws java.lang.Exception;

    /**
     * @see com.ten45.service.aggregator.CrawlDeDupService#loadChecksum(com.ten45.entity.common.AbstractMerchant, java.lang.String)
     */
    public void loadChecksum(com.ten45.entity.common.AbstractMerchant merchant, java.lang.String productIdAttributeName)
    {
        if (merchant == null)
        {
            throw new IllegalArgumentException(
                "com.ten45.service.aggregator.CrawlDeDupService.loadChecksum(com.ten45.entity.common.AbstractMerchant merchant, java.lang.String productIdAttributeName) - 'merchant' can not be null");
        }
        if (productIdAttributeName == null)
        {
            throw new IllegalArgumentException(
                "com.ten45.service.aggregator.CrawlDeDupService.loadChecksum(com.ten45.entity.common.AbstractMerchant merchant, java.lang.String productIdAttributeName) - 'productIdAttributeName' can not be null");
        }
        try
        {
            this.handleLoadChecksum(merchant, productIdAttributeName);
        }
        catch (Throwable th)
        {
            throw new com.ten45.service.aggregator.CrawlDeDupServiceException(
                "Error performing 'com.ten45.service.aggregator.CrawlDeDupService.loadChecksum(com.ten45.entity.common.AbstractMerchant merchant, java.lang.String productIdAttributeName)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #loadChecksum(com.ten45.entity.common.AbstractMerchant, java.lang.String)}
      */
    protected abstract void handleLoadChecksum(com.ten45.entity.common.AbstractMerchant merchant, java.lang.String productIdAttributeName)
        throws java.lang.Exception;

    /**
     * @see com.ten45.service.aggregator.CrawlDeDupService#unLoadChecksum(com.ten45.entity.common.AbstractMerchant)
     */
    public void unLoadChecksum(com.ten45.entity.common.AbstractMerchant merchant)
    {
        if (merchant == null)
        {
            throw new IllegalArgumentException(
                "com.ten45.service.aggregator.CrawlDeDupService.unLoadChecksum(com.ten45.entity.common.AbstractMerchant merchant) - 'merchant' can not be null");
        }
        try
        {
            this.handleUnLoadChecksum(merchant);
        }
        catch (Throwable th)
        {
            throw new com.ten45.service.aggregator.CrawlDeDupServiceException(
                "Error performing 'com.ten45.service.aggregator.CrawlDeDupService.unLoadChecksum(com.ten45.entity.common.AbstractMerchant merchant)' --> " + th,
                th);
        }
    }

     /**
      * Performs the core logic for {@link #unLoadChecksum(com.ten45.entity.common.AbstractMerchant)}
      */
    protected abstract void handleUnLoadChecksum(com.ten45.entity.common.AbstractMerchant merchant)
        throws java.lang.Exception;

    /**
     * Gets the current <code>principal</code> if one has been set,
     * otherwise returns <code>null</code>.
     *
     * @return the current principal
     */
    protected java.security.Principal getPrincipal()
    {
        return com.ten45.PrincipalStore.get();
    }
}